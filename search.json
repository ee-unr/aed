[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An√°lisis Exploratorio de Datos",
    "section": "",
    "text": "Bienvenida\n\n\nP√°gina en construcci√≥n.",
    "crumbs": [
      "Bienvenida"
    ]
  },
  {
    "objectID": "capitulos/00_info.html",
    "href": "capitulos/00_info.html",
    "title": "Informaci√≥n general sobre la asignatura",
    "section": "",
    "text": "Cursado\nModalidad, comisiones, horarios",
    "crumbs": [
      "Informaci√≥n general sobre la asignatura"
    ]
  },
  {
    "objectID": "capitulos/00_info.html#aula-virtual",
    "href": "capitulos/00_info.html#aula-virtual",
    "title": "Informaci√≥n general sobre la asignatura",
    "section": "Aula virtual?",
    "text": "Aula virtual?",
    "crumbs": [
      "Informaci√≥n general sobre la asignatura"
    ]
  },
  {
    "objectID": "capitulos/00_info.html#programa",
    "href": "capitulos/00_info.html#programa",
    "title": "Informaci√≥n general sobre la asignatura",
    "section": "Programa",
    "text": "Programa\nenlace al programa aprobado",
    "crumbs": [
      "Informaci√≥n general sobre la asignatura"
    ]
  },
  {
    "objectID": "capitulos/00_info.html#evaluaci√≥n",
    "href": "capitulos/00_info.html#evaluaci√≥n",
    "title": "Informaci√≥n general sobre la asignatura",
    "section": "Evaluaci√≥n",
    "text": "Evaluaci√≥n",
    "crumbs": [
      "Informaci√≥n general sobre la asignatura"
    ]
  },
  {
    "objectID": "capitulos/00_info.html#c√≥digo-de-conducta",
    "href": "capitulos/00_info.html#c√≥digo-de-conducta",
    "title": "Informaci√≥n general sobre la asignatura",
    "section": "C√≥digo de conducta",
    "text": "C√≥digo de conducta",
    "crumbs": [
      "Informaci√≥n general sobre la asignatura"
    ]
  },
  {
    "objectID": "capitulos/01.html",
    "href": "capitulos/01.html",
    "title": "Unidad 1. Introducci√≥n",
    "section": "",
    "text": "Presentaci√≥n de la Unidad 1.\n\nP√°gina en construcci√≥n.",
    "crumbs": [
      "Unidad 1. Introducci√≥n"
    ]
  },
  {
    "objectID": "capitulos/01_teoria_de_la_visualizacion.html",
    "href": "capitulos/01_teoria_de_la_visualizacion.html",
    "title": "1¬† Teor√≠a de la Visualizaci√≥n",
    "section": "",
    "text": "1.1 Introducci√≥n",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Teor√≠a de la Visualizaci√≥n</span>"
    ]
  },
  {
    "objectID": "capitulos/01_teoria_de_la_visualizacion.html#introducci√≥n",
    "href": "capitulos/01_teoria_de_la_visualizacion.html#introducci√≥n",
    "title": "1¬† Teor√≠a de la Visualizaci√≥n",
    "section": "",
    "text": "En general, los/as estad√≠sticos/as sabemos c√≥mo visualizar datos sin ser demasiado enga√±osos. Sin embargo, es posible que no tengamos un sentido bien desarrollado de la est√©tica visual y que tomemos decisiones que restan valor al mensaje.\nLos dise√±adores, por otro lado, pueden preparar visualizaciones atractivas pero muchas veces descuidan la integridad de los datos. Lo ideal, entonces, es tomar lo mejor de ambos mundos.\nComo dice Wilke:\n\n\n\n\n\n\n\nCita\n\n\n\nLa visualizaci√≥n de datos es en parte arte y en parte ciencia. El desaf√≠o es hacer bien el arte sin equivocarse con la ciencia, y viceversa.\n\n\n\nUna visualizaci√≥n de datos tiene la obligaci√≥n de:\n\ntransmitir los datos con precisi√≥n\nno distorsionar la informaci√≥n ni inducir al error\nser est√©ticamente agradable\nser f√°cilmente interpretable\nenfocarse en un mensaje puntual (no tratar de mostrar todo junto en un mismo lugar)\nevitar caracter√≠sticas que distraigan (efectos 3D innecesarios, etc.): ‚Äúmenos es m√°s‚Äù\n\nEl objetivo de esta materia es estudiar c√≥mo aplicar estos ideales a los gr√°ficos estad√≠sticos m√°s comunes y, al mismo tiempo, afianzar los conocimientos sobre programaci√≥n orientada a visualizaciones.\nLa visualizaci√≥n de datos est√° √≠ntimamente ligada al concepto de comunicaci√≥n. Supongamos que deseamos transmitir una idea sobre el conjunto de datos que estamos analizando, a una cierta audiencia que puede estar compuesta por compa√±eros de facultad o de trabajo, al p√∫blico de un congreso, usuarios de redes sociales, etc. Para comunicarnos con √©xito, tendremos que presentarle a esa audiencia una historia clara e interesante.\n\n\n\n\n\nEn su formato tradicional, una historia se puede dividir en 3 partes: inicio, desarrollo (nudo) y final (desenlace). Un buen gr√°fico tambi√©n debe contar con estas caracter√≠sticas:\n\nInicio: plantea el interrogante que el gr√°fico desea resolver. Seguramente existe una pregunta o hip√≥tesis que marca el inicio de esta historia. Presentar gr√°ficos sin contexto, o sin explicar qu√© fue lo que los motiv√≥, puede afectar nuestra capacidad de comprender la visualizaci√≥n o de interesarnos en ella.\nDesarrollo: en este contexto, podemos pensar al desarrollo de la historia como las decisiones estad√≠sticas que se tomaron para dar respuesta a la pregunta planteada inicialmente. Cu√°ndo y c√≥mo se recolectaron los datos, qu√© se hizo con ellos, c√≥mo se los manipul√≥ (en el buen sentido), c√≥mo se los analiz√≥, por qu√© se eligi√≥ este gr√°fico en particular, etc.\nFinal: el desenlace de la historia consiste en la presentaci√≥n del gr√°fico como producto final, adjuntando interpretaciones que podemos obtener como estad√≠sticos/as al analizar las figuras generadas. En este punto es importante aplicar los conceptos mencionados arriba (visualizaciones que transmitan un mensaje fiel a los datos, est√©ticamente agradables, etc.), y al mismo tiempo acompa√±arla de conclusiones v√°lidas que dejen claramente planteada nuestra visi√≥n de esta historia.\n\nNo siempre vamos a poder aplicar la estructura reci√©n mencionada: hay contextos donde la historia detr√°s de la visualizaci√≥n no es tan importante, o donde un gr√°fico individual no alcanza para contarla de manera completa. Tambi√©n es cierto que resulta dif√≠cil ‚Äúvender‚Äù algunos gr√°ficos en particular (¬øalguien alguna vez se emocion√≥ mirando un boxplot?) ü§£.\nM√°s all√° de esto, consideramos importante que el an√°lisis exploratorio de datos sea riguroso desde el punto de vista estad√≠stico, pero que al mismo tiempo incorpore conceptos que realcen su impacto visual y su potencial comunicativo.",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Teor√≠a de la Visualizaci√≥n</span>"
    ]
  },
  {
    "objectID": "capitulos/01_teoria_de_la_visualizacion.html#fundamentos-de-la-visualizaci√≥n",
    "href": "capitulos/01_teoria_de_la_visualizacion.html#fundamentos-de-la-visualizaci√≥n",
    "title": "1¬† Teor√≠a de la Visualizaci√≥n",
    "section": "1.2 Fundamentos de la Visualizaci√≥n",
    "text": "1.2 Fundamentos de la Visualizaci√≥n\n\nCada vez que visualizamos datos, estamos tomando sus valores y convirti√©ndolos de manera sistem√°tica y l√≥gica en los elementos visuales que conforman el gr√°fico final. El proceso de asignar ciertos datos a ciertas caracter√≠sticas del gr√°fico es la esencia de la visualizaci√≥n de datos.\nLe decimos mapeo (en ingl√©s, mapping) a esta correspondencia entre dato/caracter√≠stica. A su vez, las caracter√≠sticas que conforman el gr√°fico son llamadas est√©ticas (aesthetics). Este vocabulario puede sonar familiar, ya que es empleado por el paquete ggplot2 de R.\nNo debe confundirse este concepto de est√©tica con el utilizado usualmente (estudio y valoraci√≥n de lo que se percibe como bello, art√≠stico, de buen gusto, etc.), sino que debe entenderse como aquello que se puede percibir con los sentidos, la cual es su definici√≥n original en idioma griego.\nPor lo tanto, cuando hablemos de elementos est√©ticos en esta materia, estamos haciendo referencia a las caracter√≠sticas que percibimos visualmente en un gr√°fico.\n\n\n1.2.1 Est√©ticas\n\nLas est√©ticas describen cada aspecto de un determinado gr√°fico. Las m√°s comunes son:\n\nPosici√≥n (position): generalmente como coordenadas cartesianas \\((x, y)\\) en gr√°ficos en 2D, aunque existen otras posibilidades (coordenadas polares, gr√°ficos tridimensionales, etc.)\nForma (shape)\nTama√±o (size)\nColor\nAncho de l√≠nea (line width)\nTipo de l√≠nea (line type)\n\n\n\n\n\n\n\n\n\n\n\n\nTodas las est√©ticas se pueden clasificar dentro de 2 posibles grupos: las que permiten representar datos continuos, y las que no. Entre las mencionadas arriba, tenemos que posici√≥n, tama√±o, color y ancho de l√≠nea pueden ser utilizadas para datos continuos, mientras que forma y tipo de l√≠nea s√≥lo sirven para datos categ√≥ricos o discretos.\nVeamos a continuaci√≥n algunos ejemplos sencillos con el tradicional conjunto de datos de las flores de Iris.\n\n\nEjemplo 1\nRepresentamos dos variables cuantitativas continuas en un sistema de ejes cartesianos (est√©tica de la posici√≥n). Tama√±o, forma (c√≠rculo) y color (negro) permanecen constantes para todos los datos; son est√©ticas presentes pero que no agregan informaci√≥n.\n\n\n\n\n\n\n\n\n\n\n\nEjemplo 2\nUtilizamos la est√©tica ‚Äòforma‚Äô para representar una variable categ√≥rica (especie) que agrega informaci√≥n. Recordemos que la forma s√≥lo puede asociarse a una cantidad finita (discreta) de valores; no tendr√≠a sentido asociar el ancho del p√©talo con la forma. Notemos adem√°s la necesidad de incorporar una leyenda al gr√°fico que permita relacionar formas con valores puntuales de los datos.\n\n\n\n\n\n\n\n\n\n\n\nEjemplo 3\nUsamos la est√©tica ‚Äòtama√±o‚Äô para representar una tercera variable, en este caso ancho del s√©palo. El di√°metro de cada punto ahora depende de esta variable: flores con s√©palo m√°s anchos se grafican con puntos de mayor di√°metro. Una vez m√°s, necesitamos una leyenda adecuada para interpretar el gr√°fico.\n\n\n\n\n\n\n\n\n\n\n\nEjemplo 4\nEst√©ticas que se pueden usar para datos continuos, como el tama√±o, tambi√©n sirven para representar datos discretos. Advertimos que este uso no es recomendable, ya que la diferencia de tama√±o entre especies dificulta la correcta interpretaci√≥n de los datos graficados.\n\n\n\n\n\n\n\n\n\n\n\nEjemplo 5\nUna manera correcta de diferenciar las especies es asignando una paleta de colores que las distinga (es importante que la elecci√≥n de colores no opaque el mensaje; hablaremos de esto m√°s adelante). Si bien la est√©tica del ‚Äòcolor‚Äô fue planteada arriba como continua, tambi√©n resulta muy √∫til para representar datos discretos. Este gr√°fico es una alternativa al ejemplo 2: ambos muestran exactamente la misma informaci√≥n, pero haciendo uso de diferentes est√©ticas.\n\n\n\n\n\n\n\n\n\n\n\nEjemplo 6\nAhora usamos la est√©tica ‚Äòcolor‚Äô para representar datos continuos, en este caso nuevamente el ancho del s√©palo. Ac√° tambi√©n debemos prestar especial atenci√≥n a la paleta elegida para que el mensaje sea lo m√°s claro posible. Este gr√°fico es una versi√≥n alternativa al del ejemplo 3: muestra la misma informaci√≥n pero con est√©ticas distintas.\n\n\n\n\n\n\n\n\n\n\n\nEjemplo 7\nUn mamarracho donde el color se asigna al ancho de s√©palo, el tama√±o al largo del s√©palo y la forma a la especie. No debemos olvidar la m√°xima que postula que ‚Äòmenos es m√°s‚Äô. Al querer mostrar todas las variables al mismo tiempo, terminamos creando una visualizaci√≥n demasiado cargada de informaci√≥n, compleja y dif√≠cil de interpretar.\n\n\n\n\n\n\n\n\n\n\n\n\n1.2.2 Escalas\n\nPara unir el mundo de las est√©ticas con el mundo de los datos necesitamos especificar qu√© valores de los datos se corresponden con qu√© valores espec√≠ficos de las est√©ticas.\nPor ejemplo, si nuestro gr√°fico tiene un eje X, sabemos que el valor ‚Äú5‚Äù estar√° a una distancia de 5 unidades del origen, el valor ‚Äú10‚Äù estar√° al doble de distancia, etc. Este mapeo en particular, que corresponde a la est√©tica de posici√≥n, se da de manera natural, casi inconsciente.\nLos restantes mapeos requieren de un poco m√°s de reflexi√≥n. Si vamos a usar colores para representar grupos, debemos especificar c√≥mo relacionarlos (ej: Argentina = celeste, Brasil = verde, etc.).\nEsta asociaci√≥n entre valores de los datos y valores de las est√©ticas se crea mediante la definici√≥n de una escala, la cual determina una relaci√≥n entre datos y est√©ticas, y al mismo tiempo crea la necesidad de incluir en el gr√°fico una leyenda que deje en claro los detalles de esa asociaci√≥n.\nSiempre que se defina una escala, cada valor necesita estar asociado a una √∫nica posici√≥n, forma o color, y viceversa. En otras palabras, la relaci√≥n debe ser biun√≠voca (uno a uno). Escalas que no cumplan esta propiedad b√°sica deben evitarse a toda costa, ya que el gr√°fico no ser√° coherente.\n\n\nEjemplo: temperaturas mensuales\n\nA continuaci√≥n se presentan las primeras filas de un conjunto de datos que proporciona las temperaturas mensuales normales (temperatura promedio en cada mes durante una ventana de 30 a√±os) para cuatro ciudades de Argentina. Esta tabla contiene 5 variables: mes, ciudad, provincia, c√≥digo de la estaci√≥n meteorol√≥gica que mide los datos, y temperatura (en grados cent√≠grados).\n\n\n\n\nMes\nCiudad\nProvincia\nC√≥digo\nTemperatura\n\n\n\n\nEne\nLa Quiaca\nJujuy\nSASQ\n13.2\n\n\nEne\nRosario\nSanta Fe\nSAAR\n24.8\n\n\nEne\nBariloche\nR√≠o Negro\nSAZS\n15.4\n\n\nEne\nUshuaia\nTierra del Fuego\nSAWH\n9.4\n\n\nFeb\nLa Quiaca\nJujuy\nSASQ\n13\n\n\nFeb\nRosario\nSanta Fe\nSAAR\n23.4\n\n\nFeb\nBariloche\nR√≠o Negro\nSAZS\n15\n\n\nFeb\nUshuaia\nTierra del Fuego\nSAWH\n8.4\n\n\nMar\nLa Quiaca\nJujuy\nSASQ\n12.8\n\n\nMar\nRosario\nSanta Fe\nSAAR\n21.5\n\n\nMar\nBariloche\nR√≠o Negro\nSAZS\n12.1\n\n\nMar\nUshuaia\nTierra del Fuego\nSAWH\n6.2\n\n\n\n\nCon estos datos se realizaron las siguientes figuras:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResponder\n\n\n\n\n¬øCon qu√© est√©ticas se asoci√≥ a cada variable en el primer gr√°fico?\n¬øCon qu√© est√©ticas se asoci√≥ a cada variable en el segundo gr√°fico?\n¬øPodr√≠amos cambiar el orden en el que aparecen las categor√≠as representadas en los ejes del segundo gr√°fico?",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Teor√≠a de la Visualizaci√≥n</span>"
    ]
  },
  {
    "objectID": "capitulos/01_teoria_de_la_visualizacion.html#sistemas-de-coordenadas-y-ejes",
    "href": "capitulos/01_teoria_de_la_visualizacion.html#sistemas-de-coordenadas-y-ejes",
    "title": "1¬† Teor√≠a de la Visualizaci√≥n",
    "section": "1.3 Sistemas de coordenadas y ejes",
    "text": "1.3 Sistemas de coordenadas y ejes\n\nPara realizar cualquier tipo de visualizaci√≥n de datos necesitamos definir escalas de posici√≥n, las cuales determinan en qu√© parte del gr√°fico se ubican los diferentes datos. Adem√°s, tenemos que especificar la disposici√≥n geom√©trica relativa de estas escalas.\n\n\n\n\n\n\n\nDefinici√≥n\n\n\n\nLa combinaci√≥n de un conjunto de escalas de posici√≥n y su disposici√≥n geom√©trica relativa se denomina sistema de coordenadas.\n\n\n\nEn visualizaciones 2D se requieren dos n√∫meros para especificar un punto de manera √∫nica en el plano y, por lo tanto, necesitamos dos escalas de posici√≥n. Estas dos escalas suelen ser los ejes X e Y del gr√°fico.\nConvencionalmente, ambos ejes son perpendiculares entre s√≠ y representan escalas lineales, pero tambi√©n podr√≠amos elegir disposiciones no lineales. M√°s adelante veremos ejemplos de ambos casos.\n\n\n1.3.1 Coordenadas cartesianas\n\nEl sistema de coordenadas 2D m√°s utilizado para la visualizaci√≥n de datos es el cartesiano, llamado as√≠ en honor al fil√≥sofo y matem√°tico franc√©s Ren√© Descartes, quien desarroll√≥ este concepto en el siglo XVII.\nCada ubicaci√≥n en el plano bidimensional se especifica de forma √∫nica mediante un valor correspondiente al eje X (eje de las abscisas) y un valor correspondiente al eje Y (eje de las ordenadas).\n\n\n\n\n\n\n\nMuchas veces los ejes representan variables con unidades de medida diferentes. En estos casos es v√°lido estirar o comprimir uno en relaci√≥n con el otro; el grado de distorsi√≥n utilizado depender√° de qu√© mensaje queremos transmitir a partir del gr√°fico en cuesti√≥n:\n\nuna figura baja y ancha resalta cambios a lo largo del eje X\nuna figura alta y angosta resalta cambios a lo largo del eje Y\n\nIdealmente, vamos a elegir una relaci√≥n de aspecto que asegure que cualquier diferencia importante sea perceptible, y que al mismo tiempo no distorsione demasiado la visualizaci√≥n.\nEjemplo: temperaturas medias (suavizadas) de Rosario entre el 01/08/2022 y el 31/07/2023. ¬øQu√© ocurre cuando la relaci√≥n de aspecto (alto/ancho) est√° muy distante del 1?\n\n\n\n\n\n\n\n\n\n\n\nSi los ejes se definen en las mismas unidades de medida, se recomienda que los espaciados de la grilla sean iguales, de modo que una distancia de \\(z\\) unidades a lo largo del eje X tenga la misma longitud que una distancia de \\(z\\) unidades a lo largo del eje Y.\nPor √∫ltimo, cabe destacar que el sistema de coordenadas cartesiano es invariante ante transformaciones lineales de las unidades de medida. Esto implica que la forma, aspecto y distancias presentes en el gr√°fico no se modifican si pasamos de cent√≠metros a kil√≥metros, gramos a toneladas, Celsius a Fahrenheit, etc.\n\n\n\n1.3.2 Ejes lineales\n\nEn los ejemplos presentados hasta ahora, las l√≠neas de la cuadr√≠cula a lo largo de cada eje est√°n espaciadas uniformemente. Esto implica que dos pares de puntos que est√°n a la misma distancia tienen la misma magnitud de diferencia entre sus valores.\nEn estos sistemas de coordenadas decimos que las escalas de posici√≥n son lineales.\n\n\n\n1.3.3 Ejes no lineales\n\nExisten escenarios en los que se prefieren escalas no lineales, en las cuales dos pares de puntos que visualmente se encuentran a la misma distancia, no poseen la misma magnitud de diferencia entre sus valores.\nLa escala no lineal m√°s utilizada es la logar√≠tmica. Recordemos que \\(\\log_b x = y \\implies b^y = x\\).\nLa siguiente figura muestra la relaci√≥n entre una escala lineal y otra logar√≠tmica, en base 10. Se representan 5 datos (1, 3.16, 10, 31.6 y 100):\n\n\n\n\n\n\n\n\n\n\n\nLas escalas logar√≠tmicas son lineales en la multiplicaci√≥n, de modo que un salto constante en la escala corresponde a una multiplicaci√≥n por un valor fijo. Por ejemplo, en este caso cada dato se obtiene multiplicando el anterior por \\(\\sqrt{10} \\approx 3.16\\), y debido a esto se ven equiespaciados en la escala logar√≠tmica de base 10.\nGeom√©tricamente no hay diferencia entre graficar los datos transformados logar√≠tmicamente en una escala lineal o graficar los datos originales en una escala logar√≠tmica: la √∫nica diferencia radica en el etiquetado del eje.\nGeneralmente es preferible etiquetar la escala logar√≠tmica con los valores originales (tercer panel en la figura), porque es m√°s f√°cil interpretar los n√∫meros que se muestran. Adem√°s, nunca debemos olvidarnos de aclarar la base utilizada en el c√°lculo de los logaritmos.\nDebido a que la multiplicaci√≥n en una escala logar√≠tmica se comporta de manera similar que la suma en una escala lineal, las escalas logar√≠tmicas son la elecci√≥n natural para cualquier dato que se haya obtenido mediante multiplicaci√≥n o divisi√≥n (por ejemplo, tasas o razones).\n\n\nEjemplo: Censo 2022\n\n\n\nPara los gr√°ficos que se muestran a continuaci√≥n, se tom√≥ el n√∫mero de habitantes de cada provincia de Argentina, seg√∫n el Censo 2022, y se lo dividi√≥ por la mediana de esos 24 valores (23 provincias + CABA).\nLa raz√≥n resultante es un n√∫mero que puede ser:\n\nMayor a 1 si la provincia tiene m√°s habitantes que la mediana\nIgual a 1 si la provincia tiene una poblaci√≥n igual a la mediana\nMenor a 1 si la provincia tiene menos habitantes que la mediana\n\nCuando trabajamos con razones, el 1 es el punto medio (como el 0 en una escala lineal). Cada valor de 1 a \\(+\\infty\\) se corresponde con un valor entre 0 y 1.\n\n\n\nVeamos estas razones graficadas en escala logar√≠tmica (la l√≠nea punteada indica una raz√≥n de 1):\n\n\n\n\n\n\n\n\n\n\nPor el contrario, para los mismos datos, una escala lineal esconde las diferencias entre provincias con poblaciones mucho m√°s peque√±as:\n\n\n\n\n\n\n\n\n\n\nLas escalas logar√≠tmicas tambi√©n se usan cuando el conjunto de datos tiene n√∫meros de magnitudes muy diferentes, aunque no representen multiplicaciones o divisiones. Si trabajamos con datos que toman el valor 0, se suele recomendar usar una escala de ra√≠z cuadrada.\n\n\n\n\n1.3.4 Sistemas de coordenadas con ejes curvos\n\nHasta ahora vimos el uso de dos ejes colocados de forma perpendicular (en √°ngulo recto) entre s√≠.\nSin embargo, existen otros sistemas de coordenadas en los que los propios ejes son curvos.\nUno de ellos es el sistema de coordenadas polares, en el que especificamos posiciones a trav√©s de un √°ngulo y una distancia radial desde el origen.\nLa siguiente figura muestra la relaci√≥n entre coordenadas cartesianas y polares.\nLas coordenadas \\(x\\) se usan como coordenadas angulares y las coordenadas \\(y\\) se usan como coordenadas radiales:\n\n\n\n\n\n\n\n\n\n\n\nEn este ejemplo el eje circular \\(x\\) va de 0 a 4 y, por lo tanto, \\(x = 0\\) y \\(x = 4\\) tienen la misma ubicaci√≥n.\nPor eso, las coordenadas polares pueden ser √∫tiles para datos de naturaleza peri√≥dica, de modo que los valores en un extremo de la escala se puedan unir l√≥gicamente a los valores en el otro extremo (ejemplo: cuando se quiere ver c√≥mo var√≠a una cantidad a lo largo del a√±o).\nEl siguiente gr√°fico muestra ese caso. La figura es adecuada ya que las temperaturas normales diarias son temperaturas promedio que no est√°n vinculadas a ning√∫n a√±o espec√≠fico: el 31 de diciembre se puede considerar como ‚Äú364 d√≠as despu√©s‚Äù o bien ‚Äúun d√≠a antes‚Äù del 1¬∞ de enero.\nAl graficar las temperaturas normales diarias en un sistema de coordenadas polares, enfatizamos la propiedad c√≠clica que poseen. Adem√°s, esta versi√≥n polar destaca cu√°n similares o dis√≠miles son las temperaturas en distintas ciudades a lo largo de ciertos per√≠odos.\nAclaraciones:\n\nLa distancia radial desde el punto central indica la temperatura diaria en Celsius.\nLos d√≠as del a√±o est√°n ordenados en el sentido contrario a las agujas del reloj, comenzando con el 1 de enero en la posici√≥n de las 6:00.\n\n\n\n\n\n\n\n\n\n\n\n\nEn el contexto de datos geo-espaciales suelen aparecer casos en los que se utilizan ejes curvos, pero que no son necesariamente sistemas de coordenadas polares. M√°s adelante, en la secci√≥n dedicada a visualizaciones mediante mapas, retomaremos este tema.",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Teor√≠a de la Visualizaci√≥n</span>"
    ]
  },
  {
    "objectID": "capitulos/01_teoria_de_la_visualizacion.html#escalas-de-color",
    "href": "capitulos/01_teoria_de_la_visualizacion.html#escalas-de-color",
    "title": "1¬† Teor√≠a de la Visualizaci√≥n",
    "section": "1.4 Escalas de color",
    "text": "1.4 Escalas de color\n\nHay tres casos fundamentales del uso de colores en una visualizaci√≥n de datos:\n\nDiferenciar grupos\nRepresentar valores\nResaltar un mensaje\n\n\n\n1.4.1 Diferenciar grupos\n\nCuando se usa el color como un medio para distinguir elementos discretos, o grupos que no tienen un orden intr√≠nseco, debemos emplear una escala de color cualitativa.\nEn ese tipo de escala se cuenta con un conjunto finito de colores espec√≠ficos que se eligen para que se vean claramente distintos entre s√≠, pero al mismo tiempo resulten similares (que ninguno se destaque sobre el resto).\nEn este caso, los colores no deben crear la impresi√≥n de un orden, por ejemplo, no se debe usar una secuencia de colores que se van aclarando u oscureciendo.\nHay escalas de colores predefinidas que tienen en cuenta estos aspectos:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEscalas de color cualitativas\n\n\n\n\nFila 1: la paleta de colores de Okabe-Ito fue propuesta en 2008 como una alternativa accesible a personas con deficiencia de la visi√≥n del color. Incluye colores vivos que se pueden nombrar f√°cilmente y que corresponden a los principales colores primarios y secundarios.\nFila 2: la escala Dark2 pertenece al proyecto ColorBrewer, desarrollado en 2017 por Cynthia Brewer, una cart√≥grafa que se ha dedicado a crear paletas de colores √∫tiles para distintos contextos.\nFila 3: la escala ggplot2 hue es la escala cualitativa predeterminada en este paquete.\n\n\n\n\nEjemplo. Crecimiento de la poblaci√≥n de Argentina de 2010 a 2022. Las provincias patag√≥nicas (color naranja) han experimentado los mayores aumentos, mientras que las de la regi√≥n pampeana (color rosa) han experimentado aumentos mucho menores.\n\n\n\n\n\n\n\n\n\n\n\n\n1.4.2 Representar valores\n\nEn este caso utilizamos una escala de color secuencial. Este tipo de escala contiene una secuencia de colores que indican claramente:\n\nqu√© valores son m√°s grandes o m√°s peque√±os que otros;\nqu√© tan distantes est√°n dos valores espec√≠ficos entre s√≠ (se debe percibir que la escala de colores var√≠a uniformemente en toda su gama).\n\n\n\n\n\nLas escalas secuenciales pueden basarse en un solo tono, por ejemplo de azul oscuro a azul claro, o en m√∫ltiples tonos (de rojo oscuro a amarillo claro, etc.).\nLas escalas de varios tonos tienden a seguir gradientes de color que se pueden ver en el mundo natural.\nUn uso muy frecuente de este tipo de escalas, como veremos m√°s adelante, es para representar mapas coropl√©ticos.\nLas siguientes son ejemplos de escalas predefinidas. La primera es monocrom√°tica, las otras no.\n\n\n\n\n\n\n\n\n\n\n\nAplicamos la escala viridis para recrear el gr√°fico sobre crecimiento porcentual de la poblaci√≥n en cada provincia:\n\n\n\n\n\n\n\n\n\n\n\nEn algunos casos, necesitamos visualizar la desviaci√≥n de los valores de los datos en una de dos direcciones con respecto a un punto medio neutral (ejemplo: n√∫meros positivos y negativos).\nEs posible que queramos mostrarlos con diferentes colores, de modo que sea inmediatamente obvio si un valor es positivo o negativo, as√≠ como cu√°nto se desv√≠a del punto medio elegido.\nEn estos casos hay que usar una escala de color divergente: es la combinaci√≥n de dos escalas secuenciales unidas en un punto medio com√∫n, que generalmente se representa con un color claro.\n\n\n\n\n\n\n\n\n\n\n\nEs necesario equilibrar las escalas divergentes, de modo que la progresi√≥n de los colores claros en el centro a los colores oscuros en el exterior sea aproximadamente la misma en cualquier direcci√≥n (ser√≠a enga√±oso representar un valor de magnitud \\(x\\) con un color mucho m√°s claro u oscuro que el utilizado para representar un valor de magnitud \\(-x\\)).\nA continuaci√≥n graficamos nuevamente el % de crecimiento poblacional en cada provincia, pero asumiendo que el punto medio viene dado por la mediana de estos porcentajes:\n\n\n\n\n\n\n\n\n\n\n\nLas escalas divergentes suelen funcionar mejor cuando los datos son aproximadamente sim√©tricos; en este caso, el punto medio corresponde a 18%, la mediana de los crecimientos observados entre ambos censos para cada jurisdicci√≥n. Tierra del Fuego, que podr√≠a llegar a considerarse como un outlier (crecimiento de casi 50%), hace que la escala de colores no se visualice en todo su rango.\n\n\n\n1.4.3 Resaltar un mensaje\n\nEn ciertas oportunidades se usan colores para enfatizar elementos relevantes de la figura, en especial cuando hay categor√≠as o valores espec√≠ficos en el conjunto de datos que contienen informaci√≥n clave sobre la historia que queremos contar.\nEn estos casos hay que usar una escala de colores acentuados, que son escalas de colores que contienen un conjunto de colores tenues y un conjunto coincidente de colores m√°s fuertes, m√°s oscuros y/o m√°s saturados.\nAs√≠, se logra el √©nfasis coloreando ciertos elementos de la figura en un color o conjunto de colores que se destacan v√≠vidamente en comparaci√≥n al resto.\nEjemplos de escalas de colores acentuados, cada una con cuatro colores base y tres colores acentuados:\n\n\n\n\n\n\n\n\n\n\n\nLas escalas de colores acentuados se pueden derivar de varias maneras diferentes:\n\nFila 1: tomar una escala de colores existente como la de Okabe Ito y aclarar y/o desaturar parcialmente algunos colores mientras oscurecemos otros.\nFila 2: tomar valores grises y emparejarlos con colores m√°s llamativos.\nFila 3: usar una escala existente, como alguna del proyecto ColorBrewer.\n\nEjemplo: destacamos la provincia de Santa Fe:",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>1</span>¬† <span class='chapter-title'>Teor√≠a de la Visualizaci√≥n</span>"
    ]
  },
  {
    "objectID": "capitulos/01_buenas_practicas_visualizacion.html",
    "href": "capitulos/01_buenas_practicas_visualizacion.html",
    "title": "2¬† Buenas Pr√°cticas para la Visualizaci√≥n de Datos",
    "section": "",
    "text": "2.1 Principio de la tinta proporcional",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Buenas Pr√°cticas para la Visualizaci√≥n de Datos</span>"
    ]
  },
  {
    "objectID": "capitulos/01_buenas_practicas_visualizacion.html#principio-de-la-tinta-proporcional",
    "href": "capitulos/01_buenas_practicas_visualizacion.html#principio-de-la-tinta-proporcional",
    "title": "2¬† Buenas Pr√°cticas para la Visualizaci√≥n de Datos",
    "section": "",
    "text": "En ciertos gr√°ficos, los valores representados se asocian a dos elementos distintos de la visualizaci√≥n empleada. Pensemos por ejemplo en un gr√°fico de barras: el valor que le corresponde a cada una se puede transmitir a trav√©s de la escala del eje Y (o del eje X, si usamos barras horizontales), pero tambi√©n se transmite visualmente mediante la longitud de la barra.\nEn estos casos, si elegimos iniciar el eje en un valor distinto de 0, la longitud de la barra puede no representar fielmente el valor que le corresponde, creando una inconsistencia en el mensaje transmitido.\nAnte esta situaci√≥n, ciertos autores proponen respetar el ‚Äúprincipio de la tinta proporcional‚Äù: las √°reas sombreadas en un gr√°fico deben ser proporcionales a los valores num√©ricos que representan.\n\n\n\nEn el panel A del gr√°fico de arriba, vemos que la altura de la barra correspondiente a CABA (7.97%) es consistente con la altura de la barra correspondiente a Santa Fe (11.3%). La raz√≥n entre las alturas de ambas barras, \\(7.97/11.3 = 0.7\\), coincide con la raz√≥n entre los valores num√©ricos que representan.\nEsto no ocurre con el gr√°fico del panel B. En este caso, la raz√≥n entre las alturas de las barras resulta (\\(0.97/4.3 = 0.22\\)), muy lejano del 70% correcto. Al modificar el punto inicial del eje, podemos hacer que la diferencia percibida entre individuos se exagere considerablemente.\nEn consecuencia, el gr√°fico del panel B no cumple con el principio de tinta proporcional. La moraleja de esta historia es que los gr√°ficos de barra deben comenzar su escala en el valor 0.\nAlgo similar ocurre con los gr√°ficos para series de tiempo, sobre todo si elegimos sombrear el √°rea bajo la l√≠nea. Debajo vemos la evoluci√≥n de la cantidad de nacimientos registrados en la Maternidad Martin de Rosario, entre enero de 2015 y diciembre de 2018 (datos descargados del Portal de Datos Abiertos de la Municipalidad de Rosario):\n\n\n\nUna vez m√°s, vemos que los cambios entre per√≠odos adyacentes se exageran cuando recortamos la escala del eje Y. Si bien hubo una baja pronunciada de nacimientos entre julio y agosto de 2017 (bajaron de 365 a 262, m√°s del 28%), esta diferencia se percibe mucho mayor en el gr√°fico B que en el gr√°fico A.\n\n\n2.1.1 Tinta proporcional usando √°reas\n\nEn los ejemplos anteriores, vimos c√≥mo respetar este principio mediante alturas de barras o l√≠neas, es decir, cuando la dimensi√≥n a considerar es una sola.\nAhora veremos casos donde los valores representados comprenden 2 dimensiones. En particular, analizaremos 2 tipos de gr√°ficos: el de sectores circulares (torta) y el de √°reas rectangulares (treemap).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEn estos dos ejemplos se verifica el principio de tinta proporcional: el √°rea ocupada por cada regi√≥n (ya sean porciones de c√≠rculo o rect√°ngulos) con respecto al √°rea total del gr√°fico, resulta proporcional a su valor correspondiente.\nPor ejemplo, teniendo en cuenta que el 58% de la poblaci√≥n que vive en la regi√≥n pampeana lo hace en la provincia de Buenos Aires, sabemos que el 58% del √°rea del c√≠rculo corresponde a Buenos Aires (√°ngulo de \\(0.58\\times360¬∫ = 211¬∫\\)) y tambi√©n que el rect√°ngulo rojo ocupa un 58% del √°rea total del gr√°fico treemap.\nEn ambos casos, al no haber un origen de eje desde el cual comenzar a contar, el principio de tinta proporcional es ‚Äúdif√≠cil‚Äù de incumplir.\nPara concluir, mencionamos que los gr√°ficos que utilizan el recurso del √°rea para comparar magnitudes tienden a achicar visualmente las diferencias entre individuos, en comparaci√≥n a lo que ocurre en un gr√°fico de barras, donde estas diferencias se magnifican.\nVeamos una vez m√°s los datos de poblaci√≥n para provincias pampeanas, pero a trav√©s de un gr√°fico de barras verticales: la proporci√≥n correspondiente a Buenos Aires parece mucho mayor que el 58%:",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Buenas Pr√°cticas para la Visualizaci√≥n de Datos</span>"
    ]
  },
  {
    "objectID": "capitulos/01_buenas_practicas_visualizacion.html#puntos-superpuestos",
    "href": "capitulos/01_buenas_practicas_visualizacion.html#puntos-superpuestos",
    "title": "2¬† Buenas Pr√°cticas para la Visualizaci√≥n de Datos",
    "section": "2.2 Puntos superpuestos",
    "text": "2.2 Puntos superpuestos\n\nCuando queremos armar un diagrama de dispersi√≥n a partir de un conjunto de datos muy extenso, usualmente nos encontramos con el problema de la superposici√≥n de puntos: muchas observaciones con valores similares que se ‚Äúpisan‚Äù unas a otras en el gr√°fico resultante, ocultando informaci√≥n valiosa.\nAlgo similar suele ocurrir si trabajamos con variables discretas, o cuyos valores hayan sido redondeados: en estos casos, a√∫n con un conjunto de datos peque√±o, es com√∫n encontrar perfiles id√©nticos de respuesta que se superponen en un diagrama de dispersi√≥n.\nEjemplo: partos en Rosario durante 2015/2018:\n\n\n\n\n\n\n\n\n\n\n\nA continuaci√≥n veremos algunas maneras de remediar, al menos parcialmente, este problema.\n\n\n2.2.1 Transparencia + Perturbaci√≥n\n\nLa m√°s com√∫n de las propuestas consiste en utilizar puntos con cierto nivel de transparencia para representar a cada observaci√≥n. En el c√≥digo de ggplot2 se la define mediante el par√°metro alpha, el cual puede tomar valores desde 0 (totalmente transparente, es decir, no se ve el punto) hasta 1 (color s√≥lido, el valor por defecto).\nDe todas maneras, graficar 10 puntos transparentes uno encima de otro no cambia nada: vamos a seguir perdiendo informaci√≥n a la hora de visualizar los datos. Por esto es que se agrega una perturbaci√≥n aleatoria (jitter en ingl√©s) que modifica levemente la posici√≥n original de cada punto.\nEjemplo: puntos originales (azul) y puntos nuevos (rojo) luego de aplicar una perturbaci√≥n de a lo sumo 0.25 unidades en cualquier direcci√≥n (horizontal y/o vertical).\n\n\n\n\n\n\n\n\n\n\n\nRetomando el ejemplo de los partos, aplicamos una transparencia de 0.25 y un nivel de perturbaci√≥n de 1 unidad en el sentido del eje X (es decir, sumamos o restamos 1 semana de gestaci√≥n al valor real):\n\n\n\n\n\n\n\n\n\n\n\nLa apariencia de este gr√°fico de dispersi√≥n es muy diferente en comparaci√≥n al que obtuvimos originalmente. Si bien el patr√≥n general se mantiene, ahora se aprecia un volumen mucho mayor de datos en la secci√≥n central del gr√°fico (recordemos que estamos analizando m√°s de 20.000 partos; en el gr√°fico original, se pueden apreciar a simple vista aproximadamente entre 350 y 600 puntos diferentes, dependiendo de la agudeza visual para distinguir diferencias en el sentido vertical).\nEl nivel de perturbaci√≥n aleatoria que se aplica debe ser lo suficientemente alto como para permitir la separaci√≥n de puntos, pero al mismo tiempo no ser tan elevado como para ‚Äúdesacomodar‚Äù la verdadera relaci√≥n entre variables.\nAclaraci√≥n: al ser aleatoria, la perturbaci√≥n aplicada genera diferentes versiones del mismo gr√°fico cada vez que se la vuelve a utilizar. Para replicar los resultados, debemos usar una semilla aleatoria espec√≠fica mediante set.seed().\n\n\n\n2.2.2 Hex√°gonos\n\nEstos gr√°ficos, tambi√©n conocidos como ‚Äúhistogramas 2D‚Äù, tratan de solucionar el problema de la superposici√≥n agrupando observaciones con valores similares en ambas dimensiones.\nSe divide al plano en m√∫ltiples hex√°gonos regulares de 6 lados, y luego se cuenta la cantidad de observaciones que existen dentro de cada hex√°gono. A cada uno se le asigna un color de acuerdo al volumen de datos que encierra:\n\n\n\n\n\n\n\n\n\n\n\nLa ventaja de este m√©todo es que no necesitamos modificar aleatoriamente los datos originales, como ocurre con el caso del jittering; de todas maneras, al agrupar (categorizar) observaciones continuas estamos perdiendo informaci√≥n.\nEn general se lo aplica cuando la soluci√≥n del jittering no es suficiente, es decir, cuando seguimos viendo ‚Äúmanchas‚Äù de puntos que no se distinguen unos de otros. En estos gr√°ficos no existe superposici√≥n, ya que cada hex√°gono posee su lugar correspondiente.\n\n\n\n2.2.3 Gr√°ficos de contorno\n\nUna √∫ltima alternativa consiste en crear gr√°ficos de contornos, en los cuales se realiza una estimaci√≥n de la funci√≥n de densidad bivariada definida por las variables X e Y. √Åreas del plano con igual nivel de densidad estimada se diferencian mediante l√≠neas de contorno, las cuales pueden estar coloreadas usando una paleta secuencial.\nNo todos los conjuntos de datos son adecuados para este tipo de gr√°ficos: para poder apreciarlos mejor, la densidad estimada debe crecer o decrecer lentamente en ambas direcciones.\nVeamos c√≥mo resulta el gr√°fico de contornos para el ejemplo de semanas de gestaci√≥n vs peso del beb√©:\n\n\n\n\n\n\n\n\n\n\n\nCon la escala utilizada, √°reas de colores ‚Äúfuertes‚Äù (amarillo, verde) se asocian a densidades m√°s elevadas, mientras que las tonalidades azules y violeta corresponden a sectores del plano con menor densidad de puntos.\nUn conjunto de datos con caracter√≠sticas que se aprovechan bien para un gr√°fico de contornos es volcano de R Base. Este dataset posee informaci√≥n topogr√°fica sobre el volc√°n Maungawhau ubicado en Nueva Zelanda.\nLas l√≠neas de contorno dan una idea del relieve del volc√°n; en vez de marcar densidad, ahora utilizamos esta herramienta para delimitar zonas con diferentes alturas sobre el nivel del mar:",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Buenas Pr√°cticas para la Visualizaci√≥n de Datos</span>"
    ]
  },
  {
    "objectID": "capitulos/01_buenas_practicas_visualizacion.html#colores",
    "href": "capitulos/01_buenas_practicas_visualizacion.html#colores",
    "title": "2¬† Buenas Pr√°cticas para la Visualizaci√≥n de Datos",
    "section": "2.3 Colores",
    "text": "2.3 Colores\n\nSi est√°n bien utilizados, los colores pueden ser herramientas muy efectivas a la hora de mejorar visualizaciones de datos. Al mismo tiempo, una mala elecci√≥n de colores puede arruinar completamente un gr√°fico.\nSea cual sea la paleta de colores que se use, el esquema elegido debe transmitir un mensaje claro, poseer un objetivo espec√≠fico y no distraer.\nA continuaci√≥n vamos a ver algunos casos de gr√°ficos donde el color est√° mal empleado.\n\n\n2.3.1 Muchos colores\n\nUn error com√∫n consiste en usar demasiados colores, como en el gr√°fico que se muestra a continuaci√≥n. Dado que cada observaci√≥n (en este caso, provincias argentinas) posee su propia tonalidad, la cantidad total de colores es muy elevada.\nEl trabajo de asociar a cada color con su respectiva provincia es un proceso que requiere de mucha atenci√≥n, lleva tiempo y es f√°cil caer en equivocaciones (provincias con colores similares son pr√°cticamente indistinguibles).\n\n\n\n\n\n\n\n\n\n\n\nLos colores deben ser usados para mejorar gr√°ficos y hacerlos de lectura m√°s f√°cil, no para crear ‚Äúacertijos visuales‚Äù donde el mensaje que se transmite termina siendo confuso.\nComo alternativas al gr√°fico anterior, mostramos dos posibilidades: una donde el color se asocia a otra variable cualitativa, y uno donde se reemplaza el color por etiquetas que brindan la informaci√≥n deseada:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEn general, el uso de colores para distinguir entre categor√≠as se recomienda cuando existen pocos grupos a graficar. Por ejemplo, las funciones de R que implementan las paletas creadas por Cynthia Brewer (paquete RColorBrewer) devuelven un mensaje de advertencia si usamos m√°s de 9 colores.\n\n\n\n2.3.2 Colores innecesarios\n\nA veces, quienes generan gr√°ficos sufren del s√≠ndrome de ‚ÄúArt Attack‚Äù y agregan detalles y colores que no suman al mensaje, sino m√°s bien que distraen. El gr√°fico de abajo es un claro ejemplo de ello:\n\n\n\n\n\n\n\n\n\n\n\nEn esta visualizaci√≥n, la paleta de colores no aporta informaci√≥n ni ayuda a entender mejor el mensaje transmitido; s√≥lo se usa para darle un toque colorido al gr√°fico. Si bien esto no es un problema grave en s√≠ mismo, podemos aprovechar el color de maneras m√°s eficientes, por ejemplo para distinguir entre regiones geogr√°ficas (como vimos anteriormente) o bien usando una escala secuencial que refuerce la idea de diferencias num√©ricas entre provincias.\n\n\n\n2.3.3 Escalas confusas\n\nCuando queremos emplear una gama de colores para recrear valores num√©ricos, es necesario definir paletas que tengan incrementos mon√≥tonos entre tonalidades. En general se eligen paletas de un solo color (por ej. verde claro a verde oscuro) o bien grupos de colores de una familia cercana (amarillos, naranjas, rojos).\nCuando esto no se cumple, las visualizaciones resultantes son confusas. Veamos un ejemplo usando la paleta arco√≠ris (rainbow), muy popular en R, pero poco √∫til en la pr√°ctica:\n\n\n\n\n\n\n\n\n\n\n\nEsta escala es circular: los colores ubicados en los extremos (rojo y rosa fuerte) son similares, lo cual resulta confuso ya que est√°n asociados a valores num√©ricos muy diferentes entre s√≠. Adem√°s, hay regiones de cambios r√°pidos (ej.: de amarillo a verde) y otras de cambios lentos (ej.: azules), lo cual hace que cantidades equidistantes entre s√≠ pueden estar representadas por colores muy parecidos o muy distintos, dependiendo de la zona del eje en que se ubiquen.\nPor todos estos motivos, las escalas de colores empleadas para representar valores num√©ricos deben ser mon√≥tonas y secuenciales. Por ejemplo:\n\n\n\n\n\n\n\n\n\n\n\nUn problema similar al anterior ocurre si usamos colores muy parecidos para representar categor√≠as:\n\n\n\n\n\n\n\n\n\n\n\nEn este caso, no s√≥lo hay dificultades porque las tonalidades son similares entre s√≠, sino que tambi√©n tenemos una superposici√≥n de puntos entre las especies versicolor y virginica. Asignar tonalidades que se distingan unas de otras ayuda a separar visualmente ambas categor√≠as:\n\n\n\n\n\n\n\n\n\n\n\n\n2.3.4 Paletas para personas dalt√≥nicas\n\nSi bien no existen estudios concluyentes al respecto, se estima que a nivel mundial, aproximadamente entre un 5% y 10% de los varones poseen alg√∫n grado de daltonismo, mientras que entre las mujeres la prevalencia se reduce a menos del 1%. El tipo de daltonismo m√°s com√∫n consiste en la incapacidad de distinguir correctamente las tonalidades rojas de las verdes, aunque hay personas con daltonismo asociado a otros colores (azul y verde, etc.).\nTeniendo en cuenta esto, hay paletas creadas espec√≠ficamente para que personas con daltonismo puedan distinguir f√°cilmente los colores empleados. Un ejemplo es la paleta de Okabe-Ito:\n\n\n\n\n\n\n\n\n\n\n\nComo alternativa, tenemos la paleta PiYG de Brewer (llamada original abajo). A su lado vemos c√≥mo la visualizar√≠an personas con diferentes tipos de daltonismo; todas las versiones siguen siendo f√°cilmente distinguibles:\n\n\n\n\n\n\n\n\n\n\nFuente: Fundamentals of Data Visualization - Claus Wilke\n\n\n\n\n\n\n\nSi usamos otras paletas, lo anterior puede no ocurrir y la diferencia entre cada grupo queda oculta para la persona con daltonismo:\n\n\n\n\n\n\n\n\n\n\nFuente: Fundamentals of Data Visualization - Claus Wilke\n\n\n\n\n\n\n\nPor lo tanto, si nuestros gr√°ficos van a ser consumidos por un p√∫blico extenso, es buena idea emplear paletas que tengan en cuenta estos detalles.\n\n\n\n2.3.5 Blanco y negro\n\nSiempre que el contexto lo permita, debemos tratar de evitar crear gr√°ficos en blanco y negro. Rellenar figuras (boxplots, barras, etc.) con alg√∫n color s√≥lido hace que estas se destaquen mejor contra el fondo del gr√°fico, permitiendo una interpretaci√≥n m√°s inmediata de las cantidades representadas y, de paso, convirtiendo la visualizaci√≥n en un objeto visualmente m√°s agradable.\nClaus Wilke argumenta que la costumbre de no usar colores proviene de los primeros software de visualizaci√≥n de datos, los cuales intentaban emular de manera precisa el aspecto de los gr√°ficos hechos a mano por los cient√≠ficos. En estos gr√°ficos los colores muchas veces brillaban por su ausencia, o bien eran usados para crear un patr√≥n de relleno no s√≥lido (a rayas, con puntos, etc.).\nPor otro lado, debemos tener en cuenta que durante mucho tiempo la comunicaci√≥n de la ciencia se hizo casi exclusivamente en formato papel, y todos sabemos que imprimir a color es siempre m√°s costoso que hacerlo en blanco y negro. Hoy en d√≠a, donde la gran mayor√≠a de los gr√°ficos existen de manera digital, no hay justificaci√≥n para evitar el uso de colores, m√°s all√° de un criterio minimalista que puede ser empleado por razones puramente est√©ticas.\nA continuaci√≥n vamos a ver algunos ejemplos de gr√°ficos sin color y sus potenciales problemas.\nGr√°fico de barras: las barras blancas sobre fondo blanco pueden llegar a crear una ilusi√≥n √≥ptica que perjudica la c√≥moda visualizaci√≥n del gr√°fico:\n\n\n\n\n\n\n\n\n\n\n\nDensidades: la superposici√≥n de las curvas y la necesidad de diferenciar grupos hacen necesaria la presencia de colores. Si tenemos que limitarnos al blanco y negro, debemos recurrir a est√©ticas no muy efectivas (como tipo de l√≠nea) para identificar a cada grupo. Algo similar ocurre con los gr√°ficos de dispersi√≥n: si no podemos asociar categor√≠as con colores, deberemos conformarnos con usar diferentes formas para cada una.",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Buenas Pr√°cticas para la Visualizaci√≥n de Datos</span>"
    ]
  },
  {
    "objectID": "capitulos/01_buenas_practicas_visualizacion.html#leyendas",
    "href": "capitulos/01_buenas_practicas_visualizacion.html#leyendas",
    "title": "2¬† Buenas Pr√°cticas para la Visualizaci√≥n de Datos",
    "section": "2.4 Leyendas",
    "text": "2.4 Leyendas\n\nSiempre que en nuestros gr√°ficos tengamos est√©ticas asociadas a colores, formas, tama√±os o tipos de l√≠nea, necesitamos incluir leyendas (o escalas) que aclaren c√≥mo esa est√©tica se relaciona con la variable que representa.\nA continuaci√≥n vemos un gr√°fico que muestra la evoluci√≥n del PBI en 4 pa√≠ses diferentes. Los datos fueron extra√≠dos del paquete gapminder:\n\n\n\n\n\n\n\n\n\n\n\n¬øEst√°n de acuerdo con el orden alfab√©tico presente en la leyenda de arriba? ¬øPodr√≠a mejorarse de alguna manera este gr√°fico, haciendo que sea m√°s f√°cil de entender?\nEn casos donde hay un orden distinguible entre los valores representados, y la variable categ√≥rica asociada es nominal (sin orden intr√≠nseco), se recomienda reordenar los niveles de la leyenda de manera que coincidan con el orden num√©rico. De esta manera, la relaci√≥n que nuestro cerebro aplica para asociar colores con categor√≠as es mucho m√°s inmediata y natural:\n\n\n\n\n\n\n\n\n\n\n\nPor otro lado, las leyendas deben respetar el orden de las variables categ√≥ricas ordinales:\n\n\n\n\n\n\n\n\n\n\n\nMuchas veces las leyendas pueden ser reemplazadas por textos o anotaciones que se ubican dentro del gr√°fico. Esto puede deberse a cuestiones de espacio (en general las leyendas ocupan mucho lugar y es necesario achicar el tama√±o destinado al gr√°fico en s√≠ mismo), de est√©tica o bien para remarcar ciertas diferencias entre grupos de observaciones.\nEjemplo para la evoluci√≥n del PBI:",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Buenas Pr√°cticas para la Visualizaci√≥n de Datos</span>"
    ]
  },
  {
    "objectID": "capitulos/01_buenas_practicas_visualizacion.html#paneles",
    "href": "capitulos/01_buenas_practicas_visualizacion.html#paneles",
    "title": "2¬† Buenas Pr√°cticas para la Visualizaci√≥n de Datos",
    "section": "2.5 Paneles",
    "text": "2.5 Paneles\n\nCuando los conjuntos de datos que estamos analizando contienen un gran volumen de informaci√≥n, tratar de visualizar muchos aspectos en unos pocos gr√°ficos puede ser contraproducente. En general, las visualizaciones resultantes est√°n muy cargadas de informaci√≥n y son complejas de interpretar.\nPara evitar este inconveniente podemos usar paneles que repliquen los gr√°ficos construidos en distintos subgrupos de la poblaci√≥n, o bien que estructuren de forma ordenada los an√°lisis exploratorios llevados a cabo sobre cada variable.\n\n\n2.5.1 Subgrupos\n\nSea cual sea el gr√°fico elegido para representar las variables de nuestro conjunto de datos, muchas veces resulta interesante ver c√≥mo las relaciones entre estas variables dependen (o no) de diferentes subgrupos de la poblaci√≥n que estamos estudiando.\nSi la cantidad de subgrupos es moderadamente elevada, incluir todas las comparaciones en un solo lugar puede ser una mala idea. Los paneles nos ayudan a emprolijar y hacer m√°s entendibles nuestros gr√°ficos, replicando los an√°lisis y ubic√°ndolos en una grilla.\nVeamos un ejemplo donde creamos diagramas de dispersi√≥n para las variables PBI per c√°pita y esperanza de vida de varios pa√≠ses, con un ajuste LOESS para cada a√±o por separado. Este tipo de gr√°fico ser√≠a pr√°cticamente imposible de armar en una figura que no use paneles (tambi√©n llamados trellis plots o faceting en la literatura):\n\n\n\n\n\n\n\n\n\n\n\nEjemplos comunes de faceting tambi√©n se dan con histogramas, curvas de densidad, boxplots, gr√°ficos de barra, etc. A continuaci√≥n vemos boxplots de peso del reci√©n nacido para subgrupos de la poblaci√≥n conformados por el cruce entre 2 variables: tipo de parto (columnas) y semanas de gestaci√≥n (filas):\n\n\n\n\n\n\n\n\n\n\n\nSi bien podr√≠amos haber armado un √∫nico gr√°fico con 9 cajas, una por cada subgrupo, la ubicaci√≥n espacial en una grilla como la de arriba facilita la interpretaci√≥n de los resultados.\nLo importante en este tipo de visualizaciones es mantener constante las escalas de los ejes a lo largo de todos los paneles. Adaptar los l√≠mites a cada subgrupo en particular es totalmente enga√±oso, y debe ser evitado a toda costa.\nTambi√©n es importante que la ubicaci√≥n de los gr√°ficos en la grilla conserve un orden l√≥gico. En el primer caso analizado, los a√±os se suceden en orden ascendente de izquierda a derecha y de arriba hacia abajo. Si bien existen otras maneras de ordenarlos, estamos acostumbrados a que el panel de arriba a la izquierda sea el primero y el de abajo a la derecha, el √∫ltimo en nuestra recorrida visual. Lo mismo aplica para variables categ√≥ricas ordinales, como en el caso de la variable edad_gestacional del dataset de partos.\n\n\n\n2.5.2 Paneles para m√∫ltiples visualizaciones\n\nEl otro uso de los paneles consiste en ver muchos gr√°ficos distintos, independientes entre s√≠, en un solo lugar. En estos casos es vital que los colores, tama√±os y apariencia general sean homog√©neas, para que ning√∫n panel en particular se robe la atenci√≥n. Si asignamos ciertos colores a determinados subgrupos de la poblaci√≥n, debemos mantener ese mapeo a lo largo de todos los gr√°ficos presentados.\nEjemplo: boxplots para peso del reci√©n nacido y evoluci√≥n temporal de la cantidad de partos, seg√∫n sexo del beb√©:\n\n\n\n\n\n\n\n\n\n\n\nEl gr√°fico de arriba tiene varios problemas: las est√©ticas no son compatibles (uno usa un fondo gris con marcas de eje azules, mientras que el otro posee un fondo blanco con letras negras); adem√°s, los colores asignados a cada nivel no se mantienen constantes y pueden llegar a confundir al p√∫blico, los tama√±os no son uniformes, etc.\nDebajo vemos una versi√≥n mejorada:\n\n\n\n\n\n\n\n\n\n\n\nCuando la cantidad de informaci√≥n visualizada es abundante, resulta importante aclarar bien qu√© variable(s) estamos viendo en cada panel. En este sentido, el paquete GGally es de gran utilidad, a trav√©s de su funci√≥n ggpairs():",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Buenas Pr√°cticas para la Visualizaci√≥n de Datos</span>"
    ]
  },
  {
    "objectID": "capitulos/01_buenas_practicas_visualizacion.html#grillas",
    "href": "capitulos/01_buenas_practicas_visualizacion.html#grillas",
    "title": "2¬† Buenas Pr√°cticas para la Visualizaci√≥n de Datos",
    "section": "2.6 Grillas",
    "text": "2.6 Grillas\n\nLlamamos grillas a las rectas perpendiculares a los ejes que se dibujan en el fondo del gr√°fico para facilitar la interpretaci√≥n del mismo, espec√≠ficamente, a la hora de comparar valores entre diferentes observaciones o grupos representados.\nSi bien constituyen un elemento muy importante de varios tipos de gr√°ficos, muchas veces no son empleadas debidamente, o ni siquiera se las incluye. A continuaci√≥n veremos algunos ejemplos de buenos y malos usos de grillas.\nRetomando el ejemplo de evoluci√≥n del PBI per c√°pita para ciertos pa√≠ses, veamos 4 maneras diferentes de aplicar grillas:\n\n\n\n\n\n\n\n\n\n\n\nAnalicemos este gr√°fico:\n\nPanel (a): no se incluye grilla. Comparar valores se hace visualmente dificultoso. El gr√°fico en s√≠ mismo no es ‚Äúincorrecto‚Äù, pero se puede mejorar.\nPanel (b): se incluye grilla, pero es demasiado llamativa y opaca los datos de inter√©s. El grosor y la tonalidad de la grilla no deben competir con los usados para los elementos principales del gr√°fico.\nPanel (c): esta es la opci√≥n preferida. Se incluye una grilla en tono gris claro que facilita la interpretaci√≥n de los valores mostrados en el gr√°fico, sin crear una distracci√≥n como en el panel (b).\nPanel (d): si bien los colores de la grilla son v√°lidos, el problema en este caso es la cantidad innecesaria de l√≠neas utilizadas. Usar una grilla demasiado densa tambi√©n distrae y puede llegar a ocultar el mensaje principal del gr√°fico.\n\n\n\n\n\nUn caso especial del uso de grillas se da cuando existe un valor ‚Äúbase‚Äù o ‚Äúneutro‚Äù que sirve de punto de comparaci√≥n para los valores representados en el gr√°fico.\nPor ejemplo, veamos el cambio porcentual en el PBI de Argentina para el per√≠odo 1957-2007. Es natural tratar de ver si entre una medici√≥n y la siguiente, el PBI subi√≥ (variaci√≥n mayor a 0) o baj√≥ (menor a 0). Adem√°s de trazar la grilla original, se dibuja una l√≠nea recta horizontal que corta el eje Y a la altura del 0, reforzando su ubicaci√≥n y permitiendo una interpretaci√≥n m√°s directa del gr√°fico.\n\n\n\n\n\n\n\n\n\n\n\nAlgo similar hacemos cuando, en un diagrama de dispersi√≥n, se espera que ambas variables sean iguales: en vez de trazar una recta perpendicular a alguno de los ejes, dibujando la recta identidad que demarca la relaci√≥n \\(x=y\\). Uno de los ejemplos m√°s comunes de esto son los gr√°ficos de cuantiles (q-q plots).",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Buenas Pr√°cticas para la Visualizaci√≥n de Datos</span>"
    ]
  },
  {
    "objectID": "capitulos/01_buenas_practicas_visualizacion.html#d",
    "href": "capitulos/01_buenas_practicas_visualizacion.html#d",
    "title": "2¬† Buenas Pr√°cticas para la Visualizaci√≥n de Datos",
    "section": "2.7 3D",
    "text": "2.7 3D\n\nUno de los peores males que aquejan el mundo de la visualizaci√≥n de datos, junto con los gr√°ficos de torta, son los gr√°ficos 3D de datos originalmente 2D.\nExcel es una herramienta que permite hacer este tipo de monstruosidad de manera relativamente sencilla, y su uso se ha extendido de tal manera que hoy en d√≠a es muy com√∫n ver gr√°ficos 3D en contextos supuestamente serios (finanzas, academia, etc.).\nLas cr√≠ticas hacia el uso de efectos 3D son muchas y est√°n bien fundamentadas. Veamos las principales:\n\nNo aportan nada nuevo. Un gr√°fico de torta o barras 3D muestra exactamente la misma informaci√≥n que su versi√≥n original en 2D. Su uso es puramente ‚Äúest√©tico‚Äù.\nLa mayor√≠a de las veces enga√±an y confunden. El uso de estos efectos distorsiona las cantidades reales representadas en el gr√°fico, y el mensaje final depende del √°ngulo elegido para la visualizaci√≥n.\n\n\n\n\n\nVeamos c√≥mo afecta el 3D a un gr√°fico de torta: a medida que rotamos el √°ngulo desde el cual vemos el gr√°fico, la porci√≥n m√°s peque√±a (25%) puede volverse artificialmente grande, enviando un mensaje contradictorio al espectador del gr√°fico.\n\n\n\n\n\n\n\n\n\n\nFuente: Fundamentals of Data Visualization - Claus Wilke\n\n\n\n\n\n\nSin embargo, lo peor est√° por venir: veamos ahora c√≥mo impacta el efecto 3D sobre un gr√°fico de barras.\nLa siguiente figura fue construida usando Excel. Los datos originales representan tres grupos con los siguientes valores: 10, 5 y 12 (panel de la izquierda). La versi√≥n por defecto que ofrece Excel cuando se elige un gr√°fico 3D para esos mismos datos se muestra en el panel derecho.\n\n\n\n\n\n\n\n\n\n\n\n¬øPor qu√© la altura de cada barra no coincide con su valor correspondiente? ¬øPor qu√© el software m√°s popular para almacenamiento de datos construye por defecto gr√°ficos literalmente err√≥neos? ¬øPor qu√©? No hay por qu√©.\nNo vamos a perder m√°s tiempo de clase mirando figuras con efetos 3D innecesarios. Consideramos que estos dos ejemplos deber√≠an ser suficientes para desmotivar a cualquier persona que est√© considerando el uso de este tipo de gr√°ficos.",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Buenas Pr√°cticas para la Visualizaci√≥n de Datos</span>"
    ]
  },
  {
    "objectID": "capitulos/01_buenas_practicas_visualizacion.html#comentarios-finales",
    "href": "capitulos/01_buenas_practicas_visualizacion.html#comentarios-finales",
    "title": "2¬† Buenas Pr√°cticas para la Visualizaci√≥n de Datos",
    "section": "2.8 Comentarios finales",
    "text": "2.8 Comentarios finales\n\nExisten much√≠simos otros detalles de un gr√°fico que pueden salir mal, pero dedicarle a cada uno su propia secci√≥n nos llevar√≠a demasiado tiempo. A continuaci√≥n vamos a mencionar 2 de los m√°s importantes:\n\n\n2.8.1 Contexto\n\nTodo gr√°fico debe estar bien contextualizado. Esto implica que debemos asegurarnos de incluir un t√≠tulo general, t√≠tulos de los ejes y leyendas, escalas utilizadas, unidades de medida de las variables representadas, etc. De ser necesario, tambi√©n debemos indicar el per√≠odo temporal analizado, las fuentes de informaci√≥n, y cualquier otro detalle importante que ayude a contextualizar mejor el mensaje que queremos transmitir.\nEste √∫ltimo consejo se vuelve mucho m√°s importante cuando la figura se publica de manera independiente o solitaria: no es lo mismo contextualizar un gr√°fico incluido en el anexo de una tesis, donde las caracter√≠sticas de los datos ya han sido descritas detalladamente, que hacerlo cuando el medio de comunicaci√≥n empleado es alguna red social.\n\n\n\n2.8.2 Tama√±o\n\nCuando creamos una visualizaci√≥n debemos cuidar que el tama√±o de los textos, puntos, barras o formas utilizadas sean legibles y tambi√©n uniformes. Puede ser confuso (y hasta molesto) analizar un gr√°fico donde la etiqueta del eje X est√° escrita en un tama√±o de fuente mayor que el t√≠tulo principal, o bien cuando diferentes ejes poseen diferentes tama√±os de texto.\nCon respecto al tama√±o elegido, debemos pensar en qu√© lugar o por qu√© medio se publicar√°n los gr√°ficos que estamos construyendo: ¬øel p√∫blico acceder√° a estos gr√°ficos a trav√©s de un medio digital (PC, celular, etc.) en el cual es posible hacer zoom, o el resultado final se ver√° impreso en papel?\nSi el gr√°fico es est√°tico, es muy importante chequear que el tama√±o de letra empleado se traslade bien al papel o documento de salida; caso contrario el gr√°fico ser√° ininteligible y el mensaje se pierde. Con respecto a esto, debemos tener en cuenta que el tama√±o de las letras de un gr√°fico como se ven en RStudio no necesariamente va a coincidir con el tama√±o de las letras luego de la exportaci√≥n de la imagen.",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>2</span>¬† <span class='chapter-title'>Buenas Pr√°cticas para la Visualizaci√≥n de Datos</span>"
    ]
  },
  {
    "objectID": "capitulos/01_introduccion_a_ggplot2.html",
    "href": "capitulos/01_introduccion_a_ggplot2.html",
    "title": "3¬† Introducci√≥n a ggplot2",
    "section": "",
    "text": "3.1 Introducci√≥n\nlibrary(ggplot2)\nmsleep\n\n# A tibble: 83 √ó 11\n   name   genus vore  order conservation sleep_total sleep_rem sleep_cycle awake\n   &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 Cheet‚Ä¶ Acin‚Ä¶ carni Carn‚Ä¶ lc                  12.1      NA        NA      11.9\n 2 Owl m‚Ä¶ Aotus omni  Prim‚Ä¶ &lt;NA&gt;                17         1.8      NA       7  \n 3 Mount‚Ä¶ Aplo‚Ä¶ herbi Rode‚Ä¶ nt                  14.4       2.4      NA       9.6\n 4 Great‚Ä¶ Blar‚Ä¶ omni  Sori‚Ä¶ lc                  14.9       2.3       0.133   9.1\n 5 Cow    Bos   herbi Arti‚Ä¶ domesticated         4         0.7       0.667  20  \n 6 Three‚Ä¶ Brad‚Ä¶ herbi Pilo‚Ä¶ &lt;NA&gt;                14.4       2.2       0.767   9.6\n 7 North‚Ä¶ Call‚Ä¶ carni Carn‚Ä¶ vu                   8.7       1.4       0.383  15.3\n 8 Vespe‚Ä¶ Calo‚Ä¶ &lt;NA&gt;  Rode‚Ä¶ &lt;NA&gt;                 7        NA        NA      17  \n 9 Dog    Canis carni Carn‚Ä¶ domesticated        10.1       2.9       0.333  13.9\n10 Roe d‚Ä¶ Capr‚Ä¶ herbi Arti‚Ä¶ lc                   3        NA        NA      21  \n# ‚Ñπ 73 more rows\n# ‚Ñπ 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt;",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introducci√≥n a `ggplot2`</span>"
    ]
  },
  {
    "objectID": "capitulos/01_introduccion_a_ggplot2.html#introducci√≥n",
    "href": "capitulos/01_introduccion_a_ggplot2.html#introducci√≥n",
    "title": "3¬† Introducci√≥n a ggplot2",
    "section": "",
    "text": "En R existen tres sistemas para realizar gr√°ficos: base, lattice y ggplot2.\n\nSistema base: viene con la instalaci√≥n b√°sica de R y es el m√°s limitado en cuanto a su potencial. Permite crear gr√°ficos simples, de manera r√°pida y sencilla, lo cual resulta muy √∫til para an√°lisis exploratorios que no requieran de mucha complejidad.\nSistema lattice: est√° implementado en el paquete hom√≥nimo, el cual tambi√©n viene con la instalaci√≥n b√°sica de R. Este sistema a√±ade mucha m√°s flexibilidad, pero su sintaxis es poco intuitiva y no muy clara. Si bien tuvo su pico de popularidad hace algunos a√±os, cuando era la √∫nica alternativa al sistema base, hoy en d√≠a lattice ha quedado algo obsoleto.\nSistema ggplot2: ofrece la posibilidad de generar figuras de alta calidad y sumamente flexibles, bas√°ndose en desarrollos te√≥ricos del campo de la visualizaci√≥n. Forma parte del tidyverse, un conjunto de paquetes de R que han revolucionado la programaci√≥n orientada a ciencia de datos.\n\nDebajo vemos diagramas de dispersi√≥n b√°sicos realizados con los tres sistemas nombrados (de izquierda a derecha: base, lattice y ggplot2). Todos los gr√°ficos poseen el mismo tama√±o; notemos c√≥mo ggplot2 hace un uso casi total del √°rea disponible, mientras que el sistema base posee por defecto m√°rgenes muy extensos:\n\n\n\nA lo largo de este material vamos a usar un conjunto de datos que ofrece ggplot2 llamado msleep, el cual presenta datos sobre caracter√≠sticas del sue√±o de 83 especies de mam√≠feros.\nEjecutando data(msleep) cargamos estos datos en nuestro ambiente de trabajo:",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introducci√≥n a `ggplot2`</span>"
    ]
  },
  {
    "objectID": "capitulos/01_introduccion_a_ggplot2.html#el-sistema-ggplot2",
    "href": "capitulos/01_introduccion_a_ggplot2.html#el-sistema-ggplot2",
    "title": "3¬† Introducci√≥n a ggplot2",
    "section": "3.2 El sistema ggplot2",
    "text": "3.2 El sistema ggplot2\n\n\n\n\n\n\n\n\n\n\ngg viene de Grammar of Graphics (gram√°tica de gr√°ficos), un libro escrito por Leland Wilkinson en 1999, donde hace un desarrollo te√≥rico para la construcci√≥n de gr√°ficos.\n\n\n\n\n\n\n\n\n\n\n\nAs√≠ como la gram√°tica de un lenguaje estudia la estructura de las palabras, la manera en que estas se combinan y las reglas que hay que seguir para formar oraciones, la gram√°tica de gr√°ficos de Wilkinson provee un sistema para combinar elementos gr√°ficos que dan como resultado figuras visualmente significativas.\nEste sistema se convirti√≥ en la inspiraci√≥n de muchas aplicaciones gr√°ficas populares, como Polaris de Tableau, Vega-Lite, plotnine de Python, etc.\nHadley Wickham (CEO de RStudio) fue uno de los primeros en implementar este sistema en un lenguaje de computaci√≥n, con algunas variantes, cuando cre√≥ el paquete de R ggplot2.\nLa idea fundamental es pensar a un gr√°fico como una superposici√≥n de elementos que lo componen, llamadas capas o layers:\n\n\n\n\n\n\n\n\n\n\n\nDatos (data): es el dataset que queremos representar. Debe estar almacenado en formato ordenado (tidy), es decir, con un individuo por fila y una variable por columna.\nMapeo est√©tico (aesthetic mapping): describe c√≥mo las variables en el dataset se vinculan con las est√©ticas (caracter√≠sticas visuales) de un gr√°fico. Por ejemplo, esta capa nos permite definir cu√°l es la variable que va en la est√©tica de posici√≥n del eje horizontal, cu√°l en la posici√≥n del eje vertical, si se utilizar√° alguna est√©tica de color, forma, tama√±o, etc. El mapeo est√©tico logra que todas las capas del gr√°fico queden interrelacionadas.\nGeometr√≠as (geometries, geoms): definen la manera en que los datos se representan en el gr√°fico: a trav√©s de puntos, l√≠neas, barras, etc. Determinan el aspecto principal del gr√°fico.\nEscalas (scales): controlan los detalles de la asociaci√≥n biun√≠voca establecida entre los datos y la est√©tica en cuesti√≥n. Usamos estas capas si queremos cambiar las configuraciones por default, por ejemplo, los l√≠mites de los ejes en las est√©ticas de posici√≥n, los colores asignados a cada grupo en una est√©tica de color, etc.\nEstad√≠sticas (stats): transforman las variables de entrada para mostrar estad√≠sticas resumen o resultados de m√©todos estad√≠sticos, por ejemplo, una recta ajustada.\nPaneles (facet): permite dividir el gr√°fico original en varios paneles distintos, uno para cada grupo posible definido por cierta variable categ√≥rica o discreta.\nCoordenadas (coordinates): determinan el sistema de coordenadas que emplea el gr√°fico para representar los datos. El default es el sistema de coordenadas cartesianas, requerido por la mayor√≠a de los gr√°ficos que utilizamos. Este conjunto de capas permite aplicar transformaciones (por ejemplo, usar escalas logar√≠tmicas), trasponer el sistema (intercambiar ejes X e Y), fijar la relaci√≥n de aspecto de las unidades en los ejes, etc., o directamente optar por otros sistemas de coordenadas como las polares.\nEstilos (themes): controlan el aspecto general del gr√°fico en cuestiones que no tienen que ver con los datos, por ejemplo, si queremos el t√≠tulo en negrita o el fondo blanco. Es decir, controla la parte est√©tica (en el sentido usual de la palabra) o lo que se conoce como ‚Äútinta libre de datos‚Äù (non-data ink).\n\n\n\n\n\n\n\nAplicaci√≥n\n\n\n\nA continuaci√≥n, construiremos paso a paso un diagrama de dispersi√≥n entre las variables cantidad total de horas de sue√±o (sleep_total) y la cantidad de horas de sue√±o en la fase REM (sleep_rem), presentes en el dataset sobre patrones de sue√±o de animales mam√≠feros.\n\n\n\n3.2.1 data, mapping & geom\n\nUn gr√°fico se inicia con la funci√≥n ggplot(), en la que se indica cu√°l es el conjunto de datos a emplear.\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = msleep)\n\n\n\n\n\n\n\n\n\nAl correr esto podemos apreciar en el panel de Gr√°ficos c√≥mo nuestro lienzo se prepara para que pintemos algo sobre √©l, pero todav√≠a no muestra nada. Es porque a√∫n nos falta se√±alar otras capas esenciales, por ejemplo, la del mapeo.\n\n\n\n\n\n\n\n\n\n\n\nDado que queremos hacer un diagrama de dispersi√≥n de sleep_total vs sleep_rem, vamos a mapear la variable sleep_rem al elemento de mapeo \\(x\\) y la variable sleep_total al elemento de mapeo \\(y\\).\nEsto se hace sumando una capa al c√≥digo inicial, con el operador +. Esta capa consiste en invocar a la funci√≥n aes(), dentro de la cual elegimos los elementos de mapeo que nos interesan.\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total)\n\n\n\n\n\n\n\n\n\nLa cosa va tomando forma: al menos ahora podemos ver que las variables fueron mapeadas tal como lo planeamos.\nSin embargo, el gr√°fico est√° vac√≠o porque a pesar de que elegimos qu√© poner en cada eje, no indicamos c√≥mo queremos que aparezcan los datos.\nNos falta un tercer elemento esencial, un geometry. Sin al menos una capa con un geometry no tendremos ninguna visualizaci√≥n.\nPor ejemplo, para un gr√°fico de dispersi√≥n, lo que necesitamos son puntos:\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n¬°Ya tenemos listo nuestro primer gr√°fico con ggplot2! Lo mostrado hasta aqu√≠ es la base, lo que no puede faltar; a partir de ahora podemos considerar incluir o no los restantes elementos.\nProbemos agregar un mapeo adicional. Por ejemplo, si queremos que el color de los puntos est√© mapeado a la variable vore (tipo de alimentaci√≥n: herb√≠voro, carn√≠voro, etc.), debemos agregar la opci√≥n color = vore en la capa de est√©ticas.\nDe esta manera asociamos el color de todos nuestros geoms con la variable vore, y adem√°s se crea autom√°ticamente la leyenda correspondiente:\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = vore) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n3.2.2 scales\n\nSi ahora queremos modificar las configuraciones elegidas por default para cada uno de los mapeos, necesitamos invocar a las capas de scales:\n\n\n\n\n\n\n\n\n\n\n\nPor ejemplo, modificamos l√≠mites, nombres de los ejes y la paleta de colores:\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = vore) +\n  geom_point() +\n  scale_x_continuous(name = \"Sue√±o REM (horas)\") +\n  scale_y_continuous(\n    name = \"Sue√±o total (horas)\", \n    limits = c(0, 25), \n    breaks = seq(0, 25, 5)\n    ) +\n  scale_color_brewer(name = \"Alimentaci√≥n\", palette = \"Dark2\", na.value = \"black\")\n\n\n\n\n\n\n\n\n\n\n3.2.3 stats\n\nPodemos agregar una nueva capa con un elemento de tipo stats, por ejemplo para agregar una recta de regresi√≥n lineal simple (esto s√≥lo es un ejemplo, deber√≠amos evaluar si es adecuado ajustar este tipo de modelo o no).\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = vore) +\n  geom_point() +\n  scale_x_continuous(name = \"Sue√±o REM (horas)\") +\n  scale_y_continuous(\n    name = \"Sue√±o total (horas)\", \n    limits = c(0, 25), \n    breaks = seq(0, 25, 5)\n    ) +\n  scale_color_brewer(name = \"Alimentaci√≥n\", palette = \"Dark2\", na.value = \"black\") +\n  stat_smooth(method = \"lm\", se = FALSE)\n\n\n\n\n\n\n\n\n\nComo en el gr√°fico ya existe el mapeo entre el color y la categor√≠a, vemos que autom√°ticamente tenemos una recta de regresi√≥n para cada grupo.\nSi quisi√©ramos una √∫nica recta para todos los datos, tendr√≠amos que hacerlo de la siguiente forma (la diferencia es muy sutil pero importante):\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total) +\n  geom_point(mapping = aes(color = vore)) +\n  scale_x_continuous(name = \"Sue√±o REM (horas)\") +\n  scale_y_continuous(\n    name = \"Sue√±o total (horas)\", \n    limits = c(0, 25), \n    breaks = seq(0, 25, 5)\n    ) +\n  scale_color_brewer(name = \"Alimentaci√≥n\", palette = \"Dark2\", na.value = \"black\") +\n  stat_smooth(method = \"lm\", se = FALSE)\n\n\n\n\n\n\n\n\n\n\n3.2.4 facets\n\nUn elemento de tipo facet crear√° un panel distinto para cada categor√≠a de la variable indicada:\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total) +\n  geom_point() +\n  scale_x_continuous(name = \"Sue√±o REM (horas)\") +\n  scale_y_continuous(\n    name = \"Sue√±o total (horas)\", \n    limits = c(0, 25), \n    breaks = seq(0, 25, 5)\n    ) +\n  scale_color_brewer(name = \"Alimentaci√≥n\", palette = \"Dark2\", na.value = \"black\") +\n  stat_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~ vore)\n\n\n\n\n\n\n\n\n\n\n3.2.5 coordinates\n\nPara ejemplificar las modificaciones al sistema de coordenadas aplicaremos una transformaci√≥n logar√≠tmica, que en este caso puede servir para visualizar mejor la relaci√≥n entre las horas de sue√±o y el peso corporal, ya que esta √∫ltima posee una distribuci√≥n muy asim√©trica:\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = msleep) +\n  aes(x = bodywt, y = sleep_total) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nIndicando que deseamos calcular logaritmos en base 10, el nuevo gr√°fico resulta:\n\n\nggplot(data = msleep) +\n  aes(x = bodywt, y = sleep_total) +\n  geom_point() +\n  coord_trans(x = \"log10\") +\n  scale_x_continuous(\n    name = \"Peso corporal (kg.)\", \n    breaks = c(0.005, 1, 10, 100, 1000),\n    labels = c(0.005, 1, 10, 100, 1000)\n    )\n\n\n\n\n\n\n\n\n\n\n3.2.6 themes\n\nFinalmente podemos modificar el aspecto general con una o varias capas de estilo (hay estilos predefinidos o personalizados, por ejemplo los de ggthemes o ggthemr):\n\n\n\n\n\n\n\n\n\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total) +\n  geom_point() +\n  scale_x_continuous(name = \"Sue√±o REM (horas)\") +\n  scale_y_continuous(\n    name = \"Sue√±o total (horas)\", \n    limits = c(0, 25), \n    breaks = seq(0, 25, 5)\n    ) +\n  scale_color_brewer(name = \"Alimentaci√≥n\", palette = \"Dark2\", na.value = \"black\") +\n  stat_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~ vore) +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio\n\n\n\nReproducir el siguiente gr√°fico que analiza las horas diarias de sue√±o seg√∫n el tipo de alimentaci√≥n de cada mam√≠fero, a trav√©s de histogramas:\n\n\n\n\n\n\n\n\n\n\nConsejo: avanzar de a poco, aprovechando el estilo de construcci√≥n gradual de ggplot2: comenzar por lo m√°s importante (que aparezca un histograma), seguido de lo intermedio (que aparezcan paneles), dejando para el final los detalles (ejes, colores).\nAyuda: el geom a usar es geom_histogram (ver argumento breaks para determinar los l√≠mites de cada barra). El t√≠tulo se puede colocar con la capa ggtitle() o bien con la capa labs()",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introducci√≥n a `ggplot2`</span>"
    ]
  },
  {
    "objectID": "capitulos/01_introduccion_a_ggplot2.html#nociones-√∫tiles-sobre-ggplot2",
    "href": "capitulos/01_introduccion_a_ggplot2.html#nociones-√∫tiles-sobre-ggplot2",
    "title": "3¬† Introducci√≥n a ggplot2",
    "section": "3.3 Nociones √∫tiles sobre ggplot2",
    "text": "3.3 Nociones √∫tiles sobre ggplot2\n\n3.3.1 Modificar las opciones por default de un geometry\n\nVeamos un ejemplo donde cambiamos el color, el tama√±o, la forma y la transparencia de los puntos:\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total) +\n  geom_point(color = \"blue\", fill = \"green\", size = 5, shape = 23, alpha = 0.5)\n\n\n\n\n\n\n\n\n\nEn este ejemplo hemos modificado caracter√≠sticas para todos los puntos, las cuales se definen dentro del geom correspondiente (geom_point) y no forman parte de la funci√≥n aes().\nOtra cosa distinta es, como hicimos antes, establecer para todo el gr√°fico que el color est√© vinculado a la variable vore, lo cual es un mapeo est√©tico definido dentro de aes() que afecta a todas las capas del gr√°fico.\nUna especificaci√≥n fija del color dentro de geom_point() sobreescribe el mapeo de color de aes():\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = vore) +\n  geom_point(size = 2, color = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio\n\n\n\n\nTratar de reproducir el siguiente gr√°fico:\n\n\n\n\n\n\n\n\n\n\n\nAyuda: gu√≠a de s√≠mbolos:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.2 Otras opciones para las scales\n\nComo dijimos antes, las capas que permiten hacer modificaciones sobre los mapeos establecidos comienzan con scale_.\nLuego, el nombre sigue con el mapeo que queremos editar (x_, y_, color_, shape_, etc.) y termina con una palabra que describe c√≥mo es ese mapeo: continuous (para variables continuas), discrete (para variables categ√≥ricas), manual (para asignar manualmente los colores que deseamos), etc.\nPor ejemplo, ya vimos que podemos usar una paleta de colores predefinida, pero tambi√©n podr√≠amos elegir los colores manualmente con scale_color_manual():\n\n\n# limits = identity para que NA est√© en la leyenda, y no s√≥lo los que elegimos a mano\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = vore) +\n  geom_point(size = 2) +\n  scale_color_manual(name = \"Alimentaci√≥n\", \n                     values = c(\"carni\" = \"red\", \"herbi\" = \"orange\", \n                                \"insecti\" = \"blue\", \"omni\" = \"green\"), \n                     na.value = \"black\", limits = identity)\n\n\n\n\n\n\n\n\n\n\nCambiar el orden de las categor√≠as en la leyenda:\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = vore) +\n  geom_point(size = 2) +\n  scale_color_manual(name = \"Alimentaci√≥n\", \n                     values = c(\n                       \"carni\" = \"red\", \"herbi\" = \"orange\", \n                       \"insecti\" = \"blue\", \"omni\" = \"green\"), \n                     na.value = \"black\", \n                     limits = c(\"omni\", \"herbi\", \"insecti\", \"carni\", NA))\n\n\n\n\n\n\n\n\n\nMapear una variable continua para el color:\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = awake) +\n  geom_point(size = 2) \n\n\n\n\n\n\n\n\n\nCambiar la escala de colores:\n\n\n\n# De forma manual\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = awake) +\n  geom_point(size = 2) +\n  scale_color_continuous(low = \"orange\", high = \"darkred\")\n\n\n\n\n\n\n\n# Con paletas predefinidas\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = awake) +\n  geom_point(size = 2) +\n  scale_colour_distiller(palette = \"Greens\")\n\n\n\n\n\n\n\n\n\n\n3.3.3 Crear un objeto de clase ggplot\n\nEs posible guardar nuestros gr√°ficos en un objeto de R, dentro del ambiente de trabajo. Esto tiene varias ventajas y generalmente lo hacemos cuando:\n\nel gr√°fico creado sirve como ‚Äúbase‚Äù y queremos seguir trabaj√°ndolo m√°s adelante, agreg√°ndole otras capas.\ndeseamos guardarlo como un archivo en nuestra compu (exportarlo).\nnecesitamos programar la generaci√≥n de decenas o cientos de figuras como parte de un proyecto, donde tal vez no nos dedicamos a ver una por una.\n\nEjemplo:\n\n\ngraf1 &lt;- ggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = vore) +\n  geom_point(size = 2)\n\n# Versi√≥n b√°sica\ngraf1\n\n\n\n\n\n\n\n# Versi√≥n con t√≠tulo\ngraf1 + \n  ggtitle(\"Relaci√≥n entre el sue√±o total y el sue√±o REM, seg√∫n alimentaci√≥n\")\n\n\n\n\n\n\n\n# Podemos crear una nueva versi√≥n, con t√≠tulo y alguna otra modificaci√≥n\ngraf2 &lt;- graf1 + \n  ggtitle(\"Relaci√≥n entre el sue√±o total y el sue√±o REM, seg√∫n alimentaci√≥n\") +\n  scale_x_continuous(breaks = 0:7, limits = c(0, 7)) +\n  scale_y_continuous(breaks = seq(0, 20, 4), limits = c(0, 20))\n  \ngraf2\n\n\n\n\n\n\n\n\n\n\n3.3.4 Exportar gr√°ficos\n\nMencionamos dos alternativas:\n\nEn la pesta√±a Plots de RStudio, usando el bot√≥n Export.\n\nProporciona opciones para copiar el gr√°fico en el portapapeles o guardarlo como archivo (formatos .png, .jpg, .tiff, .pdf, entre otros).\nEl cuadro de di√°logo es muy √∫til para especificar el tama√±o de la figura y su resoluci√≥n.\n\nCon la funci√≥n ggsave() del paquete ggplot2.\n\nEs muy f√°cil de usar, y sobre todo, muy √∫til para agregar en nuestro script si tenemos que hacer muchos gr√°ficos.\nPor default guarda el √∫ltimo gr√°fico creado, o podemos indicarle el que nosotros queramos haciendo referencia a un objeto ya creado.\nIdentifica el formato autom√°ticamente a partir de la extensi√≥n que pongamos en el nombre del archivo.\n\n\n\n\nggsave(\"miGrafico.pdf\", graf2)\nggsave(\"miGrafico.jpg\", graf2, width = 8, height = 5, units = \"cm\")\n\n\n\n\n\n\n\nEjercicio\n\n\n\n\nCrear un gr√°fico de boxplots para la variable awake seg√∫n las categor√≠as de vore, tal cual figura a continuaci√≥n, y guardarlo en un archivo llamado boxplot.png que tenga 20 cm. de ancho y 15 cm. de alto.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.5 Otras opciones para los themes\n\nLos argumentos de la capa theme() tienen nombres compuestos por palabras claves separadas por puntos.\nLa primera palabra clave indica el elemento a editar (por ejemplo, legend).\nLa segunda palabra clave indica qu√© aspecto le cambiaremos (por ejemplo, legend.position).\nEsta opci√≥n sirve, justamente, para cambiar la posici√≥n de la leyenda:\n\n\ngraf2 + theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\nLeyenda dentro de la figura:\n\n\ngraf2 + \n  theme(legend.position = c(0.9, 0.3))\n\n\n\n\n\n\n\n\n\nLos valores (0.9, 0.3) indican que el punto medio de la leyenda (el centro del rect√°ngulo) se ubica a la altura del 90% de la extensi√≥n del eje X, y al 30% de la altura de extensi√≥n del eje Y. Para justificar la leyenda usando otros criterios (por ejemplo, definir las coordenadas del punto inferior izquierdo) usamos la opci√≥n legend.justification:\n\n\ngraf2 + \n  theme(\n    legend.position = c(0.9, 0.3),\n    legend.justification = c(0, 0)\n    )\n\n\n\n\n\n\n\n\n\nHay 4 tipos de elementos que afectan distintos componentes del gr√°fico dentro de la funci√≥n theme():\n\nelement_rect(): para modificar la apariencia de elementos rectangulares, como el fondo del gr√°fico o de la leyenda, etc.\nelement_line(): modifica l√≠neas de los ejes, de la cuadr√≠cula del fondo, el borde del gr√°fico, los ticks de los ejes, etc.\nelement_text(): modifica el t√≠tulo, los t√≠tulos de los ejes, el texto de la leyenda, etc.\nelement_blank(): para eliminar un componente.\n\nPor ejemplo, para cambiar el rect√°ngulo de la leyenda:\n\n\ngraf2 + \n  theme(\n    legend.position = c(1, 0), \n    legend.justification = c(1, 0),\n    legend.background = element_rect(fill = \"transparent\", \n                                     color = \"black\", linetype = \"solid\")\n  )\n\n\n\n\n\n\n\n\n\nLos textos dependen de element_text(), por ejemplo:\n\n\ngraf2 + \n  theme(\n    legend.position = c(1, 0), \n    legend.justification = c(1, 0),\n    legend.background = element_rect(fill = \"transparent\", \n                                     color = \"black\", linetype = \"solid\"),\n    legend.text = element_text(colour = \"blue\", size = 16, face = \"bold\"),\n    legend.title = element_text(colour = \"purple\", size = 16, face = \"bold\")\n    )\n\n\n\n\n\n\n\n\n\nLas opciones para editar los ejes comienzan con axis:\n\n\ngraf2 + \n    theme(\n    legend.position = c(1, 0), \n    legend.justification = c(1, 0),\n    legend.background = element_rect(fill = \"transparent\", \n                                     color = \"black\", linetype = \"solid\"),\n    legend.text = element_text(colour = \"blue\", size = 16, face = \"bold\"),\n    legend.title = element_text(colour = \"purple\", size = 16, face = \"bold\"),\n    axis.title.x = element_text(color = \"forestgreen\", size = 18, face = \"italic\"),\n    axis.title.y = element_text(color = \"orange\", size = 18, face = \"italic\"),\n    axis.text = element_text(color = \"red\", face = \"bold\")\n    )\n\n\n\n\n\n\n\n\n\nSe pueden eliminar componentes con element_blank():\n\n\ngraf2 + \n    theme(\n        axis.title = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid = element_blank(),\n        plot.title = element_blank(),\n        legend.position = \"none\"\n    )\n\n\n\n\n\n\n\n\n\nComo vimos, hay themes predeterminados, por ejemplo:\n\n\ngraf2 + theme_linedraw()\n\n\n\n\n\n\n\n\n\nY tambi√©n se pueden instalar paquetes de R que traen muchos m√°s themes:\n\nggthemes\nggthemr\ntvthemes\nggtech\nhrbrthemes\n\n\nEjemplo con ggthemes:\n\nlibrary(ggthemes)\ngraf2 + theme_solarized()\n\n\n\n\n\n\n\n\n\n\n3.3.6 Colores\n\nR usa el sistema hexadecimal para representar colores. Este sistema mezcla las intensidades de los colores rojo, verde y azul (RGB por sus siglas en ingl√©s) usando una escala de 16 valores: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E y F.\nLa representaci√≥n de un color espec√≠fico emplea el s√≠mbolo numeral (‚Äò#‚Äô) seguido de 2 valores correspondientes al color rojo, 2 valores para el verde y 2 valores para el azul. Podemos pensar que la escala mencionada anteriormente va desde el 00 (ausencia del color) hasta el FF (m√°xima intensidad de ese color).\nVeamos algunos ejemplos:\n\n\nlibrary(scales)\nshow_col(c(\n  \"#FF0000\", \"#00FF00\", \"#0000FF\",\n  \"#880000\", \"#88FF00\", \"#8800FF\",\n  \"#000000\", \"#FFFFFF\", \"#888888\")\n  )\n\n\n\n\n\n\n\n\n\nDado que contamos con \\(16 \\times 16 = 256\\) valores posibles para intensidades de cada uno de los 3 colores, la cantidad total de tonalidades disponibles asciende a \\(256^3 = 16.777.216\\).\nAlgunas de estas m√°s de 16 millones de combinaciones posibles poseen nombres espec√≠ficos en R. No necesitamos acordarnos que el color rojo posee un c√≥digo hexadecimal igual a ‚Äú#FF0000‚Äù, ya que podemos escribirlo directamente como \"red\".\nEl listado completo de colores con nombre propio en R puede consultarse mediante la funci√≥n colors(). Debajo los vemos en una paleta interactiva:\n\n\n\n\n\n\n\n\nUna vez que ya elegimos los colores que m√°s nos gustan, podemos escribir su c√≥digo hexadecimal en la funci√≥n scale_ correspondiente:\n\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = awake) +\n  geom_point(size = 2) +\n  scale_color_continuous(low = \"#54FF9F\", high = \"#0B0B61\")\n\n\n\n\n\n\n\n\n\nElegir colores ‚Äúa dedo‚Äù puede ser cansador, ya que como vimos, hay millones de posibilidades. Muchas veces la opci√≥n m√°s c√≥moda es utilizar paletas creadas por expertos en teor√≠a del color, de las cuales R ofrece varias posibilidades.\nUnas de las m√°s conocidas son las paletas de Brewer, mencionadas en la primera clase de la materia:\n\n\n\n\n\n\n\n\n\n\n\nYa vimos ejemplos de c√≥mo usarlas mediante las funciones scale_color_brewer() (valores discretos) o bien scale_color_distiller() (valores continuos).\nOtras paletas que vale la pena mencionar son las del paquete viridis:\n\n\n\n\n\n\n\n\n\n\n\nEstas paletas poseen dos ventajas importantes: son aptas para personas con diferentes grados de daltonismo (m√°s info ac√°) y mantienen su uniformidad cuando se las imprime en blanco y negro.\nEjemplo de uso:\n\n\nlibrary(viridis)\n\nggplot(data = msleep) +\n  aes(x = sleep_rem, y = sleep_total, color = awake) +\n  geom_point(size = 2) +\n  scale_color_viridis(option = \"inferno\")\n\n\n\n\n\n\n\n\n\nPara m√°s informaci√≥n sobre el uso de colores en R y otros tipos de paletas, recomendamos leer este post de DataNovia.",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introducci√≥n a `ggplot2`</span>"
    ]
  },
  {
    "objectID": "capitulos/01_introduccion_a_ggplot2.html#extensiones-de-ggplot2",
    "href": "capitulos/01_introduccion_a_ggplot2.html#extensiones-de-ggplot2",
    "title": "3¬† Introducci√≥n a ggplot2",
    "section": "3.4 Extensiones de ggplot2",
    "text": "3.4 Extensiones de ggplot2\n\nExisten muchos libros gratuitos que ense√±an sobre visualizaci√≥n con ggplot2. Si bien una b√∫squeda r√°pida en Google revela decenas de posibilidades, mencionamos s√≥lo 2 de los m√°s populares:\n\nggplot2: Elegant Graphics for Data Analysis - Hadley Wickham\nR Graphics Cookbook - Winston Chang\n\nAdem√°s, hay paquetes con funciones muy √∫tiles que extienden la cantidad de cosas que se pueden hacer con ggplot2, las cuales generalmente est√°n pensadas para facilitar la interpretaci√≥n de resultados de alg√∫n tipo de an√°lisis en particular.\nAlgunos paquetes que vale la pena explorar son:\n\nGGally\nggfortify\nggforce\nggrepel\ngganimate\npatchwork\nplotly\n\nVeamos a continuaci√≥n algunos ejemplos desarrollados con estas herramientas.\n\n\nGGally\n\nEste paquete ofrece muchas herramientas interesantes, entre ellas, la funci√≥n ggpairs() que permite hacer matrices de gr√°ficos para ver la relaci√≥n de a pares entre conjuntos de variables:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggforce\n\nSe publicita como un paquete con nuevas geoms_ para extender el potencial del ggplot2 original. Vemos por ejemplo el uso de una elipse para agregar anotaciones:\n\n\nlibrary(ggforce)\n\nggplot(data = msleep) +\n  aes(x = log(bodywt), y = log(sleep_total), color = vore) +\n  geom_point() + \n  geom_mark_ellipse(\n    aes(\n      filter = bodywt &gt;= 1000,\n      label = \"Animales con peso mayor a 1 Tn.\",\n      description = \"Elefante asi√°tico y elefante africano\"\n    ),\n    show.legend = FALSE\n  )\n\n\n\n\n\n\n\n\n\n\nggfortify\n\nImplementa gr√°ficos en ggplot2 para salidas de m√©todos estad√≠sticos como modelos lineales, curvas de supervivencia, regresiones penalizadas, georreferenciamiento, series de tiempo, componentes principales, clustering, etc.\n\n\n\n\n\n\n\n\n\n\n\n\nggrepel\n\nOfrece algoritmos que optimizan la ubicaci√≥n de etiquetas dentro del gr√°fico:\n\n\nlibrary(ggrepel)\n\ngraf1 +\n    geom_label_repel(aes(label = name), show.legend = FALSE)\n\n\n\n\n\n\n\n\n\n\npatchwork\n\nFacilita la uni√≥n de diferentes gr√°ficos en una sola figura:\n\n\nlibrary(patchwork)\n\ngraf1 + graf2 + \n  plot_layout(nrow = 2, heights = c(0.3, 0.7))\n\n\n\n\n\n\n\n\n\n\ngganimate y plotly\n\nOfrecen herramientas para la creaci√≥n de gr√°ficos animados. Los presentaremos en las pr√≥ximas unidades de la materia.",
    "crumbs": [
      "Unidad 1. Introducci√≥n",
      "<span class='chapter-number'>3</span>¬† <span class='chapter-title'>Introducci√≥n a `ggplot2`</span>"
    ]
  },
  {
    "objectID": "capitulos/02.html",
    "href": "capitulos/02.html",
    "title": "Unidad 2. R Markdown",
    "section": "",
    "text": "Presentaci√≥n de la Unidad 2.\n\nP√°gina en construcci√≥n.",
    "crumbs": [
      "Unidad 2. R Markdown"
    ]
  },
  {
    "objectID": "capitulos/02_Rmarkdown.html",
    "href": "capitulos/02_Rmarkdown.html",
    "title": "4¬† Comunicaci√≥n de Resultados: R Markdown",
    "section": "",
    "text": "4.1 Introducci√≥n\nlibrary(DT)\nlibrary(kableExtra)\nlibrary(tinytex)\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(rmarkdown)\nDisclaimer: la autor√≠a de este material corresponde en parte al profesor Marcos Prunello.",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: R Markdown</span>"
    ]
  },
  {
    "objectID": "capitulos/02_Rmarkdown.html#introducci√≥n",
    "href": "capitulos/02_Rmarkdown.html#introducci√≥n",
    "title": "4¬† Comunicaci√≥n de Resultados: R Markdown",
    "section": "",
    "text": "Los contenidos de esta unidad est√°n motivados por el concepto de comunicaci√≥n eficiente.\nEsta idea se encuentra √≠ntimamente ligada al contexto en el cual nos desempe√±amos. No es lo mismo escribir una tesis acad√©mica, que un reporte para uso interno dentro de una empresa, que generar un informe que ser√° publicado en redes sociales. La manera en que presentamos los resultados, el lenguaje que utilizamos, el formato de salida y muchas otras caracter√≠sticas depender√°n del p√∫blico al que va dirigido el mensaje.\nComo ya sabemos, la aparici√≥n de nuevas herramientas inform√°ticas ha revolucionado la manera en que nos comunicamos, no s√≥lo a trav√©s del lenguaje oral, sino tambi√©n del escrito. En particular, consideramos que existen dos paradigmas muy arraigados que necesitan ser repensados (no eliminados) dado el contexto actual:\n\nEl concepto de informe est√°tico, generalmente impreso en papel o compartido en formato Word, PDF, PowerPoint, etc. En ocasiones es aconsejable otorgarle cierto poder de decisi√≥n al usuario/a que leer√° el informe, d√°ndole la posibilidad de elegir qu√© variables o categor√≠as graficar, c√≥mo ordenar las tablas presentadas, etc. En este sentido, repasaremos algunas herramientas para dinamizar y hacer interactivos los informes que elaboramos: R Markdown, y m√°s adelante, R Shiny y Power BI.\nEl concepto de informe definitivo. Muchas veces parece que hemos llegado a un punto final, a partir del cual no hay lugar para la actualizaci√≥n, la mejora o la revisi√≥n del trabajo realizado. ¬øQu√© pasa si descubrimos un error de carga en los datos y es necesario cambiar todos los resultados? O bien, ¬øqu√© hacemos si hay nueva informaci√≥n disponible y tambi√©n queremos actualizar el material? En este punto, R sale otra vez al rescate, gracias a su flujo de trabajo integrado y f√°cilmente reproducible.\n\nPara reproducir los ejemplos de este apunte, necesitamos los siguientes paquetes:",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: R Markdown</span>"
    ]
  },
  {
    "objectID": "capitulos/02_Rmarkdown.html#qu√©-es-r-markdown",
    "href": "capitulos/02_Rmarkdown.html#qu√©-es-r-markdown",
    "title": "4¬† Comunicaci√≥n de Resultados: R Markdown",
    "section": "4.2 Qu√© es R Markdown",
    "text": "4.2 Qu√© es R Markdown\n\nEn R, la posibilidad de entrelazar el an√°lisis estad√≠stico con la generaci√≥n de reportes se logra a trav√©s de R Markdown y todos sus productos derivados. Estas herramientas pueden ser utilizadas, entre otras cosas, para construir:\n\nInformes o reportes laborales\nPresentaciones con diapositivas\nArt√≠culos acad√©micos (papers)\nP√°ginas web\nBlogs\nLibros (s√≠, libros enteros)\n\n\n\n\n\nEstamos acostumbrados a realizar estas tareas con diferentes programas: Word para documentos que contienen una gran cantidad de texto, PowerPoint para presentaciones, Excel para reportes que incluyen tablas y gr√°ficos, etc. ¬øPor qu√© deber√≠amos pensar en cambiar estas costumbres? Existen tres razones que podemos agregar a los ya mencionados cambios de paradigma:\n\nIntegraci√≥n: si trabajamos con R podemos llevar a cabo todos los pasos del proceso de an√°lisis mediante el mismo software (no m√°s copiado y pegado de resultados de R a otros programas). Es posible escribir art√≠culos, lanzar p√°ginas web o publicar libros sin salir de RStudio.\nReplicaci√≥n: la estructura de trabajo de R Markdown facilita su replicabilidad, ya que gracias a la mencionada integraci√≥n, todos los pasos del proceso se encuentran contenidos en un solo lugar: lectura y limpieza de datos, an√°lisis estad√≠stico, ajuste de modelos, escritura de texto y conclusiones, generaci√≥n de un reporte que incluya resultados, tablas, gr√°ficos, c√≥digo utilizado, etc. Algunos autores definen la replicaci√≥n como una parte esencial del m√©todo cient√≠fico.\nSalto de Categor√≠a: la calidad de los archivos generados y las opciones de personalizaci√≥n que podemos alcanzar con R son enormes, d√°ndole un aspecto mucho m√°s profesional a nuestro trabajo.\n\nPero, ¬øqu√© es Markdown? Es el nombre de un lenguaje de marcado ligero que sirve para producir distintos tipos de documentos, a partir de una sintaxis donde las sentencias incluyen exclusivamente el uso de caracteres b√°sicos. Adem√°s, se guardan en archivos de texto plano, sin formato.\nSi bien este lenguaje fue desarrollado originalmente para producir textos de p√°ginas web y as√≠ simplificar la escritura de c√≥digo HTML, su dise√±o permite convertir un documento de tipo markdown a una gran variedad de formatos de salida. Generalmente se usa para escribir archivos README o documentaci√≥n, publicaciones en foros online, servicios de mensajer√≠a instant√°nea, etc.\nEl formato de documentos R Markdown se encarga de incorporar este tipo de escritura en R para poder combinar texto, c√≥digo y salidas en la creaci√≥n de archivos publicables de excelente calidad, resultando en un proceso de creaci√≥n relativamente sencillo.\nLos paquetes que implementan todo esto son rmarkdown y knitr:\n\n\n \n\n\n\n\nPodemos elegir diferentes formatos de salida, entre ellos HTML, PDF, Word y PowerPoint. Si bien en esta clase nos enfocaremos √∫nicamente en los dos primeros, aquellos interesados en conocer m√°s sobre la conexi√≥n entre R Markdown y Word pueden consultar este tutorial. Por otro lado, una peque√±a introducci√≥n a la relaci√≥n R Markdown - PowerPoint puede encontrarse en el cap√≠tulo 4.4 de R Markdown - The Definitive Guide.\n\n\n\n\n\n\n\nAclaraci√≥n\n\n\n\nEn 2022 Posit (la compa√±√≠a antes llamada RStudio) relanz√≥ R Markdown bajo el nombre de Quarto. Si bien este nuevo producto posee algunas diferencias con respecto al original, estas son m√≠nimas, y todo lo que figura a continuaci√≥n puede aplicarse en cualquiera de las dos versiones.",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: R Markdown</span>"
    ]
  },
  {
    "objectID": "capitulos/02_Rmarkdown.html#primeros-pasos",
    "href": "capitulos/02_Rmarkdown.html#primeros-pasos",
    "title": "4¬† Comunicaci√≥n de Resultados: R Markdown",
    "section": "4.3 Primeros Pasos",
    "text": "4.3 Primeros Pasos\n\nUn documento R Markdown b√°sico puede crearse de forma sencilla con RStudio accediendo a File &gt; New File &gt; R Markdown, o bien haciendo click en la cruz blanca sobre fondo verde y eligiendo R Markdown en el men√∫ desplegable:\n\n\n\n\n\n\n\n\n\n\n\nEn la siguiente ventana se nos pregunta qu√© tipo de documento queremos crear, con varias opciones disponibles:\n\nDocumento de texto (HTML, PDF o Word)\nPresentaci√≥n (diapositivas)\nShiny (app que puede ejecutarse a trav√©s de un navegador web e incorpora contenido interactivo)\nDesde un template (documentos con formato pre-seteado provistos por algunos paquetes)\n\n\n\n\n\n\n\n\n\n\n\n\nPodemos tomar de ejemplo un documento de texto en formato HTML.\nUna vez elegido el tipo de documento, RStudio ofrece por defecto una plantilla que incluye varias secciones, las cuales analizaremos en detalle a continuaci√≥n. Es importante notar que, a diferencia de los archivos de c√≥digo comunes (con extensi√≥n .R), este archivo posee la extensi√≥n .Rmd (o bien .qmd si usamos Quarto).\nDebemos guardar este documento en alguna carpeta de nuestra compu.\nSu estructura general se representa en la siguiente imagen:\n\n\n\n\n\n\n\n\n\n\n\n4.3.1 Encabezado\n\nEl encabezado, tambi√©n conocido como YAML Metadata, se coloca al comienzo del documento entre dos tiras de guiones. Aqu√≠ se incluyen el t√≠tulo del documento y subt√≠tulo si lo tuviera, autor, fecha y varias opciones m√°s.\nEn output se indica el formato de salida que se desea; si bien esta opci√≥n se genera autom√°ticamente al elegir el formato en la pantalla anterior, podemos modificarlo manualmente si cambiamos de opini√≥n.\n\n---\ntitle: \"Mi Primer Markdown en HTML\"\nsubtitle: \"AED | Lic. en Estad√≠stica | FCEyE | UNR\"\nauthor: \"Diego & Iv√°n\"\ndate: \"Agosto 2024\"\noutput: html_document\n---\n\nM√°s adelante mencionaremos m√°s opciones que dependen del output elegido.\n\n\n\n4.3.2 Texto\n\nPara la escritura de texto se usa el lenguaje Pandoc‚Äôs Markdown, una extensi√≥n del Markdown original. Un amplio manual sobre esta herramienta puede consultarse en la web oficial de Pandoc, un software libre que se utiliza para convertir documentos de un formato a otro.\nEn la siguiente tabla mostramos algunos trucos para darle un aspecto m√°s interesante al texto que escribimos en R Markdown:\n\n\n\n\n\n\n\n\n\n\n\nLos encabezados de cada secci√≥n se definen mediante numerales: un numeral equivale a un t√≠tulo principal, dos numerales a un subt√≠tulo, tres numerales a un sub-subt√≠tulo, etc.:\n\n\n\n\n\n\n\n\n\n\n\nPor defecto, el √≠ndice de un documento R Markdown incluye los encabezados de nivel 1, 2 y 3. Si queremos cambiar este comportamiento, podemos utilizar la opci√≥n toc_depth: x dentro del encabezado, para mostrar los niveles 1 a x.\nRecomendamos dejar un espacio entre el numeral y el t√≠tulo de la secci√≥n (# T√≠tulo), ya que para ciertos formatos de salida de R Markdown, la expresi√≥n #T√≠tulo no ser√° reconocida como tal.\nPara iniciar un nuevo p√°rrafo en Pandoc debemos dejar dos espacios al final de una l√≠nea de texto o bien un rengl√≥n vac√≠o entre una cadena de texto y la otra. Con un solo Enter no lograremos nada.\n\n\n\n4.3.3 C√≥digo\n\nPara a√±adir c√≥digo dentro de un documento Rmd es necesario insertar un chunk, t√©rmino que podemos traducir como pedazo o bloque. Las dos maneras m√°s directas de hacerlo son:\n\nApretar las teclas Ctrl + Alt + i, o bien‚Ä¶\nHacer click en el √≠cono Insert en la barra de edici√≥n y elegir la primera opci√≥n (R). Tambi√©n es posible insertar chunks que contengan sentencias escritas en otros lenguajes (Python, SQL, Stan, etc.)\n\n\n\n\n\nDentro de estos bloques podemos escribir c√≥digo de R, tal como lo hacemos regularmente en un archivo de sentencias com√∫n y corriente. En lo posible, se recomienda crear bloques relativamente aut√≥nomos y enfocados en una sola tarea: por ejemplo, un bloque para importar datos, otro para ajustes, otro para generar gr√°ficos, etc.\nPara correr todo el c√≥digo presente en un bloque se puede usar el atajo Ctrl + Shift + Enter o bien el tri√°ngulo verde ubicado en la parte superior derecha del chunk.\nLa salida generada por cada chunk puede personalizarse con distintos argumentos que se indican en su encabezado. El paquete knitr provee casi 60 opciones para personalizar chunks: ac√° podemos consultar la lista completa.\nA continuaci√≥n repasamos algunas de los m√°s √∫tiles:\n\neval = TRUE/FALSE define si el c√≥digo de ese chunk debe ejecutarse, o no (en este caso no se generan resultados). Esta opci√≥n es √∫til para mostrar ejemplos de sentencias que no deseamos correr, o bien para deshabilitar la ejecuci√≥n de un gran bloque de c√≥digo sin comentar cada l√≠nea.\necho = TRUE/FALSE define si el c√≥digo se muestra en el documento final, o no. Por defecto todo chunk se ejecuta y se imprime. Dado que en numerosas ocasiones no deseamos que nuestro c√≥digo se haga p√∫blico, la opci√≥n echo = FALSE es una de las m√°s utilizadas.\nmessage, warning y error definen si los mensajes, advertencias o errores generados por las funciones ejecutadas dentro del chunk deben mostrarse (TRUE) o no (FALSE).\nresults define qu√© hacer con los resultados del c√≥digo presente en ese chunk: imprimir con formato (\"markup\"), sin formato (\"asis\"), no imprimir (\"hide\") o imprimir todo junto al final (\"hold\").\nfig.height y fig.width definen el alto y el ancho (en pulgadas) de los gr√°ficos generados por ese chunk.\nout.width define el ancho de los gr√°ficos generados por ese chunk, con respecto al tama√±o relativo de la p√°gina; por ejemplo out.width=\"75%\" imprime un gr√°fico que ocupa las tres cuartas partes del ancho total.\nfig.align define la justificaci√≥n de la imagen: a la izquierda (\"left\"), centradas (\"center\") o a la derecha (\"right\").\nfig.cap define el texto que describe el gr√°fico generado (caption), el cual se ubica debajo de la imagen.\n\n\n\n\n\nLos chunks pueden recibir nombres, que no deben repetirse a lo largo del documento. Esta opci√≥n facilita la organizaci√≥n en archivos extensos, permite crear v√≠nculos a resultados de chunks espec√≠ficos a lo largo del documento, y adem√°s, nos ayuda a encontrar y resolver problemas de forma m√°s eficaz.\nUn ejemplo de chunk bautizado BloqueMuyImportante con algunas opciones luce as√≠:\n\n```{r BloqueMuyImportante, warning=TRUE, echo=TRUE}\n datos &lt;- read_excel(\"Plantilla.xlsx\")\n summary(datos)\n```\n\nLas opciones de personalizaci√≥n de chunks, tal como las escribimos hasta ahora, afectan s√≥lo al c√≥digo contenido dentro de ese bloque. Si deseamos definir estas opciones de manera global, de tal manera que abarquen a todos los chunks del documento, podemos hacerlo mediante la funci√≥n opts_chunk() del paquete knitr.\nEs com√∫n que el primer chunk del archivo contenga un llamado a esta funci√≥n, definiendo los detalles globales de todos los bloques generados en el resto del documento. Generalmente se le da el nombre setup, aunque esto es opcional. Por ejemplo:\n\n```{r setup, include = FALSE}\nknitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, \n                      comment = NA, fig.align = \"center\", out.width = \"100%\")\n```\nSi quiero cambiar el comportamiento definido en opts_chunk() s√≥lo en algunos bloques determinados, alcanza con volver a definir las opciones en sus respectivos encabezados.\n\n\n4.3.4 Compilar\nPara generar el documento definitivo basta con cliquear el bot√≥n Knit (literalmente, tejer) que se encuentra en la barra de herramientas de RStudio:\n\n\n\n\n\n\n\n\n\n\nOtra opci√≥n para generar documentos es utilizar la funci√≥n render() del paquete rmarkdown:\n\n\nrender(\"MiArchivo.Rmd\")\n\nPara tener en cuenta:\n\nAl momento de generar un documento, R s√≥lo podr√° utilizar los objetos definidos dentro del Rmd mismo: de nada sirve cargar un objeto en nuestro ambiente de trabajo, si luego no replicamos esa sentencia en el Markdown.\nAl lado del bot√≥n Knit hay una lista desplegable que nos permite elegir otro formato de salida, diferente al que tenemos indicado por default.",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: R Markdown</span>"
    ]
  },
  {
    "objectID": "capitulos/02_Rmarkdown.html#herramientas-√∫tiles",
    "href": "capitulos/02_Rmarkdown.html#herramientas-√∫tiles",
    "title": "4¬† Comunicaci√≥n de Resultados: R Markdown",
    "section": "4.4 Herramientas √∫tiles",
    "text": "4.4 Herramientas √∫tiles\n\n4.4.1 Listas\n\nPara crear listas de elementos no numerados, podemos usar un asterisco (*) o bien un guion (-). Si deseamos agregar sublistas dentro de algunas listas, el asterisco o guion debe estar precedido una tabulaci√≥n o cuatro espacios.\nPor otro lado, para listas numeradas debemos agregar al principio de cada elemento el n√∫mero correspondiente a cada √≠tem, seguido de un punto (1., 2., etc.). Si no tenemos ganas de contar la cantidad de √≠tems, podemos usar la numeraci√≥n 1. para cada elemento y R har√° los incrementos autom√°ticamente:\n\n\n\n\n\n\n\n\n\n\n\n\n4.4.2 Enlaces\n\nPara a√±adir links a p√°ginas web se puede escribir lo siguiente: [Link a la p√°gina web de la FCEyE-UNR](https://www.fcecon.unr.edu.ar/), lo cual se mostrar√° as√≠: Link a la p√°gina web de la FCEyE-UNR.\nSi queremos que el link quede visible, podemos escribir &lt;https://www.fcecon.unr.edu.ar&gt; y se ver√° as√≠: https://www.fcecon.unr.edu.ar.\n\n\n\n4.4.3 Im√°genes\n\nSi queremos insertar im√°genes dentro de nuestro documento, recomendamos utilizar la funci√≥n include_graphics() de knitr:\n\n```{r, out.width=\"50%\"}\nknitr::include_graphics(\"../imagenes/unidad02/C:/Mis Documentos/messi.jpg\")\n```\n\n\n\n\n\n\n\n\n\n\nEste recurso es v√°lido para im√°genes de formato png, jpg, gif, pdf (entre otros) que est√©n guardadas en nuestra PC o que se encuentren alojadas online.\nNo es necesario utilizar esta funci√≥n si queremos incluir un gr√°fico generado dentro de R, directamente escribimos el c√≥digo correspondiente en un chunk (que seguramente queramos dejar oculto):\n\n```{r, out.width = \"60%\", echo = TRUE}\nggplot(mpg) +\n  aes(x = cty, fill = factor(cyl)) +\n  geom_density(alpha = 0.8) +\n  labs(title = \"Gr√°fico de densidad\", \n       subtitle = \"Millaje en ciudad seg√∫n n√∫mero de cilindros\",\n       caption = \"Fuente: datos mpg\",\n       x = \"Millas por gal√≥n\", y = \"Densidad\",\n       fill = \"Nro de cilindros\") +\n  theme(legend.position = \"bottom\")\n```\n\n\n\n\n\n\n\n\n\n\n\n4.4.4 Tablas\n\nFrecuentemente necesitamos presentar tablas con resultados de nuestros an√°lisis.\nPor ejemplo, el promedio de algunas variables calculado seg√∫n la cantidad de cilindros que tienen los autos listados en el dataset mtcars, como vemos a continuaci√≥n:\n\n\nresultado &lt;- mtcars %&gt;% \n  group_by(cyl) %&gt;% \n  summarise_at(c(1, 3:7), mean)\n\nresultado\n\n# A tibble: 3 √ó 7\n    cyl   mpg    hp  drat    wt  qsec    vs\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     4  26.7  82.6  4.07  2.29  19.1 0.909\n2     6  19.7 122.   3.59  3.12  18.0 0.571\n3     8  15.1 209.   3.23  4.00  16.8 0    \n\n\n\n\nTambi√©n podemos recurrir a la sintaxis de Markdown para crear tablas, que indica que hay definir el encabezado separ√°ndolo con guiones del resto de las filas e identificar las columnas con barras verticales.\nPor ejemplo:\n| cyl|   mpg|     hp| drat|   wt|  qsec|   vs|\n|:--:|-----:|------:|----:|----:|-----:|----:|\n|   4| 26.66|  82.64| 4.07| 2.29| 19.14| 0.91|\n|   6| 19.74| 122.29| 3.59| 3.12| 17.98| 0.57|\n|   8| 15.10| 209.21| 3.23| 4.00| 16.77| 0.00|\nDebajo vemos los resultados en nuestros archivos compilados, primero en versi√≥n html y luego en pdf:\n\n\n\ncyl\nmpg\nhp\ndrat\nwt\nqsec\nvs\n\n\n\n\n4\n26.66\n82.64\n4.07\n2.29\n19.14\n0.91\n\n\n6\n19.74\n122.29\n3.59\n3.12\n17.98\n0.57\n\n\n8\n15.10\n209.21\n3.23\n4.00\n16.77\n0.00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHay p√°ginas que nos ayudan a generar esas tablas con guiones y barras (recomendamos explorar la web Tables Generator), pero la idea es no hacerlo a mano.\nExisten muchos paquetes muy potentes para este configurar cualquier aspecto de las tablas (como xtable, huxtable, formattable, kableExtra y varios otros) con opciones que en algunos casos son espec√≠ficas para cada formato de salida. Cada uno provee herramientas particulares para generar tablas con formato a partir c√≥digo de R.\n\n\n\n4.4.5 C√≥digo din√°mico\n\nUna manera de insertar resultados dentro del texto escrito es utilizando el formato `r MiObjeto`, donde MiObjeto es cualquier valor definido en los chunks del documento. Por ejemplo, puedo definir un objeto llamado pvalue en un reporte que genero mensualmente; cada vez que vuelvo a correr las sentencias, pvalue cambiar√° de valor.\nSi dentro del texto del reporte deseo mencionar el valor exacto de pvalue, el formato de c√≥digo din√°mico nos ayuda a imprimir de forma autom√°tica este valor, sin tener que preocuparnos por cambiarlo manualmente.\nProbamos esta t√©cnica con un test t a dos colas, donde la hip√≥tesis nula es \\(H_0)\\mu=0\\) y la alternativa \\(H_1)\\mu\\neq0\\). En nuestro documento .Rmd tenemos este chunk:\n\n```{r, echo = FALSE}\nprueba &lt;- t.test(rnorm(30), alternative = \"two.sided\", mu = 0) \npvalue &lt;- prueba$p.value\n```\n\nEn alg√∫n lugar del documento escribimos:\n\nSe realiz√≥ la prueba T-Student (pvalue = `r pvalue`).\n\nY el resultado final en el archivo compilado ser√°:\n\nSe realiz√≥ la prueba T-Student (pvalue = 0.0323787).\n\nIncluso el texto podr√≠a estar controlado por objetos de R, como se puede ver en esta otra versi√≥n m√°s ‚Äúsofisticada‚Äù del caso anterior. En el documento ponemos:\n\nEl promedio `r ifelse(pvalue &lt;= 0.05, \"\", \"no\")` difiere significativamente de cero (pvalue = `r round(pvalue, 4)`).\n\nY el resultado final en el archivo compilado ser√°:\n\nEl promedio  difiere significativamente de cero (pvalue = 0.0324).\n\n\n4.4.6 Escritura matem√°tica\n\nR Markdown tambi√©n admite el uso de notaci√≥n matem√°tica para la escritura de f√≥rmulas, siempre que encerremos la expresi√≥n en cuesti√≥n con un s√≠mbolo ‚Äú$‚Äù si deseamos ecuaciones ubicadas en la misma l√≠nea que el texto escrito, o bien mediante un doble s√≠mbolo ‚Äú$$‚Äù, para ecuaciones ubicadas en un nuevo rengl√≥n.\nPor ejemplo $\\sum_{i=1}^{N} (x_i-\\mu)^2$ se muestra como \\(\\sum_{i=1}^{N} (x_i-\\mu)^2\\), mientras que $$\\sum_{i=1}^{N} (x_i-\\mu)^2$$ se muestra como \\[\\sum_{i=1}^{N} (x_i-\\mu)^2\\]\n¬øDe d√≥nde sale esa sucesi√≥n extra√±a de caracteres para definir la f√≥rmula? R Markdown, como muchos otros lenguajes de marcado ligero, toma prestada la sintaxis de LaTeX para la escritura de f√≥rmulas.\n\n\n\nUna gran lista de ejemplos de notaci√≥n matem√°tica puede encontrarse en este link.\nVeamos ahora algunos ejemplos de s√≠mbolos y formatos comunes a la hora de escribir textos matem√°ticos:\n\nOperadores: \n$5 + z \\leq 4 \\times \\sqrt[3]{x}$\n\\(5 + z \\leq 4 \\times \\sqrt[3]{x}\\)\nSub√≠ndices y super√≠ndices:\n$x^2 + y^3 - z_0$\n\\(x^2 + y^3 - z_0\\)\nLetras griegas:\n$\\delta + \\Delta + \\gamma + \\Gamma - \\pi - \\phi$\n\\(\\delta + \\Delta + \\gamma + \\Gamma - \\pi - \\phi\\)\nFracciones:\n$\\frac{3}{4} + \\frac{\\lambda}{\\omega}$\n\\(\\frac{3}{4} + \\frac{\\lambda}{\\omega}\\)\nSumatorias:\n$\\sum_{i=1}^{N} (x_i-\\mu)^2$\n\\(\\sum_{i=1}^{N} (x_i-\\mu)^2\\) \\(\\displaystyle\\sum_{i=1}^{N} (x_i-\\mu)^2\\)\nIntegrales:\n$\\int_{0}^{+\\infty} \\cos{(x)}dx$\n\\(\\int_{0}^{+\\infty} \\cos{(x)}dx\\) \\(\\displaystyle\\int_{0}^{+\\infty} \\cos{(x)}dx\\)\nEspeciales:\n$\\hat{\\mu} = \\bar{x} \\iff \\bar{x} = \\hat{\\mu}$\n\\(\\hat{\\mu} = \\bar{x} \\iff \\bar{x} = \\hat{\\mu}\\)",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: R Markdown</span>"
    ]
  },
  {
    "objectID": "capitulos/02_Rmarkdown.html#detalles-espec√≠ficos-para-html",
    "href": "capitulos/02_Rmarkdown.html#detalles-espec√≠ficos-para-html",
    "title": "4¬† Comunicaci√≥n de Resultados: R Markdown",
    "section": "4.5 Detalles espec√≠ficos para html",
    "text": "4.5 Detalles espec√≠ficos para html\n\nTodo lo que vimos hasta ac√° funciona para cualquier formato de salida deseado. Esta es una de las mayores virtudes de R Markdown, ya que podemos independizar nuestro trabajo de los detalles propios de cada sistema, generando cualquiera de ellos a partir del mismo script.\nAhora bien, si tenemos en mente un formato de salida en particular, podemos personalizar a√∫n m√°s detalles con opciones espec√≠ficas para ese formato.\nUna posible manera de lograr esto consiste en agregar detalles en la secci√≥n output del encabezado YAML.\nPor ejemplo, el encabezado del archivo que genera este HTML luce as√≠:\n\n---\ntitle: \"Comunicaci√≥n de Resultados: R Markdown\"\nsubtitle: \"An√°lisis Exploratorio de Datos | Licenciatura en Estad√≠stica | FCEyE | UNR\"\nauthor: \n  - Mg. Diego Marfet√°n Molina\n  - Lic. Iv√°n Millanes\ndate: \"8/26/24\"\nlang: es\ntoc: true\nformat: \n  html:\n    self-contained: true\n    df-print: paged\n    theme:\n      light: journal\n      dark: darkly\nknitr:\n  opts_chunk: \n    echo: true\n    message: false\n    warning: false\n    fig.align: center\n---\n\nself-contained indica que las figuras se deben incrustar en el c√≥digo, con lo cual el documento es ‚Äúportable‚Äù (cualquiera que tenga el HTML puede ver todas las im√°genes incluidas).\ntheme define el aspecto general del documento, con respecto a colores, sombreados, estilo del texto, etc. (link a lista de temas disponibles).\n\n\n\nQuienes se sientan c√≥modos/as escribiendo c√≥digo HTML, pueden definir m√°s opciones de personalizaci√≥n (colores, tama√±os, fuentes, espaciados, etc.) en otro archivo de formato .css (cascading style sheet) y avisarle a R Markdown que lo tenga en cuenta nombr√°ndolo en el encabezado:\n\n--- \ntitle: \"Comunicaci√≥n de Resultados: R Markdown\"\nformat: \n  html:\n    self-contained: true\n    df-print: paged\n    css: archivo_de_estilo.css\n---\n\nOtro aspecto que se puede personalizar bastante al trabajar con salida en html es la forma en la que se conjuntos de datos o tablas. Veamos algunas opciones:\nOpci√≥n 1: agregar df_print: paged entre las opciones del output en el YAML, logrando que los conjuntos de datos se puedan explorar interactivamente.\nOpci√≥n 2: usando el paquete DT, que con su funci√≥n datatable(), que hace que los conjuntos de datos se presenten en tablas filtrables y reordenables. Ejemplo:\n\n\nmtcars %&gt;% \n  datatable(filter = \"top\", options = list(scrollX = TRUE)) %&gt;% \n  formatStyle(columns = 0:11, fontSize = \"75%\")\n\n\n\n\n\n\n\nOpci√≥n 3: combinar la funci√≥n kable() del paquete knitr con funciones de configuraci√≥n adicionales provistas por el paquete kableExtra. Por ejemplo, con las funciones row_spec() y column_spec() podemos modificar el aspecto del texto (color, formato, etc.) de columnas y filas determinadas; adem√°s, agregamos una barra de desplazamiento para evitar imprimir la tabla entera mediante scroll_box(). Muchas m√°s opciones de personalizaci√≥n de tablas con kableExtra pueden consultarse en su vi√±eta oficial.\n\n\nmtcars %&gt;% \n  kable() %&gt;% \n  kable_styling(font_size = 10, bootstrap_options = \"hover\") %&gt;% \n  column_spec(1, bold = TRUE, background = \"#DF0101\", color = \"white\") %&gt;% \n  row_spec(0, background = \"#2E2E2E\", bold = TRUE, color = \"white\") %&gt;% \n  row_spec(4:5, italic = TRUE, color = \"#2E9AFE\") %&gt;% \n  scroll_box(height = \"300px\")\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n\n\nMerc 280C\n17.8\n6\n167.6\n123\n3.92\n3.440\n18.90\n1\n0\n4\n4\n\n\nMerc 450SE\n16.4\n8\n275.8\n180\n3.07\n4.070\n17.40\n0\n0\n3\n3\n\n\nMerc 450SL\n17.3\n8\n275.8\n180\n3.07\n3.730\n17.60\n0\n0\n3\n3\n\n\nMerc 450SLC\n15.2\n8\n275.8\n180\n3.07\n3.780\n18.00\n0\n0\n3\n3\n\n\nCadillac Fleetwood\n10.4\n8\n472.0\n205\n2.93\n5.250\n17.98\n0\n0\n3\n4\n\n\nLincoln Continental\n10.4\n8\n460.0\n215\n3.00\n5.424\n17.82\n0\n0\n3\n4\n\n\nChrysler Imperial\n14.7\n8\n440.0\n230\n3.23\n5.345\n17.42\n0\n0\n3\n4\n\n\nFiat 128\n32.4\n4\n78.7\n66\n4.08\n2.200\n19.47\n1\n1\n4\n1\n\n\nHonda Civic\n30.4\n4\n75.7\n52\n4.93\n1.615\n18.52\n1\n1\n4\n2\n\n\nToyota Corolla\n33.9\n4\n71.1\n65\n4.22\n1.835\n19.90\n1\n1\n4\n1\n\n\nToyota Corona\n21.5\n4\n120.1\n97\n3.70\n2.465\n20.01\n1\n0\n3\n1\n\n\nDodge Challenger\n15.5\n8\n318.0\n150\n2.76\n3.520\n16.87\n0\n0\n3\n2\n\n\nAMC Javelin\n15.2\n8\n304.0\n150\n3.15\n3.435\n17.30\n0\n0\n3\n2\n\n\nCamaro Z28\n13.3\n8\n350.0\n245\n3.73\n3.840\n15.41\n0\n0\n3\n4\n\n\nPontiac Firebird\n19.2\n8\n400.0\n175\n3.08\n3.845\n17.05\n0\n0\n3\n2\n\n\nFiat X1-9\n27.3\n4\n79.0\n66\n4.08\n1.935\n18.90\n1\n1\n4\n1\n\n\nPorsche 914-2\n26.0\n4\n120.3\n91\n4.43\n2.140\n16.70\n0\n1\n5\n2\n\n\nLotus Europa\n30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n\n\nFord Pantera L\n15.8\n8\n351.0\n264\n4.22\n3.170\n14.50\n0\n1\n5\n4\n\n\nFerrari Dino\n19.7\n6\n145.0\n175\n3.62\n2.770\n15.50\n0\n1\n5\n6\n\n\nMaserati Bora\n15.0\n8\n301.0\n335\n3.54\n3.570\n14.60\n0\n1\n5\n8\n\n\nVolvo 142E\n21.4\n4\n121.0\n109\n4.11\n2.780\n18.60\n1\n1\n4\n2\n\n\n\n\n\n\n\n\n\nOpci√≥n 4: para tablas peque√±as, podemos recurrir a Tables Generator. Generamos all√≠ la tabla a mano, copiamos el c√≥digo html y lo pegamos directamente en el Rmd.",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: R Markdown</span>"
    ]
  },
  {
    "objectID": "capitulos/02_Rmarkdown.html#detalles-espec√≠ficos-para-pdf",
    "href": "capitulos/02_Rmarkdown.html#detalles-espec√≠ficos-para-pdf",
    "title": "4¬† Comunicaci√≥n de Resultados: R Markdown",
    "section": "4.6 Detalles espec√≠ficos para pdf",
    "text": "4.6 Detalles espec√≠ficos para pdf\n\nSi queremos producir documentos en formato PDF desde RStudio, necesitamos tener instalado LaTeX en nuestra computadora‚Ä¶ pero ¬øqu√© es LaTeX? Seg√∫n su propia web, LaTeX (pronunciado latech) es un sistema para preparaci√≥n de documentos ‚Äúde alta calidad‚Äù.\nIncluye herramientas dise√±adas para producir muchos tipos de documentaci√≥n t√©cnica, gracias a lo cual se ha convertido en el programa est√°ndar dentro del √°mbito acad√©mico y, sobre todo, de la divulgaci√≥n cient√≠fica (especialmente entre las ciencias duras).\n\n\n\n\n\n\n\n\n\n\n\nLa principal diferencia entre LaTeX y otros sistemas de generaci√≥n de documentos de texto, como por ejemplo Word, puede resumirse en dos puntos:\n\nEn Word, lo que escribo (lo que veo en la pantalla) es lo que obtengo cuando guardo el documento\nCon LaTeX no obtengo lo mismo que veo, sino que describo c√≥mo quiero que luzca el documento mediante comandos espec√≠ficos\n\nAl igual que R y RStudio, LaTeX es un software gratuito y de distribuci√≥n libre. Una muestra de la gran cantidad de documentos que podemos crear mediante LaTeX puede consultarse en Overleaf, donde se listan ejemplos de libros, curr√≠culums, posters, tesis y muchos otros formatos.\n\n\n4.6.1 Instalaci√≥n de LaTeX\n\nLa descarga y posterior instalaci√≥n de LaTeX ha sido siempre proceso generalmente tedioso que puede variar mucho de una PC a otra, sobre todo debido a configuraciones de red, versiones de sistemas operativos, permisos para agregar paquetes, etc.\nPara usuarios/as de Windows, la manera m√°s recomendable de instalar LaTeX es a trav√©s de MiKTeX, una especie de ‚Äúdistribuidor oficial‚Äù. Para usuarios/as de otros sistemas operativos, sugerimos consultar las mejores opciones en la web oficial del proyecto LaTeX, o bien aqu√≠.\nSin embargo, quienes usan R no tienen de qu√© preocuparse. Se puede usar R para instalar una distribuci√≥n de LaTeX minimalista que funciona como un encanto, con estos pasos:\n\n\n# Primero, instal√° el paquete tinytex:\ninstall.packages(\"tinytex\")\n# Luego, instal√° LaTeX corriendo en R:\ntinytex::install_tinytex()\n\n\nUna vez instalado LaTeX (ya sea por fuera de R o con este paquete) no es necesario abrir este programa para poder utilizarlo, ya que RStudio se comunicar√° directamente con √©l detr√°s de escena, tal como lo hace con R.\nCabe mencionar nuevamente a Overleaf, que nos ofrece un editor online de LaTeX totalmente gratuito (requiere que nos registremos definiendo usuario y contrase√±a) por si queremos hacer cosas en LaTeX sin instalar nada o en forma colaborativa.\n\n\n\n4.6.2 Opciones para LaTeX\n\nLa principal diferencia con lo visto hasta aqu√≠ es que en el encabezado YAML vamos a tener que especificar el tipo de salida que estamos buscando:\n\n\n---\ntitle: \"Mi Primer Markdown en PDF\"\nsubtitle: \"AED | Lic. en Estad√≠stica | FCEyE | UNR\"\nauthor: \"Diego & Iv√°n\"\ndate: \"Agosto 2024\"\noutput: pdf_document\n---\n\n\nPara salidas en PDF, las opciones de personalizaci√≥n del YAML Metadata se multiplican. Algunas de las m√°s comunes son:\n\nfontsize: tama√±o de la fuente (10pt, 11pt, 12pt)\ngeometry: m√°rgenes, orientaci√≥n de la hoja, tama√±o del papel (a4paper, letterpaper, etc.)\ndocumentclass: tipo de documento (article, report, book, etc.)\n\n\n\n\n\nAl igual que R, el sistema LaTeX depende en gran medida de funciones que se encuentran disponibles en paquetes que deberemos instalar a medida que sean necesarios. La inclusi√≥n de paquetes puede realizarse directamente en el encabezado, siguiendo el formato \\usepackage[opciones]{nombre_del_paquete}.\nDurante la instalaci√≥n, es posible configurar LaTeX para que los paquetes mencionados dentro del archivo que estamos ejecutando se instalen autom√°ticamente, ahorr√°ndonos la molestia de hacerlo manualmente (como en RStudio):\n\n\n---\ntitle: \"Mi Primer Markdown en PDF\"\nsubtitle: \"AED | Lic. en Estad√≠stica | FCEyE | UNR\"\nauthor: \"Diego & Iv√°n\"\ndate: \"Agosto 2024\"\nfontsize: 12pt\ngeometry: a4paper\ndocumentclass: article\noutput: pdf_document\nheader-includes:\n  - \\usepackage[spanish]{babel}\n---\n\n\nEn este caso, estamos utilizando el paquete babel con la opci√≥n spanish para que ciertos aspectos del documento se generen en idioma espa√±ol.\nUn comentario al paso: si lo que necesitamos es crear tablas, las funciones ya mencionadas del paquete kableExtra tambi√©n ofrecen opciones espec√≠ficas para trabajar con LaTeX y poder generar lo que se necesita. Tambi√©n podemos generar la tabla en otro entorno, como el ya mencionado Tables Generator, y pegar el c√≥digo de LaTeX directamente en el Rmd.\n\n\n\n4.6.3 Diapositivas\n\nUn formato √∫til de salida PDF es la presentaci√≥n de diapositivas, la cual estamos acostumbrados a crear mediante programas como PowerPoint. En este caso la opci√≥n que debemos elegir en el men√∫ es Presentation y luego PDF (Beamer):\n\n\n\n\n\n\n\n\n\n\n\nEl encabezado de nuestro Rmd luce as√≠:\n\n\n---\ntitle: \"Mi Primer Documento Beamer\"\nsubtitle: \"An√°lisis Exploratorio de Datos\"\nauthor: \"Diego & Iv√°n\"\ndate: \"Lic. en Estad√≠stica - FCEyE - UNR\"\noutput: beamer_presentation\n---\n\n\nSi bien los comandos de LaTeX presentados en este tutorial son v√°lidos tanto para reportes PDF como para diapositivas, diagramar informes o art√≠culos es totalmente diferente a preparar una presentaci√≥n en diapositivas.\nDe forma exageradamente resumida podemos remarcar ciertas ventajas y desventajas al comparar las estructuras de estos diversos formatos:\n\nVentajas de utilizar Beamer: documento m√°s compacto, el formato diapositiva permite una mejor separaci√≥n de ideas\nDesventajas de utilizar Beamer: hay que dedicarle mucho tiempo a organizar c√≥digo, texto e im√°genes para lograr que algunas ideas entren en una misma diapositiva\n\nEn Beamer, podemos crear una nueva diapositiva mediante encabezados de primer (#) o segundo orden (##), o bien con tres asteriscos (***) o puntos (---) consecutivos.\n\n# Titulo de la Diapo 1\nTexto de la diapositiva 1\n\n# Titulo de la Diapo 2\nTexto de la diapositiva 2\n\n***\nTexto de la diapositiva 3 (esta diapo no tiene t√≠tulo)\n\nLas presentaciones en Beamer se caracterizan por contar con una gran cantidad de temas (themes) disponibles para personalizar el aspecto de las diapositivas, con respecto a fuentes, colores y dem√°s formatos.\nEn el encabezado del documento podemos definir los temas a utilizar de la siguiente manera:\n\n\n---\ntitle: \"Mi Primer Documento Beamer\"\nsubtitle: \"An√°lisis Exploratorio de Datos\"\nauthor: \"Diego & Iv√°n\"\ndate: \"Lic. en Estad√≠stica - FCEyE - UNR\"\noutput: beamer_presentation\ntheme: \"Madrid\"\ncolortheme: \"orchid\"\nfonttheme: \"serif\"\n---\n\n\nUna lista de los temas disponibles, tanto generales como de colores y fuentes, puede consultarse en esta web.\nEn la siguiente imagen podemos apreciar el aspecto de las diapositivas generadas con el tema Madrid, color orchid y fuente serif:",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: R Markdown</span>"
    ]
  },
  {
    "objectID": "capitulos/02_Rmarkdown.html#comentarios-finales",
    "href": "capitulos/02_Rmarkdown.html#comentarios-finales",
    "title": "4¬† Comunicaci√≥n de Resultados: R Markdown",
    "section": "4.7 Comentarios finales",
    "text": "4.7 Comentarios finales\n\nCon tantos t√©rminos dando vueltas (Markdown, RMarkdown, Knit, Pandoc, html, LaTeX‚Ä¶ üòñ), lo natural es perderse y no saber qui√©n es qui√©n ni qu√© hace qu√©.\nLo bueno es que en general podemos usar todo esto sin tenerlo muy en claro, pero ac√° van algunas aclaraciones solo para los que est√©n interesados en saber m√°s.\n\n\n4.7.1 Lenguajes de Marcado Ligero, Markdown y R Markdown\n\nUn lenguaje de marcado ligero (markup language) es un sistema estandarizado con reglas para insertar s√≠mbolos en un documento de texto plano para controlar su estructura, formato y relaci√≥n entre sus partes.\nLos s√≠mbolos que se utilizan para este ‚Äúmarcado‚Äù son caracteres b√°sicos interpretables por alg√∫n dispositivo (computadora, impresora, navegador, etc.). Un documento con marcado ligero tiene entonces dos tipos de texto: texto para ser mostrado y caracteres que controlan la forma de mostrarlo.\nDos lenguajes de marcado ligero muy conocidos y utilizados, aunque no muy sencillos de usar, son XML (Extensive Markup Language) y HTML (Hypertext Markup Language).\nMarkdown es un lenguaje de marcado ligero muy sencillo de usar que s√≥lo emplea caracteres simples (como numerales o asteriscos) para indicar el formato y la estructura del texto. Surgi√≥ con la idea de simplificar algunos aspectos del lenguaje HTML, de modo que sea m√°s f√°cil editar contenido para p√°ginas web.\nLa idea de su desarrollador, John Gruber, era que sea una sintaxis f√°cil de escribir, pero sobre todo de leer. A diferencia de lo que pasa con HTML, tranquilamente podemos abrir un documento marcado con Markdown (.md) y leer su texto sin problemas.\nCon el tiempo fueron surgiendo varios derivados, haciendo que no haya una sintaxis √∫nica de Markdown. Por ejemplo:\n\nPandoc Markdown es el nombre de una de estas versiones que extienden Markdown con sintaxis para incluir tablas, listas, pies de p√°gina, citas, etc.\nR Markdown se basa en Pandoc Markdown pero agrega sus propias reglas para poder incluir bloques de c√≥digo de R y reglas, tanto para controlar su ejecuci√≥n como la forma en la que se muestran los resultados. Los documentos escritos en R Markdown son de extensi√≥n .Rmd (.qmd desde el lanzamiento de Quarto). Este lenguaje est√° implementado en el paquete rmarkdown.\n\nAdem√°s de RStudio/Posit, algunas compa√±√≠as que tambi√©n utilizan Markdown son OpenAI (desarrolladora de ChatGPT), Discord, GitHub, Microsoft, Mozilla, entre otras.\n\n\n\n4.7.2 El proceso detr√°s de R Markdown\n\nUna vez que hemos creado un archivo Rmd siguiendo las reglas de R Markdown y estamos listos para producir el resultado final, hacemos clic en el bot√≥n Knit o, equivalentemente, corremos la funci√≥n render() del paquete rmarkdown.\nEsta acci√≥n genera un proceso de dos etapas:\n\nEl paquete knitr toma al archivo, identifica cu√°les son las porciones de c√≥digo a ejecutar, lo eval√∫a, toma los resultados y los ‚Äúincrusta‚Äù en el archivo siguiendo las reglas de markdown. Es decir, genera un archivo .md intermedio que no vemos, ni nos interesa.\nLuego viene Pandoc, toma el archivo .md y lo convierte en un archivo de salida con el formato deseado: .html, .pdf o .docx, entre otros. Este programa ya viene instalado con RStudio, y lo mencionamos antes porque, adem√°s de convertir los .md en el formato que queramos, es el software que implementa la versi√≥n extendida del lenguaje Pandoc‚Äôs Markdown.\nCuando el formato de salida es un PDF, hay un paso m√°s. Pandoc convierte el .md en un archivo .tex, que sigue la sintaxis de LaTeX (por default este archivo es elimnado pero podr√≠amos pedir que se conserve). Para convertir el .tex a un .pdf, se necesita que venga uno de los motores de compilaci√≥n de LaTeX para hacer su tarea. Por defecto, se usa el motor pdflatex, pero hay otros disponibles (xelatex o lualatex). De estas instalaciones se encarga, por ejemplo, tinytex.\n\n¬°Voil√†! Con esos pasos m√°gicos tenemos nuestro ansiado archivo. Debajo vemos un esquema que representa el proceso de compilaci√≥n:\n\n\n\n\n\n\n\n\n\n\n\n\n4.7.3 Otros recursos relacionados al mundo de R Markdown\nSi ten√©s ganas de seguir aprendiendo sobre R Markdown, pod√©s consultar esta peque√±a lista de gu√≠as y tutoriales:\n\nSitio oficial de R Markdown\nR Markdown - The Definitive Guide (Libro de Yihui Xie)\nGu√≠a de Referencia en la web de RStudio\nMachete en la web de RStudio\nTips para mejorar el aspecto de un documento R Markdown\nPaquete knitr\nPaquete bookdown: para escribir y publicar nuestros propios libros desde R. Incluye formatos de salida HTML, PDF, ePub o Kindle, estos dos √∫ltimos para lectores de ebooks. El libro creado se puede hospedar de forma gratuita y sencilla en GitHub e integrarse a plataformas de Moodle.\nPaquete blogdown: permite desarrollar p√°ginas web desde R.\nPaquete learnr: permite transformar documentos Rmd en tutoriales interactivos para ser usados como material did√°ctico.\nPaquete exams: bas√°ndose en R Markdown, permite generar autom√°ticamente ejercicios para ex√°menes de Moodle, con la posibilidad de no s√≥lo emplear valores aleatorios sino tambi√©n preguntas aleatorias dentro de un mismo enunciado.\nTutoriales de gganimate: Post en datanovia.com, Vi√±etas del paquete y Laboratorio de experimentaci√≥n de rOpenSci.",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>4</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: R Markdown</span>"
    ]
  },
  {
    "objectID": "capitulos/02_reportes_parametrizados.html",
    "href": "capitulos/02_reportes_parametrizados.html",
    "title": "5¬† Comunicaci√≥n de Resultados: Reportes Parametrizados",
    "section": "",
    "text": "5.1 Datos de Cultivos\nlibrary(readxl)\ncultivos &lt;- read_excel(\"../data/unidad02/cultivos.xlsx\", na = \"-\")\nhead(cultivos, 10)\n\n# A tibble: 10 √ó 8\n   prov         dpto      cultivo campa√±a sup_sembrada sup_cosechada  prod  rend\n   &lt;chr&gt;        &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 BUENOS AIRES 25 DE MA‚Ä¶ Ajo     1969/70            3             3    10  3333\n 2 BUENOS AIRES 25 DE MA‚Ä¶ Ajo     1970/71            1             1     3  3000\n 3 BUENOS AIRES 25 DE MA‚Ä¶ Alpiste 1969/70          500           400   240   600\n 4 BUENOS AIRES 25 DE MA‚Ä¶ Alpiste 1970/71          150           130    78   600\n 5 BUENOS AIRES 25 DE MA‚Ä¶ Alpiste 1975/76          350           350   315   900\n 6 BUENOS AIRES 25 DE MA‚Ä¶ Alpiste 1976/77          250           200   240  1200\n 7 BUENOS AIRES 25 DE MA‚Ä¶ Alpiste 1977/78          150           150   180  1200\n 8 BUENOS AIRES 25 DE MA‚Ä¶ Alpiste 1978/79          100           100   130  1300\n 9 BUENOS AIRES 25 DE MA‚Ä¶ Alpiste 1979/80          100           100   120  1200\n10 BUENOS AIRES 25 DE MA‚Ä¶ Alpiste 1980/81          100           100   120  1200\nProducci√≥n de Centeno seg√∫n provincia\n\n\nProvincia\n2018/19\n2019/20\n% Var.\n\n\n\n\nBUENOS AIRES\n22.688\n19.863\n-12,45\n\n\nCORDOBA\n24.648\n183.144\n643,04\n\n\nLA PAMPA\n28.140\n5.630\n-79,99\n\n\nSAN LUIS\n11.090\n12.065\n8,79\n\n\nSANTA FE\n0\n499\nInf\n\n\nTOTAL ARGENTINA\n86.566\n221.201\n155,53",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Reportes Parametrizados</span>"
    ]
  },
  {
    "objectID": "capitulos/02_reportes_parametrizados.html#datos-de-cultivos",
    "href": "capitulos/02_reportes_parametrizados.html#datos-de-cultivos",
    "title": "5¬† Comunicaci√≥n de Resultados: Reportes Parametrizados",
    "section": "",
    "text": "En esta clase trabajaremos con el conjunto de datos disponible en la planilla de Excel cultivos.xlsx.\nLos datos fueron extra√≠dos del sitio web https://datosestimaciones.magyp.gob.ar/, dependiente del Ministerio de Agricultura, Ganader√≠a y Pesca de Argentina.\nSe trata de una serie hist√≥rica de indicadores agr√≠colas desagregada a nivel departamental y provincial, para diferentes tipos de cultivos existentes en Argentina (soja, trigo, cebada, ma√≠z, sorgo, etc.) desde 1969 hasta 2021.\nLos indicadores presentes en la base son 4:\n\nsup_sembrada: superficie sembrada (en hect√°reas) del cultivo, para un departamento y campa√±a agr√≠cola en particular.\nsup_cosechada: superficie cosechada (en hect√°reas), debe ser menor o igual a la superficie sembrada.\nprod: producci√≥n (en toneladas) del cultivo alcanzada en ese departamento y campa√±a en particular.\nrend: rendimiento (en kg. por hect√°rea), se calcula como la raz√≥n entre producci√≥n y superficie cosechada, multiplicada por mil.\n\nImportamos la base, indicando que los valores perdidos est√°n representados por un gui√≥n, y vemos sus primeras 10 filas:\n\n\n\n\nSupongamos que nos encargan la tarea de generar un informe para cada cultivo presente en la base, analizando c√≥mo evolucion√≥ su producci√≥n a nivel nacional mediante un gr√°fico de l√≠nea, y comparando las campa√±as 2018/19 y 2019/20 entre provincias.\nPor ejemplo, para el centeno obtenemos los siguientes resultados:\n\n\n\n\nEl template para generar un reporte en HTML que incluye el gr√°fico y la tabla mostrados arriba se proporciona en el archivo 04_template.Rmd.",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Reportes Parametrizados</span>"
    ]
  },
  {
    "objectID": "capitulos/02_reportes_parametrizados.html#reportes-parametrizados",
    "href": "capitulos/02_reportes_parametrizados.html#reportes-parametrizados",
    "title": "5¬† Comunicaci√≥n de Resultados: Reportes Parametrizados",
    "section": "5.2 Reportes Parametrizados",
    "text": "5.2 Reportes Parametrizados\n\nLos reportes parametrizados resultan √∫tiles cuando tenemos que generar muchos documentos similares entre s√≠, con un formato en com√∫n, donde √∫nicamente cambian algunas variables puntuales.\nLa base de cultivos que estamos analizando es buen ejemplo de esta situaci√≥n, ya que necesitamos generar un reporte individual para cada uno de los 38 cultivos disponibles.\nExisten muchas maneras de resolver esta tarea, entre ellas:\n\nGenerar un archivo Rmd para cada cultivo, copiando y pegando 38 veces el mismo c√≥digo en 38 archivos diferentes.\nGenerar un √∫nico archivo Rmd e ir cambiando los datos cada vez que genero un nuevo reporte.\nGenerar un √∫nico archivo Rmd, parametrizarlo y dejar que R haga el trabajo pesado.\n\nEvidentemente vamos a preferir la √∫ltima opci√≥n, pero‚Ä¶ ¬øc√≥mo se logra esto?\nUna buena estrategia es empezar generando un archivo .Rmd para un √∫nico cultivo (el template). Una vez que estamos conformes con el resultado, es f√°cil ver que, para generar el reporte de los restantes cultivos, lo √∫nico que hay que hacer es proveer otro nombre a la hora de filtrar la base.\nPor lo tanto, podemos pensar al nombre del cultivo como un par√°metro que tomar√° diferentes valores de acuerdo al archivo que deseemos generar. Podemos llamar a este par√°metro nombre_cultivo y utilizarlo como valor de entrada del archivo Rmd a generar.\nDentro del template, la presencia del par√°metro nombre_cultivo se indica en el encabezado del documento, de la siguiente manera:\n\n---\ntitle: T√≠tulo\nauthor: Nombre\ndate: Fecha\noutput: html_document\nparams: \n nombre_cultivo: Centeno\n---\n\nLuego, en el cuerpo del .Rmd hacemos referencia a este valor con params$nombre_cultivo. Por ejemplo:\n\n\ncenteno &lt;- cultivos %&gt;% filter(cultivo == params$nombre_cultivo)\n\n\nPara evitar tener que cambiar a mano el valor asignado a nombre_cultivo, creamos otro script de R desde el cual mandamos a generar todos los reportes mediante un loop.\nLa funci√≥n que debemos emplear dentro del loop es render(), perteneciente al paquete rmarkdown, la cual tiene el mismo efecto que apretar el bot√≥n Knit en archivos Rmd o el bot√≥n Render para archivos qmd.\nAl momento de emplear esta funci√≥n, algunos de los argumentos que debemos definir son:\n\nruta y nombre del archivo donde se encuentra alojado el template\nruta y nombre del archivo donde deseamos guardar el resultado\nformato de salida (HTML, pdf, etc.)\nlista de par√°metros a emplear\n\nEjemplo:\n\n\nlibrary(rmarkdown)\n\nrender(\n input = \"MiTemplate.Rmd\",\n output_file = \"MiReporte.html\",\n output_format = \"html_document\",\n params = list(Parametro1 = valor1, Parametro2 = valor2)\n )\n\n\n\n\n\n\n\nTrabajo en Equipo\n\n\n\nCrear un loop en R que genere un reporte para cada posible cultivo, empleando el template provisto. El nombre del archivo generado debe coincidir con el del cultivo correspondiente (ejemplo: girasol.html, mandarina.html, etc.). El formato de salida puede ser HTML, PDF o Word.",
    "crumbs": [
      "Unidad 2. R Markdown",
      "<span class='chapter-number'>5</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Reportes Parametrizados</span>"
    ]
  },
  {
    "objectID": "capitulos/03.html",
    "href": "capitulos/03.html",
    "title": "Unidad 3. Cuali",
    "section": "",
    "text": "Presentaci√≥n de la Unidad 3.\n\nP√°gina en construcci√≥n.",
    "crumbs": [
      "Unidad 3. Cuali"
    ]
  },
  {
    "objectID": "capitulos/03_georreferencia.html",
    "href": "capitulos/03_georreferencia.html",
    "title": "6¬† Georreferencia",
    "section": "",
    "text": "6.1 Introducci√≥n",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Georreferencia</span>"
    ]
  },
  {
    "objectID": "capitulos/03_georreferencia.html#introducci√≥n",
    "href": "capitulos/03_georreferencia.html#introducci√≥n",
    "title": "6¬† Georreferencia",
    "section": "",
    "text": "La Georreferencia es una disciplina ligada al an√°lisis de datos recolectados a nivel geogr√°fico. Esta caracter√≠stica implica que la informaci√≥n que poseemos puede visualizarse de manera m√°s eficiente desde una perspectiva espacial, es decir, representando los datos en mapas y no mediante gr√°ficos, tablas u otros instrumentos.\nEjemplo: deseamos representar los casos confirmados de Covid-19 en Argentina. Existen dos enfoques desde los cuales se pueden analizar estos datos geogr√°ficamente:\n\nMapas Coropl√©ticos (choropleth maps): utilizan paletas de colores para representar una variable a nivel geogr√°fico, asignando un color a cada unidad representada (pa√≠s, provincia, departamento, etc.) en base a los valores que le corresponden. Las variables de inter√©s en estos casos pueden ser de tipo cualitativo (por ej. nivel de riesgo epidemiol√≥gico) o bien cuantitativo (cantidad de casos, tasa de positividad en tests de Covid-19, etc.). Bajo este enfoque, lo geogr√°fico se impone √∫nicamente como medio de visualizaci√≥n y no como variable de inter√©s primario.\nMarcadores: consiste en se√±alar coordenadas espec√≠ficas mediante un punto o marcador, para mostrar d√≥nde ocurren los eventos que estamos estudiando. En estos casos el inter√©s est√° puesto en visualizar qu√© tan comunes son ciertos eventos y c√≥mo se ubican espacialmente. En el ejemplo de Covid-19, podemos marcar los domicilios de las personas contagiadas para encontrar focos de infecci√≥n a partir de la distribuci√≥n geogr√°fica de los puntos.\n\nEn esta clase repasaremos casos de aplicaci√≥n de ambos enfoques.\n\n\n6.1.1 Proyecciones\n\nUn concepto fundamental a la hora de trabajar con este tipo de datos es el de proyecci√≥n geogr√°fica. Todo punto que se encuentre sobre un plano puede representarse mediante coordenadas, consistentes en un par de n√∫meros \\((x,y)\\) que miden la distancia de ese punto con respecto al origen.\nLa forma en que se calculan las distancias, y la ubicaci√≥n del origen, dependen del Sistema de Referencia de Coordenadas (CRS) utilizado. El CRS m√°s com√∫n es WGS84, el cual representa a la Tierra como un elipsoide y utiliza las siguientes definiciones:\n\nLatitud: coordenada que especifica la ubicaci√≥n norte-sur de cualquier punto sobre la tierra. Var√≠a desde 90¬∞ en el polo norte hasta -90¬∞ en el polo sur. A las l√≠neas de latitud constante se las llama ‚Äúparalelos‚Äù. La latitud 0¬∞ corresponde a l√≠nea del Ecuador, la cual divide al planeta en los hemisferios norte y sur.\nLongitud: coordenada que especifica la ubicaci√≥n este-oeste de cualquier punto sobre la tierra. A las l√≠neas de longitud constante se las llama ‚Äúmeridianos‚Äù. La longitud 0¬∞ corresponde al meridiano de Greenwich, en Inglaterra; los restantes meridianos se miden hasta el 180¬∞ (direcci√≥n este) y -180¬∞ (direcci√≥n oeste), uni√©ndose sobre la L√≠nea Internacional del Cambio de Fecha (anti-meridiano), ubicada sobre el oc√©ano Pac√≠fico.\n\nDado que la tierra es esf√©rica, representar latitudes y longitudes usando ejes cartesianos no es recomendable, ya que distorsiona mucho las √°reas, formas y distancias. Para sobrellevar este problema se aplican proyecciones no lineales que tratan de minimizar estas distorsiones (no es posible conservar todas las propiedades al mismo tiempo; por ejemplo, si respetamos las distancias reales, las formas y las superficies de las regiones se distorsionan).\nDebajo se muestran algunos ejemplos de proyecciones:\n\n\n\n\n\n\n\n\n\n\n\n\n\nUna de las proyecciones m√°s populares es la de Mercator. Si bien fue utilizada por Google Maps hasta 2018, posee grandes distorsiones en cuanto al √°rea de las regiones representadas. Por ejemplo, vemos a Groenlandia aproximadamente del mismo tama√±o que Am√©rica del Sur, cuando en realidad sus superficies son de aproximadamente 2 y 18 millones de \\(km^2\\) respectivamente:\n\n\n\n\n\n\n\n\n\n\n\n\n6.1.2 Georreferencia con R\n\nEn los √∫ltimos a√±os se produjo un boom en el uso de Sistemas de Informaci√≥n Geogr√°fica (SIGs) para el an√°lisis de informaci√≥n espacial. Si bien programas como ArcGIS o QGIS son muy populares en este contexto, autores como Brunsdon & Comber (2019) y Lovelace et al.¬†(2019) remarcan que la reproducibilidad de los an√°lisis se ve comprometida debido a las interfaces gr√°ficas utilizadas por esos productos.\nPuntualmente, las interfaces amigables para el usuario (user-friendly), con sus men√∫s y opciones clickeables, atentan contra el trabajo colaborativo y la replicaci√≥n del proceso de investigaci√≥n. Por este motivo creemos que es importante trabajar estos datos desde la perspectiva del lenguaje R.\nEl ecosistema de R ha sido un terreno extremadamente f√©rtil para el desarrollo y crecimiento de paquetes ligados al an√°lisis geocomputacional. En este link se listan unos 200 paquetes referidos a esta tem√°tica, entre los que se destacan sp, gstat, rgdal, stars, maptools, spatial, raster, mapview y RgoogleMaps, entre tantos otros.\nEn particular, nosotros emplearemos los siguientes paquetes a lo largo de la clase:\n\n\n#Mapas\nlibrary(sf)\nlibrary(tmap)\nlibrary(leaflet)\nlibrary(spData)\n\n#Lectura y manipulaci√≥n de datos\nlibrary(readxl)\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(htmltools)\n\n\nEste apunte est√° organizado de la siguiente manera:\n\nComenzaremos nuestro recorrido repasado los recursos disponibles online para descarga de mapas.\nLuego nos centraremos en el paquete sf, el cual nos brinda la posibilidad de manipular datos geoespaciales, integr√°ndolo con ggplot2 para producir mapas est√°ticos.\nPor √∫ltimo, estudiaremos las funciones m√°s importantes de tmap y leaflet, capaces de generar mapas din√°micos que le otorgan un salto de calidad a nuestro trabajo.",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Georreferencia</span>"
    ]
  },
  {
    "objectID": "capitulos/03_georreferencia.html#buscando-mapas-en-la-web",
    "href": "capitulos/03_georreferencia.html#buscando-mapas-en-la-web",
    "title": "6¬† Georreferencia",
    "section": "6.2 Buscando Mapas en la Web",
    "text": "6.2 Buscando Mapas en la Web\n\nExisten muchas p√°ginas desde donde podemos descargar archivos con informaci√≥n geoespacial para utilizar en nuestros mapas. A continuaci√≥n repasaremos algunas de ellas.\n\n\n6.2.1 INDEC\n\nEn la web del Instituto Nacional de Estad√≠stica y Censos (INDEC) de la Rep√∫blica Argentina hay una secci√≥n dedicada a la Cartograf√≠a. Desde all√≠ podemos descargar informaci√≥n con distintos niveles de jerarqu√≠a o subdivisiones:\n\nMapas provinciales\nMapas departamentales\nLocalidades censales\nRadios censales\nEtc.\n\n\n\n\n\nEn general, las divisiones geogr√°ficas empleadas por INDEC resultan de inter√©s a la hora de analizar datos recolectados durante los Censos de poblaci√≥n, o bien datos pertenecientes a la Encuesta Permanente de Hogares (EPH).\n\n\n\n6.2.2 IGN\n\nEl Instituto Geogr√°fico Nacional que depende del Ministerio de Defensa de la Rep√∫blica Argentina es la fuente de datos oficial en todo lo que respecta a la cartograf√≠a de nuestro pa√≠s.\nSu p√°gina web ofrece una gran variedad de recursos, entre los que se incluyen mapas de todo tipo, im√°genes satelitales, capas de informaci√≥n geoespacial, etc.\nEl archivo de formato shapefile que usaremos en los ejemplos presentados a continuaci√≥n puede descargarse desde la web del IGN. Posee un peso de aproximadamente 34 MB y contiene los l√≠mites de todas las subdivisiones administrativas (departamentos o partidos) de las provincias argentinas.\n\n\n\n6.2.3 GADM\n\nUna web que ofrece mapas pol√≠ticos de casi todos los pa√≠ses y territorios a nivel mundial es GADM. Si bien es un recurso gratuito, sus mapas poseen una resoluci√≥n mayor a la de software pagos como ArcGIS.\nExisten tres niveles de mapas en GADM:\n\nPa√≠ses\nPa√≠ses con provincias\nPa√≠ses con sus provincias y subdivisiones menores (departamentos, partidos, etc.)",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Georreferencia</span>"
    ]
  },
  {
    "objectID": "capitulos/03_georreferencia.html#mapas-est√°ticos-con-sf",
    "href": "capitulos/03_georreferencia.html#mapas-est√°ticos-con-sf",
    "title": "6¬† Georreferencia",
    "section": "6.3 Mapas Est√°ticos con sf",
    "text": "6.3 Mapas Est√°ticos con sf\n\nComo siempre, el primer paso en cualquier proceso de an√°lisis de datos consiste en importar la base. Para el caso de informaci√≥n geogr√°fica, podemos emplear la funci√≥n read_sf() del paquete sf.\nRecordemos que el archivo a leer posee formato .shp (shapefile) y contiene los l√≠mites de cada departamento (subdivisiones provinciales) de nuestro pa√≠s. Suponiendo que este archivo se llama departamento y se encuentra almacenado en una carpeta llamada argentina dentro de nuestro directorio de trabajo, la sintaxis a emplear para importarlo es la siguiente:\n\n\nmi_mapa &lt;- read_sf(\n  dsn = \"../data/unidad03/argentina\", #dsn: carpeta donde est√° el archivo shp\n  layer = \"departamento\" #layer: nombre del archivo shp\n  )\n\n\nPara los ejemplos que vienen a continuaci√≥n, trabajaremos √∫nicamente con los departamentos de la Provincia de Santa Fe:\n\n\n#fdc: nombre del ente gubernamental que recolect√≥ la informaci√≥n geogr√°fica\n#cada provincia posee uno propio\nsantafe &lt;- mi_mapa %&gt;% \n  filter(fdc == \"Servicio de Catastro e Informaci√≥n Territorial\") %&gt;% \n  mutate(Nombre = str_wrap(nam, 8)) #separamos nombres largos en 2 lineas\n\n\nAnalicemos la estructura de este objeto:\n\n\nstr(santafe)\n\nsf [19 √ó 10] (S3: sf/tbl_df/tbl/data.frame)\n $ gid     : int [1:19] 175 176 170 171 172 173 174 429 430 431 ...\n $ objeto  : chr [1:19] \"Departamento\" \"Departamento\" \"Departamento\" \"Departamento\" ...\n $ fna     : chr [1:19] \"Departamento Vera\" \"Departamento 9 de Julio\" \"Departamento Las Colonias\" \"Departamento San Justo\" ...\n $ gna     : chr [1:19] \"Departamento\" \"Departamento\" \"Departamento\" \"Departamento\" ...\n $ nam     : chr [1:19] \"Vera\" \"9 de Julio\" \"Las Colonias\" \"San Justo\" ...\n $ in1     : chr [1:19] \"82133\" \"82077\" \"82070\" \"82112\" ...\n $ fdc     : chr [1:19] \"Servicio de Catastro e Informaci√≥n Territorial\" \"Servicio de Catastro e Informaci√≥n Territorial\" \"Servicio de Catastro e Informaci√≥n Territorial\" \"Servicio de Catastro e Informaci√≥n Territorial\" ...\n $ sag     : chr [1:19] \"IGN\" \"IGN\" \"IGN\" \"IGN\" ...\n $ geometry:sfc_MULTIPOLYGON of length 19; first list element: List of 1\n  ..$ :List of 1\n  .. ..$ : num [1:75079, 1:2] -60.2 -59.8 -59.8 -59.8 -59.8 ...\n  ..- attr(*, \"class\")= chr [1:3] \"XY\" \"MULTIPOLYGON\" \"sfg\"\n $ Nombre  : chr [1:19] \"Vera\" \"9 de\\nJulio\" \"Las\\nColonias\" \"San\\nJusto\" ...\n - attr(*, \"sf_column\")= chr \"geometry\"\n - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA NA NA NA NA NA NA\n  ..- attr(*, \"names\")= chr [1:9] \"gid\" \"objeto\" \"fna\" \"gna\" ...\n\n\n\nLa √∫ltima columna del conjunto de datos, llamada geometry, es un objeto de clase sfc_MULTIPOLYGON donde se guardan las coordenadas que representan los l√≠mites de cada regi√≥n.\nLa primera fila del dataset, correspondiente al departamento de Vera, est√° conformada por una lista de 75.079 pares de puntos \\((x,y)\\) que, al ser conectados, construyen el contorno del departamento.\nEjemplo para el departamento Rosario:\n\n\nrosario &lt;- santafe$geometry[[11]] %&gt;% as.matrix() %&gt;% as.data.frame()\nhead(rosario)\n\n         V1        V2\n1 -60.80908 -32.82947\n2 -60.80886 -32.83369\n3 -60.80596 -32.83359\n4 -60.79912 -32.83334\n5 -60.79633 -32.83323\n6 -60.79540 -32.83319\n\nggplot(data = rosario) +\n  aes(x = V1, y = V2) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nPara poder graficar estos datos de manera directa, sin necesidad de extraer las coordenadas, podemos usar en conjunto los paquetes ggplot2 y sf.\nUna de las tantas capas que podemos agregar a un ggplot es geom_sf(), la cual toma un objeto con informaci√≥n espacial (en este caso la columna con clase sfc_MULTIPOLYGON) y une los puntos mediante l√≠neas, para graficar los l√≠mites geogr√°ficos de cada regi√≥n.\nVeamos a cada uno de los departamentos de Santa Fe representados por un color diferente, asociado a su propio nombre (fill = Nombre):\n\n\n#No hace falta mencionar a la columna 'geometry' ya que es el\n#nombre est√°ndar donde se guarda la informaci√≥n geogr√°fica en este tipo de bases\nggplot(data = santafe) +\n  aes(fill = nam) +\n  geom_sf() +\n  geom_sf_text(aes(label = Nombre), size = 2) +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n6.3.1 Datos de cultivos\n\nEn la visualizaci√≥n generada arriba la variable representada es categ√≥rica (nombre del departamento). Otra posible manera de crear mapas coropl√©ticos es asignar colores a variables num√©ricas, por ejemplo algunas de las que se encuentran en la base de cultivos que analizamos en clases anteriores.\n¬øC√≥mo podemos implementar esta idea? En primer lugar, importamos y manipulamos el conjunto de datos para elegir s√≥lo algunas variables de inter√©s:\n\n\ncultivos &lt;- read_excel(\"../data/unidad03/cultivos.xlsx\", na = \"-\")\n\nsoja_sf &lt;- cultivos %&gt;% \n    filter(\n      campa√±a == \"2019/20\",\n      prov == \"SANTA FE\",\n      cultivo == \"Soja total\"\n      ) %&gt;% \n  mutate(Soja = prod/1000) %&gt;% \n  select(Departamento = dpto, Soja)\n\n\nLa base resultante posee 19 filas, una para cada departamento santafesino, y datos sobre la producci√≥n de soja (en miles de toneladas) durante la campa√±a 2019/20:\n\n\n\n\n\n\n\nDepartamento\nSoja\n\n\n\n\n9 DE JULIO\n269.220\n\n\nBELGRANO\n530.474\n\n\nCASEROS\n759.772\n\n\nCASTELLANOS\n1030.429\n\n\nCONSTITUCION\n561.055\n\n\nGARAY\n9.000\n\n\nGENERAL LOPEZ\n2024.850\n\n\nGENERAL OBLIGADO\n86.490\n\n\nIRIONDO\n677.818\n\n\nLA CAPITAL\n81.200\n\n\nLAS COLONIAS\n667.804\n\n\nROSARIO\n196.280\n\n\nSAN CRISTOBAL\n414.891\n\n\nSAN JAVIER\n20.160\n\n\nSAN JERONIMO\n449.692\n\n\nSAN JUSTO\n265.702\n\n\nSAN LORENZO\n323.504\n\n\nSAN MARTIN\n982.996\n\n\nVERA\n48.630\n\n\n\n\n\n\n\n\n\n\nEl segundo paso consiste en unir esta informaci√≥n con aquella presente en el shapefile, lo cual puede hacerse usando la funci√≥n left_join() de dplyr. Dado que la llave (key) para unificar bases es el nombre del departamento, previamente llevamos a cabo un proceso de unificaci√≥n de escrituras:\n\n\n#Comparacion de nombres entre ambas bases:\n#cbind(sort(santafe$nam), sort(soja_sf$Departamento))\n\nsf_unido &lt;- santafe %&gt;% \n  mutate(\n    Departamento = str_to_upper(nam), #pasamos todos los nombres a may√∫scula\n    Departamento = chartr(\"√Å√â√ç√ì√ö\", \"AEIOU\", Departamento) #borramos tildes\n    ) %&gt;% \n  left_join(soja_sf)\n\n\nYa estamos en condiciones de comparar producciones de cultivos para los departamentos santafesinos. Veamos el caso de la Soja:\n\n\nggplot(data = sf_unido) +\n  aes(fill = Soja) +\n  geom_sf() +\n  geom_sf_text(aes(label = str_wrap(nam, 8)), size = 2) +\n  scale_fill_gradient(low = \"#E0ECF8\", high = \"#0174DF\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\nCualquier modificaci√≥n que deseemos aplicar sobre un mapa como este puede llevarse a cabo siguiendo las reglas correspondientes a gr√°ficos comunes y corrientes producidos por ggplot2.\n\n\n\n\n6.3.2 Trabajo en Equipo\n\nPara practicar la creaci√≥n de mapas vamos a usar el conjunto de datos world del paquete spData. Cada una de las 177 filas de esta base corresponde a un pa√≠s diferente, para los cuales se registran diversas variables: nombre, continente, superficie, poblaci√≥n, etc.\n\n\ndata(world) #Cargamos la base\nhead(world) #Vemos sus primeras 6 filas\n\nSimple feature collection with 6 features and 10 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -18.28799 xmax: 180 ymax: 83.23324\nGeodetic CRS:  WGS 84\n# A tibble: 6 √ó 11\n  iso_a2 name_long  continent region_un subregion type  area_km2     pop lifeExp\n  &lt;chr&gt;  &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;     &lt;chr&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 FJ     Fiji       Oceania   Oceania   Melanesia Sove‚Ä¶   1.93e4  8.86e5    70.0\n2 TZ     Tanzania   Africa    Africa    Eastern ‚Ä¶ Sove‚Ä¶   9.33e5  5.22e7    64.2\n3 EH     Western S‚Ä¶ Africa    Africa    Northern‚Ä¶ Inde‚Ä¶   9.63e4 NA         NA  \n4 CA     Canada     North Am‚Ä¶ Americas  Northern‚Ä¶ Sove‚Ä¶   1.00e7  3.55e7    82.0\n5 US     United St‚Ä¶ North Am‚Ä¶ Americas  Northern‚Ä¶ Coun‚Ä¶   9.51e6  3.19e8    78.8\n6 KZ     Kazakhstan Asia      Asia      Central ‚Ä¶ Sove‚Ä¶   2.73e6  1.73e7    71.6\n# ‚Ñπ 2 more variables: gdpPercap &lt;dbl&gt;, geom &lt;MULTIPOLYGON [¬∞]&gt;\n\n\n\n\n\nUsando funciones del paquete sf, graficar los pa√≠ses de Am√©rica del Sur asignando colores de acuerdo a su esperanza de vida. La paleta debe asignar el color rojo a valores bajos y el verde a valores altos de esta variable.\nResultado esperado:",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Georreferencia</span>"
    ]
  },
  {
    "objectID": "capitulos/03_georreferencia.html#mapas-din√°micos",
    "href": "capitulos/03_georreferencia.html#mapas-din√°micos",
    "title": "6¬† Georreferencia",
    "section": "6.4 Mapas Din√°micos",
    "text": "6.4 Mapas Din√°micos\n\nLos mapas est√°ticos, como los que estuvimos viendo hasta ahora, son √∫tiles pero en cierto sentido limitados: s√≥lo nos muestran una imagen fija, para un per√≠odo de tiempo dado, y no nos permiten cambiar la informaci√≥n graficada.\nPor suerte para nosotros, R ofrece un variado men√∫ de opciones a la hora de dar vida a nuestros mapas, permiti√©ndonos hacerlos din√°micos o interactivos. Esto implica que podemos modificar las variables o el √°rea a visualizar, tal como lo hacemos habitualmente con Google Maps o servicios similares.\n\n\n6.4.1 Paquete tmap\n\nUna de las opciones para crear este tipo de mapas en R es a trav√©s del paquete tmap. Esta librer√≠a emplea una sintaxis similar a la de ggplot2. Existe una analog√≠a entre las funciones de ambos paquetes; por ejemplo, ggplot() se convierte en tm_shape() para dar inicio al gr√°fico, las capas de tipo geom_ se llaman ahora tm_, etc.\nVeamos un ejemplo simple donde aplicamos tm_shape() para obtener un mapa coropl√©tico equivalente al anterior, donde comparamos la producci√≥n de soja para diferentes departamentos de Santa Fe.\nAlgunos detalles sobre el c√≥digo:\n\nUsamos tmap_mode(\"view\") para activar la funcionalidad interactiva de esta librer√≠a; si deseamos mapas est√°ticos ejecutamos tmap_mode(\"plot\").\nLa variable agregada con nombre ID almacena el texto que se mostrar√° en el mapa cada vez que pasamos el mouse sobre una regi√≥n determinada (se le puede dar formato usando lenguaje HTML).\nLa funci√≥n tm_basemap() se usa para elegir el tipo de mapa de fondo utilizado. La lista completa de opciones puede consultarse en esta web.\n\n\n\ntmap_mode(\"view\")\n\nsf_unido %&gt;% \n    mutate(ID = paste0(\"Depto. \", nam, \" - \", Soja, \" millones de tn.\")) %&gt;% \n    tm_shape() + \n    tm_fill(id = \"ID\", col = \"Soja\", palette = \"Oranges\", alpha = 0.75) +\n    tm_borders(\"red\", lwd = 2) + \n    tm_minimap() +\n    tm_basemap(\"OpenStreetMap\")\n\n\n\n\n\n\n\n\n6.4.2 Paquete leaflet\n\nleaflet es una librer√≠a JavaScript que permite crear mapas interactivos. Hoy en d√≠a es una de las herramientas m√°s populares en el campo de la visualizaci√≥n y georreferencia de datos. El paquete de R hom√≥nimo ofrece una forma simple de integrar RStudio con los mapas de este tipo.\n\n\n\n\n\n\n\n\n\n\n\nLos resultados que podemos obtener son similares a los anteriores. Algunos detalles a tener en cuenta:\n\nPara dar formato al argumento label (texto a mostrar cuando pasamos el mouse sobre cada regi√≥n) aplicamos lenguaje HTML.\nPara asociar valores num√©ricos con colores debemos generar una paleta de antemano, por ejemplo mediante la funci√≥n colorNumeric().\nEl mapa de fondo indicado en la funci√≥n addProviderTiles() puede elegirse, nuevamente, a partir de las alternativas disponibles en http://leaflet-extras.github.io/leaflet-providers/preview/.\n\n\n\ntextos &lt;- paste0(\n    \"&lt;b&gt;Departamento:&lt;/b&gt; \", \n    sf_unido$nam, \n    \"&lt;br&gt;&lt;b&gt;Producci√≥n de Soja (miles de tn.):&lt;/b&gt; \", \n    sf_unido$Soja\n    )\n\npaleta &lt;- colorNumeric(\n  palette = c(\"#04B404\", \"#DF0101\"), \n  domain = sf_unido$Soja\n  )\n\nsf_unido %&gt;% \n  leaflet() %&gt;%\n  addPolygons(\n    color = ~paleta(Soja), \n    label = ~lapply(as.list(textos), HTML), \n    weight = 2, \n    fillOpacity = 0.5\n    ) %&gt;% \n  addProviderTiles(\"NASAGIBS.ViirsEarthAtNight2012\")\n\n\n\n\n\n\n\nAclaraciones\n\nLa funci√≥n HTML() de htmltools indica al software que el texto evaluado debe entenderse, justamente, como lenguaje html:\n\n\nHTML(\"&lt;b&gt;Hola&lt;/b&gt;\") #con formato\n\nHola\n\nprint(\"&lt;b&gt;Hola&lt;/b&gt;\") #sin formato\n\n[1] \"&lt;b&gt;Hola&lt;/b&gt;\"\n\n\n\nPor otro lado, la funci√≥n colorNumeric() de leaflet genera escalas divergentes de colores, asociando valores num√©ricos con diferentes tonalidades. Veamos un ejemplo donde los posibles valores van del 1 al 9, y deseamos que la secuencia se extienda progresivamente desde el amarillo (valores bajos) hasta el marr√≥n (valores altos), pasando por el verde (punto medio):\n\n\npaleta_nueva &lt;- colorNumeric(\n  palette = c(\"yellow\", \"green\", \"brown\"),\n  domain = c(1, 9)\n)\n\nscales::show_col(paleta_nueva(1:9))\n\n\n\n\n\n\n\n\n\n\n6.4.3 Trabajo en Equipo\n\nGenerar un mapa como el siguiente, donde el objetivo es comparar la superficie (en \\(km^2\\)) de los pa√≠ses africanos, usando funciones del paquete leaflet.\nAyuda: la paleta de colores va de amarillo a rojo, y el nombre del mapa base es Esri.WorldImagery.",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Georreferencia</span>"
    ]
  },
  {
    "objectID": "capitulos/03_georreferencia.html#marcadores",
    "href": "capitulos/03_georreferencia.html#marcadores",
    "title": "6¬† Georreferencia",
    "section": "6.5 Marcadores",
    "text": "6.5 Marcadores\n\nPara ejemplificar este enfoque vamos a trabajar con un conjunto de datos que posee la ubicaci√≥n, medida en latitud y longitud, de todas las paradas de colectivo correspondientes al Sistema de Transporte Urbano de Pasajeros (TUP) de la ciudad de Rosario.\nLa base se obtuvo desde el portal de Datos Abiertos de la Municipalidad de Rosario.\nImportamos la base y seleccionamos algunas variables de inter√©s:\n\n\ntup &lt;- read_csv(file = \"../data/unidad03/paradas_tup_json.csv\") %&gt;% \n  select(lon = PUNTO_X, lat = PUNTO_Y, DISTRITO, PARADA) %&gt;% \n  mutate(\n    texto = paste0(\n      \"&lt;b&gt;N¬∞ Parada:&lt;/b&gt; \", PARADA,\n      \"&lt;br&gt;&lt;b&gt;Distrito:&lt;/b&gt; \", DISTRITO\n      )\n    ) %&gt;% \n  distinct()\n\n#Primeras filas\nhead(tup)\n\n# A tibble: 6 √ó 5\n    lon   lat DISTRITO PARADA texto                                           \n  &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;                                           \n1 -60.7 -32.9 NORTE      2540 &lt;b&gt;N¬∞ Parada:&lt;/b&gt; 2540&lt;br&gt;&lt;b&gt;Distrito:&lt;/b&gt; NORTE\n2 -60.7 -32.9 NORTE      1771 &lt;b&gt;N¬∞ Parada:&lt;/b&gt; 1771&lt;br&gt;&lt;b&gt;Distrito:&lt;/b&gt; NORTE\n3 -60.7 -32.9 NORTE      2539 &lt;b&gt;N¬∞ Parada:&lt;/b&gt; 2539&lt;br&gt;&lt;b&gt;Distrito:&lt;/b&gt; NORTE\n4 -60.7 -32.9 NORTE      2538 &lt;b&gt;N¬∞ Parada:&lt;/b&gt; 2538&lt;br&gt;&lt;b&gt;Distrito:&lt;/b&gt; NORTE\n5 -60.7 -32.9 NORTE      2537 &lt;b&gt;N¬∞ Parada:&lt;/b&gt; 2537&lt;br&gt;&lt;b&gt;Distrito:&lt;/b&gt; NORTE\n6 -60.7 -32.9 NORTE      1769 &lt;b&gt;N¬∞ Parada:&lt;/b&gt; 1769&lt;br&gt;&lt;b&gt;Distrito:&lt;/b&gt; NORTE\n\n\n\n\n\nUsando la funci√≥n addMarkers() de leaflet obtenemos una visualizaci√≥n que permite estudiar d√≥nde se ubican las paradas del TUP. Tal como hicimos antes, podemos agregar informaci√≥n que se har√° visible al mover el mouse sobre cada √≠cono:\n\n\nleaflet() %&gt;%\n  addProviderTiles(\"OpenStreetMap.Mapnik\") %&gt;%\n  addMarkers(\n    lat = tup$lat, \n    lng = tup$lon, \n    label = lapply(as.list(tup$texto), HTML)\n    )\n\n\n\n\n\n\n\n\nUna alternativa interesante consiste en agregar un algoritmo autom√°tico de creaci√≥n de clusters de marcadores, con lo cual la visualizaci√≥n es m√°s prolija:\n\n\nleaflet() %&gt;%\n  addProviderTiles(\"OpenStreetMap.Mapnik\") %&gt;%\n  addMarkers(\n    lat = tup$lat, \n    lng = tup$lon, \n    label = lapply(as.list(tup$texto), HTML),\n    clusterOptions = markerClusterOptions()\n    )\n\n\n\n\n\n\n\n\nDato extra: para cambiar los colores de los marcadores, asoci√°ndolos a una variable categ√≥rica, podemos usar la funci√≥n addAwesomeMarkers(). Los colores disponibles para ser utilizados pueden consultarse en la ayuda de la funci√≥n awesomeIcons().\nEn el c√≥digo debajo, asociamos cada posible distrito a un color en particular (objeto colores). Luego adjuntamos esta nueva informaci√≥n al dataset original mediante una operaci√≥n de tipo join. Por √∫ltimo, generamos el mapa aclarando que deseamos usar la variable reci√©n generada para colorear cada marcador (argumento icon):\n\n\n#Generamos paleta de colores\ncolores &lt;- tibble(\n  DISTRITO = sort(unique(tup$DISTRITO)),\n  color = c(\"red\", \"pink\", \"blue\", \"purple\", \"green\", \"orange\", \"lightblue\")\n)\n\n#Agregamos la informaci√≥n al dataset original\ntup &lt;- tup %&gt;% left_join(colores)\n\n#Generamos el mapa\nleaflet() %&gt;%\n  addProviderTiles(\"OpenStreetMap.Mapnik\") %&gt;%\n  addAwesomeMarkers(\n    lat = tup$lat, \n    lng = tup$lon, \n    label = lapply(as.list(tup$texto), HTML),\n    icon = awesomeIcons(markerColor = tup$color)\n    )",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>6</span>¬† <span class='chapter-title'>Georreferencia</span>"
    ]
  },
  {
    "objectID": "capitulos/03_visualizacion_variables_cualitativas.html",
    "href": "capitulos/03_visualizacion_variables_cualitativas.html",
    "title": "7¬† Visualizaci√≥n de Variables Cualitativas",
    "section": "",
    "text": "7.1 Introducci√≥n\n#Lectura y manipulaci√≥n de datos\nlibrary(dplyr)\nlibrary(readxl)\nlibrary(ggplot2)\n\n#Gr√°ficos Varios\nlibrary(vcd)\nlibrary(plotly)\nlibrary(ggalluvial)\nlibrary(treemapify)\n\n#Diagramas de Venn\nlibrary(grid)\nlibrary(ggvenn)\nlibrary(VennDiagram)\n\n#Nubes de Palabras\nlibrary(igraph)\nlibrary(ggraph)\nlibrary(widyr)\nlibrary(tidytext)\nlibrary(ggwordcloud)",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Visualizaci√≥n de Variables Cualitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/03_visualizacion_variables_cualitativas.html#introducci√≥n",
    "href": "capitulos/03_visualizacion_variables_cualitativas.html#introducci√≥n",
    "title": "7¬† Visualizaci√≥n de Variables Cualitativas",
    "section": "",
    "text": "En esta unidad vamos a repasar gr√°ficos √∫tiles para visualizar y resumir variables categ√≥ricas.\nPaquetes de R necesarios para reproducir los ejemplos:\n\n\n\n7.1.1 Datos Titanic\n\n\n\n\n\n\n\n\n\n\nEl famoso transatl√°ntico Titanic se hundi√≥ en abril de 1912 durante su viaje inaugural. El conjunto de datos Titanic del paquete de R Base datasets contiene informaci√≥n sobre qu√© pasajeros/as sobrevivieron a la tragedia y cu√°les no, desagregada seg√∫n edad, g√©nero y clase en la que viajaban.\nVemos los datos en R:\n\n\nas.data.frame(Titanic)\n\n   Class    Sex   Age Survived Freq\n1    1st   Male Child       No    0\n2    2nd   Male Child       No    0\n3    3rd   Male Child       No   35\n4   Crew   Male Child       No    0\n5    1st Female Child       No    0\n6    2nd Female Child       No    0\n7    3rd Female Child       No   17\n8   Crew Female Child       No    0\n9    1st   Male Adult       No  118\n10   2nd   Male Adult       No  154\n11   3rd   Male Adult       No  387\n12  Crew   Male Adult       No  670\n13   1st Female Adult       No    4\n14   2nd Female Adult       No   13\n15   3rd Female Adult       No   89\n16  Crew Female Adult       No    3\n17   1st   Male Child      Yes    5\n18   2nd   Male Child      Yes   11\n19   3rd   Male Child      Yes   13\n20  Crew   Male Child      Yes    0\n21   1st Female Child      Yes    1\n22   2nd Female Child      Yes   13\n23   3rd Female Child      Yes   14\n24  Crew Female Child      Yes    0\n25   1st   Male Adult      Yes   57\n26   2nd   Male Adult      Yes   14\n27   3rd   Male Adult      Yes   75\n28  Crew   Male Adult      Yes  192\n29   1st Female Adult      Yes  140\n30   2nd Female Adult      Yes   80\n31   3rd Female Adult      Yes   76\n32  Crew Female Adult      Yes   20\n\n\n\n\n\nA continuaci√≥n emplearemos esta base de datos para practicar la creaci√≥n de diversos tipos de gr√°ficos.",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Visualizaci√≥n de Variables Cualitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/03_visualizacion_variables_cualitativas.html#barras",
    "href": "capitulos/03_visualizacion_variables_cualitativas.html#barras",
    "title": "7¬† Visualizaci√≥n de Variables Cualitativas",
    "section": "7.2 Barras",
    "text": "7.2 Barras\n\n7.2.1 Univariadas\n\nUna de las alternativas m√°s populares para explorar variables cualitativas son los gr√°ficos de barras. El alto de cada rect√°ngulo representa la frecuencia (absoluta o relativa) de las diferentes categor√≠as que estamos comparando.\nEstos gr√°ficos son simples de construir e interpretar: mientras m√°s extensa la barra, mayor frecuencia posee la categor√≠a asociada.\nUsando los datos del Titanic podemos armar un gr√°fico de barras para la variable Class de la siguiente manera:\n\nPaso 1: calculamos los conteos de cada clase\n\nclase_titanic &lt;- Titanic %&gt;% \n  as.data.frame() %&gt;% \n  group_by(Class) %&gt;% \n  summarise(conteo = sum(Freq)) %&gt;% \n  ungroup()\n\nclase_titanic\n\n# A tibble: 4 √ó 2\n  Class conteo\n  &lt;fct&gt;  &lt;dbl&gt;\n1 1st      325\n2 2nd      285\n3 3rd      706\n4 Crew     885\n\n\n\n\nPaso 2: armamos el gr√°fico\n\nggplot(data = clase_titanic) +\n  aes(x = Class, y = conteo) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\n\n\nEs importante remarcar que ggplot2 tambi√©n puede armar este tipo de gr√°ficos a partir de datos crudos (desagregados). Si hubi√©semos tenido una base de datos con una fila para cada pasajero del Titanic, el c√≥digo para generar el gr√°fico de barras es a√∫n m√°s simple que el anterior:\n\n\nggplot(data = titanic_desagregado) +\n  aes(x = Class) +\n  geom_bar()\n\n\nNotemos que en este caso no es necesario agregar en el mapeo la variable y, asociada a la frecuencia de cada categor√≠a. Adem√°s, dentro de geom_bar() usamos ahora la opci√≥n por defecto (stat = \"count\"), mientras que antes deb√≠amos indicar el uso de stat = \"identity\".\nLa decisi√≥n entre usar datos agregados o desagregados no impacta en el resultado final, y depende casi exclusivamente del formato de la base de datos con la que estemos trabajando.\n\n\nColores\n\nUn retoque que podemos incluir consiste en agregar una paleta de colores que remarque las diferencias entre categor√≠as.\nEn general se asocian colores oscuros a categor√≠as m√°s frecuentes, y colores claros a categor√≠as menos populares:\n\n\nggplot(data = clase_titanic) +\n  aes(x = Class, y = conteo, fill = conteo) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_continuous(low = \"lightgreen\", high = \"darkgreen\")\n\n\n\n\n\n\n\n\n\nEn ocasiones, el color puede estar asociado a la categor√≠a y no a su frecuencia (este caso s√≥lo responde a cuestiones est√©ticas, ya que el color no aporta ninguna nueva informaci√≥n):\n\n\nggplot(data = clase_titanic) +\n  aes(x = Class, y = conteo, fill = Class) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\n\n\n\nFrecuencias Relativas\n\nUna alternativa com√∫n consiste en graficar proporciones o porcentajes en lugar de frecuencias absolutas.\nEl c√°lculo de las proporciones correspondientes puede hacerse de antemano (es decir, al momento en que generamos el dataset clase_titanic) o bien dentro del mapeo est√©tico, como vemos a continuaci√≥n:\n\n\nggplot(data = clase_titanic) +\n  aes(x = Class, y = conteo/sum(conteo)) +\n  geom_bar(stat = \"identity\") +\n  scale_y_continuous(name = \"Porcentaje\", labels = scales::percent)\n\n\n\n\n\n\n\n\n\nAclaraci√≥n: la funci√≥n percent() del paquete scales aplica el formato necesario al eje vertical para que la escala figure en porcentajes.\n\n\n\nReordenamiento\n\nSi la variable en estudio es de tipo character, ggplot2 emplea el orden alfab√©tico de las categor√≠as para graficar las barras. En caso de que la variable sea de tipo factor, el orden utilizado respeta el ordenamiento de sus niveles.\nSin embargo, en varias ocasiones vamos a preferir un orden personalizado, ya sea porque no nos convence el orden alfab√©tico, o los niveles del factor no siguen un orden l√≥gico, o preferimos mostrar las categor√≠as seg√∫n su frecuencia, etc.\nLa manera m√°s directa de modificar el orden en que se muestran las barras es convirtiendo la variable a factor y asignando el orden deseado a los niveles. Veamos un ejemplo donde el orden depende de la frecuencia observada:\n\n\nclase_titanic %&gt;% \n  arrange(desc(conteo)) %&gt;% \n  #Factor con niveles ordenados seg√∫n frecuencia\n  mutate(Class = factor(Class, levels = unique(Class))) %&gt;% \n  ggplot() +\n  aes(x = Class, y = conteo) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\n\n\n\nEtiquetas\n\nOtro agregado com√∫n consiste en incluir una etiqueta con el valor asociado a cada barra, reforzando as√≠ el mensaje visual y eliminando la necesidad de mostrar la tabla de frecuencias de la variable graficada.\nEsto se logra aplicando la capa geom_label():\n\n\nggplot(data = clase_titanic) +\n  aes(x = Class, y = conteo) +\n  geom_bar(stat = \"identity\") +\n  geom_label(\n    aes(label = conteo), #texto a mostrar en cada barra (en este caso, el conteo)\n    vjust = 1, #justificacion vertical, en este caso arriba de todo\n    size = 5, #tama√±o de la etiqueta\n    fill = \"steelblue\", #color de fondo\n    color = \"white\" #color del texto\n    )\n\n\n\n\n\n\n\n\n\n\n\n7.2.2 Bivariadas\n\nPara ejemplificar los gr√°ficos de barras bivariados vamos a agregar al an√°lisis la variable Sex del dataset Titanic:\n\n\ntitanic_bivariado &lt;- Titanic %&gt;% \n  as.data.frame() %&gt;% \n  group_by(Class, Sex) %&gt;% \n  summarise(conteo = sum(Freq)) %&gt;% \n  ungroup()\n\ntitanic_bivariado\n\n# A tibble: 8 √ó 3\n  Class Sex    conteo\n  &lt;fct&gt; &lt;fct&gt;   &lt;dbl&gt;\n1 1st   Male      180\n2 1st   Female    145\n3 2nd   Male      179\n4 2nd   Female    106\n5 3rd   Male      510\n6 3rd   Female    196\n7 Crew  Male      862\n8 Crew  Female     23\n\n\n\nBarras Apiladas\n\nUna manera de visualizar dos variables categ√≥ricas al mismo tiempo es a trav√©s de un gr√°fico de barras apiladas.\nEn estos casos cada barra se subdivide en las categor√≠as de la segunda variable, siendo las alturas proporcionales a la cantidad de individuos que presentan ambas caracter√≠sticas a la vez.\n\n\nggplot(data = titanic_bivariado) +\n  aes(x = Class, fill = Sex, y = conteo) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\n\n\nEn este gr√°fico, cada subdivisi√≥n de la barra posee un alto igual al de su frecuencia absoluta.\nUna alternativa mucho m√°s conveniente, utilizada sobre todo cuando los tama√±os de muestra entre grupos son muy dis√≠miles, consiste en fijar el alto total de cada barra en 100% y calcular las alturas de las subdivisiones como proporciones intra-grupo.\nEn R esto se logra a√±adiendo la opci√≥n position = \"fill\":\n\n\nggplot(data = titanic_bivariado) +\n  aes(x = Class, fill = Sex, y = conteo) +\n  geom_bar(stat = \"identity\", position = \"fill\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportante\n\n\n\n\nEn caso de existir una relaci√≥n de explicativa y respuesta entre las variables graficadas, por convenci√≥n se ubica la explicativa en el eje horizontal, mientras que la respuesta se asocia a los diferentes colores de cada barra.\nEn estos casos se asume que el inter√©s est√° enfocado en visualizar la distribuci√≥n condicional de Y dado X.\n\n\n\n\n\nBarras lado a lado\n\nSi no nos gustan las barras apiladas, podemos construir nuestro gr√°fico con barras contiguas (position = \"dodge\"):\n\n\nggplot(data = titanic_bivariado) +\n  aes(x = Class, fill = Sex, y = conteo) +\n  geom_bar(stat = \"identity\", position = \"dodge\")\n\n\n\n\n\n\n\n\n\nEsta manera de visualizar los datos es recomendable √∫nicamente cuando los tama√±os de muestra entre grupos son similares, y la cantidad posible de combinaciones entre niveles de ambas variables (es decir, la cantidad de barras) no resulte demasiado alta.\n\n\n\n\n\n\n\nImportante\n\n\n\nCuando usamos barras lado a lado se asume que estamos interesados en visualizar la distribuci√≥n conjunta de las 2 variables, a diferencia de lo que ocurre con las barras apiladas, donde nos interesa la condicional.\n\n\n\n\n\n7.2.3 Ejercicio\n\nAplicando los conceptos presentados en esta secci√≥n y tus conocimientos previos sobre ggplot2, tratar de reconstruir el siguiente gr√°fico:",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Visualizaci√≥n de Variables Cualitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/03_visualizacion_variables_cualitativas.html#tortas",
    "href": "capitulos/03_visualizacion_variables_cualitativas.html#tortas",
    "title": "7¬† Visualizaci√≥n de Variables Cualitativas",
    "section": "7.3 Tortas",
    "text": "7.3 Tortas\n\nLos gr√°ficos de torta (pie charts en ingl√©s), tambi√©n conocidos como gr√°ficos de sectores circulares, son una herramienta de visualizaci√≥n orientada a la comparaci√≥n de frecuencias entre los distintos niveles de una variable categ√≥rica.\nEn este sentido, su objetivo es exactamente el mismo que el de los gr√°ficos de barras.\nPara su construcci√≥n se divide un c√≠rculo en tantas ‚Äúporciones‚Äù como categor√≠as tenga la variable, de tal manera que el √°ngulo de cada sector resulte proporcional a la cantidad de individuos correspondientes a esa categor√≠a.\nSi quisi√©ramos construir a mano un pie chart de la variable Class, debemos multiplicar cada frecuencia relativa por 360¬∞, obteniendo as√≠ los grados de cada √°ngulo:\n\n\nclase_titanic %&gt;% \n  mutate(\n    prop = conteo/sum(conteo),\n    angulo = round(360 * prop, 2)\n    )\n\n# A tibble: 4 √ó 4\n  Class conteo  prop angulo\n  &lt;fct&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 1st      325 0.148   53.2\n2 2nd      285 0.129   46.6\n3 3rd      706 0.321  115. \n4 Crew     885 0.402  145. \n\n\n\nEn R podemos generar un gr√°fico de este estilo usando la misma funci√≥n que antes, geom_bar(), pero cambiando el sistema de coordenadas (pasamos a las polares):\n\n\nggplot(data = clase_titanic) +\n  aes(x = \"\", y = conteo, fill = Class) +\n  geom_bar(stat = \"identity\") +\n  coord_polar(\"y\") +\n  theme(\n    panel.grid = element_blank(),\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    axis.ticks = element_blank()\n  )\n\n\n\n\n\n\n\n\n\nLa pregunta que surge es, ¬øson realmente √∫tiles estos gr√°ficos?\nVe√°moslo desde este punto de vista: para lograr nuestro objetivo de comparar visualmente las categor√≠as m√°s populares tenemos dos opciones:\n\nArmar un gr√°fico de barras, donde la longitud de cada barra corresponde a la frecuencia absoluta o relativa registradas en esa categor√≠a.\nArmar un gr√°fico de torta, donde el √°ngulo de cada sector es proporcional a la cantidad de respuestas en esa categor√≠a.\n\n\n\n\n\nCreemos que nadie en su sano juicio preferir√≠a la opci√≥n 2 en lugar de la 1.\nSi esto les parece exagerado, traten de ordenar las categor√≠as desde la m√°s hasta la menos frecuente mirando el siguiente par de gr√°ficos. ¬øCon cu√°l de los dos resulta m√°s f√°cil hacer comparaciones?",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Visualizaci√≥n de Variables Cualitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/03_visualizacion_variables_cualitativas.html#mosaicos",
    "href": "capitulos/03_visualizacion_variables_cualitativas.html#mosaicos",
    "title": "7¬† Visualizaci√≥n de Variables Cualitativas",
    "section": "7.4 Mosaicos",
    "text": "7.4 Mosaicos\n\nLos gr√°ficos de mosaico son alternativas a los gr√°ficos de barras bivariados. La principal diferencia entre ambos es que, en los mosaicos, el ancho de las barras es variable y depende de la frecuencia de cada categor√≠a ubicada sobre el eje horizontal.\nRetomando los datos de Titanic, supongamos que deseamos estudiar la relaci√≥n entre g√©nero del pasajero y supervivencia al hundimiento.\nConstruimos una tabla de contingencia y obtenemos el siguiente resultado:\n\n\n\n Survived Male Female Total\n       No 1364    126  1490\n      Yes  367    344   711\n    Total 1731    470  2201\n\n\n\n\n\nPara trasladar esta informaci√≥n a un gr√°fico de mosaico empleamos el paquete vcd:\n\n\nlibrary(vcd)\n\nmosaic(\n  formula = ~ Sex + Survived, \n  data = Titanic, \n  direction = \"v\"\n  )\n\n\n\n\n\n\n\n\n\nEn este tipo de visualizaciones, el √°rea de cada rect√°ngulo puede interpretarse de dos maneras diferentes:\n\nDistribuci√≥n conjunta: el porcentaje de √°rea que ocupa el rect√°ngulo asociado a las categor√≠as \\(\\left( X_i, Y_j \\right)\\), con respecto al gr√°fico entero, coincide con la proporci√≥n de individuos en la base que comparten las caracter√≠sticas \\(\\left( X_i, Y_j \\right)\\).\nDistribuci√≥n condicional: el porcentaje de √°rea que ocupa el rect√°ngulo asociado a las categor√≠as \\(\\left( X_i, Y_j \\right)\\), dentro de la columna donde se encuentra, coincide con la proporci√≥n de individuos de la categor√≠a \\(X_i\\) que poseen la caracter√≠stica \\(Y_j\\).\n\n\n\n\n\nPor ejemplo, el √°rea del rect√°ngulo mayor (varones que no sobrevivieron) ocupa el \\(1364/2201 \\approx 62\\%\\) del √°rea total y, al mismo tiempo, ocupa el \\(1364/1731 \\approx 79\\%\\) de la columna izquierda.\nEn t√©rminos probabil√≠sticos, los anchos de los rect√°ngulos son estimaciones de las probabilidades marginales \\(P(sexo_i)\\), mientras que las alturas son estimaciones de las probabilidades condicionales \\(P(sobrevive_j / sexo_i)\\).\nPor lo tanto, el √°rea de cada rect√°ngulo representa una estimaci√≥n de la probabilidad conjunta:\n\n\\[\nbase \\times altura = P(sexo_i) \\times P(sobrevive_j / sexo_i) = P(sexo_i \\cap sobrevive_j)\n\\]\n\nPodemos agregar una paleta de colores para una de las dos variables graficadas, de la siguiente manera:\n\n\nmosaic(\n  formula = ~ Sex + Survived, \n  data = Titanic, \n  direction = \"v\", \n  highlighting = \"Survived\",\n  highlighting_fill = c(\"red\", \"green\")\n  )\n\n\n\n\n\n\n\n\n\n7.4.1 Independencia\n\nOtra manera de colorear los mosaicos es a partir de los residuos que se obtienen al tratar de ajustar un modelo de independencia a los datos.\nRecordemos que en el Test de Independencia Chi-Cuadrado para tablas de contingencia, el valor esperado de cada celda bajo la hip√≥tesis nula es: \\[E_{ij} = \\dfrac{n_{i.} \\times n_{.j}}{n}\\] es decir, se calcula como el producto entre los totales de su respectiva fila y columna, dividido por el total de individuos en la muestra.\nA partir de este supuesto de independencia, la funci√≥n mosaic() calcula los residuos de Pearson: \\[r_{ij}=\\dfrac{n_{ij} - E_{ij}}{\\sqrt{E_{ij}}}\\].\nUtilizando estos residuos se obtiene la estad√≠stica \\(\\chi^2 = \\sum\\limits_{ij} r_{ij}^2\\), la cual se utiliza para llevar a cabo el test de independencia.\nLa coloraci√≥n de mosaicos en base a estos residuos se agrega mediante el argumento shade:\n\n\nmosaic(\n  formula = ~ Sex + Survived, \n  data = Titanic, \n  direction = \"v\", \n  shade = TRUE\n  )\n\n\n\n\n\n\n\n\n\nObservamos que el p-value asociado al test es pr√°cticamente nulo, por lo tanto rechazamos la hip√≥tesis de independencia (algo totalmente previsible dadas las caracter√≠sticas de los datos).\nPor ejemplo, vemos que el residuo asociado a mujeres sobrevivientes es extremadamente alto, cercano a 16 unidades. Esto indica que las mujeres que viajaron en el Titanic salvaron su vida en mucha mayor proporci√≥n que la esperada bajo el supuesto de independencia.\nC√°lculo a mano del residuo:\n\n\\[E_{22} = \\dfrac{n_{2.} \\times n_{.2}}{n} = \\dfrac{470 \\times 711}{2201} \\approx 152\\]\n\\[r_{22} = \\dfrac{n_{22} - E_{22}}{\\sqrt{E_{22}}} = \\dfrac{344 - 152}{\\sqrt{152}} \\approx 15.6 \\]\n\n\n7.4.2 M√°s de 2 variables\n\nSi bien las interpretaciones pueden volverse algo complejas, los gr√°ficos de mosaico permiten analizar m√∫ltiples variables al mismo tiempo.\nVeamos qu√© ocurre si agregamos la variable Class:\n\n\nmosaic(\n  formula = ~ Sex + Class + Survived, \n  data = Titanic, \n  highlighting = \"Survived\", \n  highlighting_fill = c(\"red\", \"green\")\n  )\n\n\n\n\n\n\n\n\n\n\n7.4.3 Usando ggplot2\n\nLos gr√°ficos de mosaico tambi√©n pueden generarse a partir de ggplot2, aunque el c√≥digo necesario puede llegar a ser algo extenso:\n\n\nmosaico_gg &lt;- Titanic %&gt;% \n  as.data.frame() %&gt;% \n  group_by(Sex, Survived) %&gt;%\n  summarise(conteo = sum(Freq), .groups = \"drop\") %&gt;%\n  group_by(Sex) %&gt;% \n  mutate(\n    ancho = sum(conteo), \n    alto = conteo / ancho,\n    y = 1 - (cumsum(conteo) - 0.5 * conteo) / ancho,\n    ) %&gt;% \n  ungroup()\n\nggplot(data = mosaico_gg) +\n  aes(x = Sex, y = alto, width = ancho, fill = Survived) +\n  geom_bar(stat = \"identity\", position = \"fill\", colour = \"white\", linewidth = 0.25) +\n  geom_label(aes(label = conteo, y = y), size = 5) +\n  facet_grid(~ Sex, scales = \"free_x\", space = \"free_x\") +\n  scale_fill_manual(values = c(\"#fc2246\", \"#55df42\")) +\n  scale_y_continuous(\n    name = \"Survived\",\n    expand = c(0, 0), \n    breaks = mosaico_gg$y[mosaico_gg$Sex == \"Male\"],\n    labels = mosaico_gg$Survived[mosaico_gg$Sex == \"Male\"]\n    ) +\n  theme_bw() +\n  theme(\n    line = element_blank(),\n    strip.text = element_blank(),\n    axis.ticks.length = unit(0, \"pt\"),\n    legend.position = \"none\"\n  )",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Visualizaci√≥n de Variables Cualitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/03_visualizacion_variables_cualitativas.html#alluvial",
    "href": "capitulos/03_visualizacion_variables_cualitativas.html#alluvial",
    "title": "7¬† Visualizaci√≥n de Variables Cualitativas",
    "section": "7.5 Alluvial",
    "text": "7.5 Alluvial\n\nLos diagramas alluvial (tambi√©n conocidos como parallel sets) tienen un objetivo similar al de los gr√°ficos de mosaico: representar las distribuciones conjuntas y/o condicionales entre m√∫ltiples variables categ√≥ricas.\nLa palabra alluvial es un t√©rmino ingl√©s relacionado a la idea de aluvi√≥n, es decir, un gran flujo de algo (por ejemplo aluvi√≥n de agua, de personas, etc.).\nEstos gr√°ficos reciben este nombre ya que las relaciones entre variables se dibujan como curvas cuyo ancho est√° asociado a la frecuencia observada en cada combinaci√≥n de categor√≠as, dando la sensaci√≥n de ‚Äúflujos‚Äù de agua que conectan grupos.\nPara graficarlos utilizamos el paquete ggalluvial. Retomamos el ejemplo del Titanic:\n\n\nlibrary(ggalluvial)\n\nTitanic %&gt;% \n  as.data.frame() %&gt;% \n  ggplot() + \n  aes(axis1 = Sex, axis2 = Class, fill = Survived, y = Freq) +\n  geom_alluvium() + #flujos\n  geom_stratum( #columnas\n    fill = \"black\", \n    color = \"lightgrey\",\n    width = 0.1\n    ) + \n  geom_label( #etiquetas\n    stat = \"stratum\", \n    aes(label = after_stat(stratum)),\n    fill = \"white\",\n    size = 2\n    ) + \n  scale_x_discrete(limits = c(\"Sexo\", \"Clase\"), expand = c(0, 0)) +\n  scale_y_continuous(name = \"Frecuencias\", breaks = seq(0, 2250, 250))\n\n\n\n\n\n\n\n\n\nEn este caso todas las alturas representan frecuencias absolutas:\n\nEl alto del rect√°ngulo ‚ÄòFemale‚Äô coincide con la cantidad total de pasajeras mujeres en el Titanic (470).\nEl alto del flujo celeste que conecta los rect√°ngulos Sexo = Female y Clase = 1st coincide con la cantidad total de mujeres que viajaron en primera y sobrevivieron (140).\n\n\n\n\n\nUna alternativa al gr√°fico anterior consiste en incluir la supervivencia como una columna (estrato) m√°s:\n\n\nTitanic %&gt;% \n  as.data.frame() %&gt;% \n  ggplot() + \n  aes(\n    axis1 = Survived, \n    axis2 = Sex, \n    axis3 = Class,\n    fill = Survived, \n    y = Freq\n    ) +\n  geom_alluvium() + #flujos\n  geom_stratum( #columnas\n    fill = \"black\", \n    color = \"lightgrey\",\n    width = 0.15\n    ) + \n  geom_label( #etiquetas\n    stat = \"stratum\", \n    aes(label = after_stat(stratum)),\n    fill = \"white\",\n    size = 1.5\n    ) + \n  scale_x_discrete(limits = c(\"Sobrevivi√≥\", \"Sexo\", \"Clase\"), expand = c(0, 0)) +\n  scale_y_continuous(name = \"Frecuencias\", breaks = seq(0, 2250, 250))\n\n\n\n\n\n\n\n\n\nComentarios sobre el c√≥digo:\n\nggalluvial interact√∫a de manera extra√±a con ggplot2, por lo tanto algunas opciones asociadas a ejes y escalas pueden no funcionar como de costumbre (recomendamos leer la vi√±eta del paquete).\nUna alternativa que vale la pena mencionar es la que ofrece el paquete ggforce mediante su funci√≥n geom_parallel_sets(), la cual otorga resultados similares a los de ggalluvial.\nAgregando la funci√≥n coord_flip() podemos rotar los estratos para que queden ubicados de manera horizontal en vez de vertical:",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Visualizaci√≥n de Variables Cualitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/03_visualizacion_variables_cualitativas.html#treemaps",
    "href": "capitulos/03_visualizacion_variables_cualitativas.html#treemaps",
    "title": "7¬† Visualizaci√≥n de Variables Cualitativas",
    "section": "7.6 Treemaps",
    "text": "7.6 Treemaps\n\nUn treemap es un tipo de gr√°fico de mosaico donde el √°rea de cada rect√°ngulo se asocia a su frecuencia, o bien a otra variable num√©rica de inter√©s.\nEsta dualidad permite que utilicemos treemaps tanto para variables respuesta categ√≥ricas (√°rea = frecuencia) como para respuestas num√©ricas (√°rea = total en cada grupo).\nA diferencia de lo que ocurre con los mosaicos, donde todos los niveles de una variable se pueden combinar con todos los niveles de la otra variable, los treemaps pueden usarse a√∫n cuando las subdivisiones de un grupo son completamente distintas a las subdivisiones del otro. De hecho, se los suele emplear espec√≠ficamente cuando no tiene sentido mostrar todas las ‚Äúcruzas‚Äù entre las categor√≠as de las variables.\nAl igual que en un gr√°fico de mosaico, en un treemap se toma un rect√°ngulo y se lo subdivide en rect√°ngulos m√°s peque√±os cuyas √°reas representan proporciones. Sin embargo, el m√©todo por el cual se colocan los rect√°ngulos m√°s peque√±os dentro de los m√°s grandes es diferente: en un treemap se hace recursivamente.\nPara ejemplificar los treemaps vamos a retomar los datos de cultivos que presentamos en clases anteriores. Veamos los cultivos con mayor producci√≥n en la provincia de Santa Fe durante 2019/20:\n\n\ncultivos &lt;- read_excel(\"../data/unidad03/cultivos.xlsx\", na = \"-\")\n\nsantafe &lt;- cultivos %&gt;% \n  filter(\n    prov == \"SANTA FE\", \n    campa√±a == \"2019/20\",\n    !cultivo %in% c(\"Soja 1ra\", \"Soja 2da\")\n    ) %&gt;% \n  group_by(cultivo) %&gt;% \n  summarise(prod = sum(prod, na.rm = TRUE)) %&gt;% \n  ungroup() %&gt;% \n  arrange(desc(prod))\n\nsantafe\n\n# A tibble: 13 √ó 2\n   cultivo         prod\n   &lt;chr&gt;          &lt;dbl&gt;\n 1 Soja total   9399967\n 2 Ma√≠z         7370856\n 3 Trigo total  4186876\n 4 Girasol       426328\n 5 Sorgo         363345\n 6 Arroz         149600\n 7 Algod√≥n        90440\n 8 Cebada total   50272\n 9 Arveja         40530\n10 Avena          36545\n11 Lenteja        26664\n12 Man√≠           20800\n13 Centeno          499\n\n\n\n\n\nEn R podemos crear un treemap de estos datos mediante el paquete treemapify:\n\n\nlibrary(treemapify)\n\nggplot(data = santafe) +\n  aes(area = prod, fill = prod/(10^6), label = cultivo) +\n  geom_treemap() +\n  geom_treemap_text() +\n  labs(fill = \"Producci√≥n\\n(millones de Tn.)\") +\n  scale_fill_gradient(low = \"yellow\", high = \"forestgreen\", breaks = seq(1, 9, 2))\n\n\n\n\n\n\n\n\n\nUn problema com√∫n en este tipo de gr√°ficos es que las categor√≠as menos frecuentes no pueden visualizarse, tal como ocurre en este ejemplo con la cebada, la arveja, etc.\n\n\n7.6.1 Treemaps din√°micos\n\nUna posible soluci√≥n al inconveniente mencionado arriba consiste en usar el paquete plotly para generar treemaps din√°micos:\n\n\nlibrary(plotly)\n\nplot_ly(\n  type = \"treemap\",\n  labels = santafe$cultivo,\n  parents = \"\", \n  values = santafe$prod\n  )\n\n\n\n\n\n\nLa utilidad de los treemaps confeccionados con plotly se aprecia a√∫n m√°s cuando agregamos otra variable al gr√°fico.\nSupongamos que queremos visualizar las toneladas cosechadas de cada cultivo desagregadas seg√∫n departamento.\nEn primer lugar, confeccionamos la base de datos necesaria:\n\n\ndeptos &lt;- cultivos %&gt;% \n  filter(\n    prov == \"SANTA FE\", \n    campa√±a == \"2019/20\",\n    !cultivo %in% c(\"Soja 1ra\", \"Soja 2da\")\n    ) %&gt;% \n  group_by(dpto, cultivo) %&gt;% \n  summarise(\n    prod = sum(prod, na.rm = TRUE), \n    .groups = \"drop\"\n    )\n\ndeptos\n\n# A tibble: 134 √ó 3\n   dpto       cultivo        prod\n   &lt;chr&gt;      &lt;chr&gt;         &lt;dbl&gt;\n 1 9 DE JULIO Algod√≥n       64400\n 2 9 DE JULIO Avena             0\n 3 9 DE JULIO Girasol       51230\n 4 9 DE JULIO Ma√≠z         174240\n 5 9 DE JULIO Soja total   269220\n 6 9 DE JULIO Sorgo         29760\n 7 9 DE JULIO Trigo total  233750\n 8 BELGRANO   Avena          1081\n 9 BELGRANO   Cebada total   6696\n10 BELGRANO   Centeno         499\n# ‚Ñπ 124 more rows\n\n\n\n\n\nEn segundo lugar, agregamos los totales por departamento y luego asignamos etiquetas √∫nicas a cada registro de la base (en general, este es el paso m√°s complejo del proceso). La base resultante se ve as√≠:\n\n\ndeptos_tot &lt;- deptos %&gt;% \n  \n  #Calculo totales por depto\n  group_by(dpto) %&gt;% \n  summarise(prod = sum(prod, na.rm = TRUE)) %&gt;% \n  ungroup() %&gt;% \n  rename(cultivo = dpto) %&gt;% \n  mutate(dpto = \"Total Santa Fe\") %&gt;% \n  \n  #Uno con dataset original\n  bind_rows(deptos) %&gt;% \n  \n  #Genero etiquetas √∫nicas\n  mutate(etiq = ifelse(dpto != \"Total Santa Fe\", paste0(cultivo, \"_\", dpto), cultivo))\n\ndeptos_tot\n\n# A tibble: 153 √ó 4\n   cultivo             prod dpto           etiq            \n   &lt;chr&gt;              &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;           \n 1 9 DE JULIO        822600 Total Santa Fe 9 DE JULIO      \n 2 BELGRANO         1127600 Total Santa Fe BELGRANO        \n 3 CASEROS          1541017 Total Santa Fe CASEROS         \n 4 CASTELLANOS      1999437 Total Santa Fe CASTELLANOS     \n 5 CONSTITUCION     1159655 Total Santa Fe CONSTITUCION    \n 6 GARAY              90715 Total Santa Fe GARAY           \n 7 GENERAL LOPEZ    5036462 Total Santa Fe GENERAL LOPEZ   \n 8 GENERAL OBLIGADO  535935 Total Santa Fe GENERAL OBLIGADO\n 9 IRIONDO          1505450 Total Santa Fe IRIONDO         \n10 LA CAPITAL        148791 Total Santa Fe LA CAPITAL      \n# ‚Ñπ 143 more rows\n\n\n\nAhora s√≠ estamos en condiciones de graficar el treemap bivariado:\n\n\nplot_ly(\n  type = 'treemap',\n  labels = deptos_tot$etiq, #variable de menor jerarqu√≠a (etiqueta √∫nica)\n  parents = deptos_tot$dpto, #variable de mayor jerarqu√≠a\n  values = deptos_tot$prod, #tama√±o de cada rectangulo\n  hoverinfo = \"label+value+percent parent+percent root\",\n  textinfo = \"label+value+percent parent+percent root\"\n  ) %&gt;% \n  add_trace(branchvalues = \"total\", name = \"\")\n\n\n\n\n\n\nMoviendo el mouse sobre el treemap, podemos enterarnos que, por ejemplo, la producci√≥n del departamento Rosario representa s√≥lo el 2% del total provincial.\nHaciendo click en Rosario, observamos que de las 546.155 toneladas producidas all√≠, el 36% corresponde a soja, lo que equivale al 1% de la producci√≥n de Santa Fe (abarcando todos los cultivos).\n\n\n\n7.6.2 Ejercicio\n\nTomar los datos del Titanic y tratar de replicar este treemap din√°mico que muestra los porcentajes de supervivencia seg√∫n la clase en la que viajaba cada pasajero:",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Visualizaci√≥n de Variables Cualitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/03_visualizacion_variables_cualitativas.html#diagramas-de-venn",
    "href": "capitulos/03_visualizacion_variables_cualitativas.html#diagramas-de-venn",
    "title": "7¬† Visualizaci√≥n de Variables Cualitativas",
    "section": "7.7 Diagramas de Venn",
    "text": "7.7 Diagramas de Venn\n\nLos diagramas de Venn son un tipo de gr√°fico √∫til para mostrar visualmente relaciones l√≥gicas (uni√≥n, intersecci√≥n, complemento, etc.) entre los elementos de diferentes conjuntos.\nPueden ser utilizados de dos maneras:\n\nPara contabilizar la cantidad de observaciones que presentan (o no) 2 o m√°s caracter√≠sticas de inter√©s. En este caso su objetivo es el de visualizar proporciones anidadas, con lo cual puede tomarse como una alternativa a los gr√°ficos presentados anteriormente para tal fin: mosaicos, treemaps y alluvial.\nPara mostrar espec√≠ficamente qu√© individuos poseen (o no) 2 o m√°s caracter√≠sticas de inter√©s. En este caso no nos interesa comparar cantidades ni proporciones, sino cu√°les son las observaciones que figuran en cada regi√≥n.\n\n\n\n7.7.1 Proporciones anidadas\n\nEmpleamos el paquete VennDiagram para mostrar qu√© porcentaje de los cultivos verifican las siguientes 3 condiciones: la superficie sembrada es mayor a 1000 hect√°reas, la producci√≥n obtenida es menor a 1500 toneladas, y el rendimiento es mayor a 2000 kg. por hect√°rea.\n\n\nlibrary(grid)\nlibrary(VennDiagram)\n\n#Creamos un dataset sin datos faltantes\ncultivos_sinNA &lt;- cultivos %&gt;% \n  filter(\n    !is.na(sup_cosechada),\n    !is.na(prod),\n    !is.na(rend)\n  )\n\n#Armamos una lista con individuos que verifican las 3 condiciones a comparar\nlista &lt;- list(\n  grupo1 = which(cultivos_sinNA$sup_sembrada &gt; 1000),\n  grupo2 = which(cultivos_sinNA$prod &lt; 1500),\n  grupo3 = which(cultivos_sinNA$rend &gt; 2000)\n)\n\n#Generamos diagrama de Venn\ndiagrama &lt;- venn.diagram(\n  x = lista,\n  category.names = c(\n    \"Sup. &gt; 1000 ha.\", \n    \"Prod. &lt; 1500 tn.\", \n    \"Rendimiento &gt; 2000 kg. por ha.\"\n    ),\n  fill = c(\"red\", \"blue\", \"green\"),\n  filename = NULL,\n  print.mode = \"percent\" #para ver % en vez de cantidades\n)\n\ngrid.draw(diagrama)\n\n\n\n\n\n\n\n\n\n\n7.7.2 Caracter√≠sticas compartidas entre individuos\n\nEn este caso usamos el paquete ggvenn, una extensi√≥n de ggplot2, para hacer un diagrama cl√°sico de Venn que compara un conjunto de individuos seg√∫n 2 variables:\n\n\nlibrary(ggvenn)\n\nlista &lt;- list(\n  F√∫tbol = c(\"Argentina\", \"Alemania\", \"Uruguay\", \"Brasil\", \n             \"Espa√±a\", \"Italia\", \"Inglaterra\", \"Francia\"), \n  Basket = c(\"Argentina\", \"Alemania\", \"Brasil\", \"Espa√±a\", \n              \"Estados Unidos\", \"Uni√≥n Sovi√©tica\", \"Yugoslavia\")\n  )\n\nggvenn(\n  data = lista, \n  fill_color = c(\"red\", \"blue\"), \n  show_elements = TRUE,\n  label_sep = \"\\n\",\n  text_size = 5\n  ) +\n  ggtitle(\"Campeones Mundiales de...\\n\") +\n  theme(title = element_text(size = 14))",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Visualizaci√≥n de Variables Cualitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/03_visualizacion_variables_cualitativas.html#nubes-de-palabras",
    "href": "capitulos/03_visualizacion_variables_cualitativas.html#nubes-de-palabras",
    "title": "7¬† Visualizaci√≥n de Variables Cualitativas",
    "section": "7.8 Nubes de Palabras",
    "text": "7.8 Nubes de Palabras\n\nEn los √∫ltimos tiempos se han desarrollado herramientas muy interesantes y sofisticadas para el trabajo con datos de tipo textual. En esta secci√≥n veremos dos de ellas, que suelen estar presentes en an√°lisis exploratorios iniciales del conjunto de documentos analizados:\n\nEstudio de las frecuencias de palabras: se contabiliza cu√°ntas veces aparece cada palabra para poder identificar a las m√°s frecuentes. Los resultados suelen representarse en las llamadas nubes de palabras, las cuales generan una visualizaci√≥n atractiva de los vocablos presentes.\nEstudio de la co-ocurrencia de palabras: se estudia la asociaci√≥n que puede haber entre palabras mediante el an√°lisis de cu√°ntas veces aparecen juntas (o no) en los documentos. Los resultados suelen representarse en grafos.\n\nAmbos tipos de an√°lisis pueden utilizarse para comparar grupos de documentos, por ejemplo de distintos autores, diferentes estilos literarios, etc.\nVamos a ejemplificar el uso de estas herramientas analizando tweets (posteos en la red social Twitter, ahora conocida como X). En particular, nos concentraremos en tweets que incluyan el hashtag #messi publicados entre el 9 y el 13 de diciembre de 2022.\nLa descarga de la base se realiz√≥ el d√≠a 13/12/2022, despu√©s del partido entre Argentina y Croacia por las semifinales del Mundial de F√∫tbol de Qatar, en el que nuestra selecci√≥n gan√≥ por 3 a 0.\nPara obtener estos datos se utiliz√≥ el paquete de R rtweet, el cual se conecta con la API de Twitter y permite descargar tweets que coincidan con los criterios de b√∫squeda que nos interesen. Desde que Elon Musk compr√≥ Twitter, el acceso a la API se encuentra restringido y el paquete rtweet ha dejado de funcionar, por lo que hoy en d√≠a no es tan sencillo acceder a este tipo de informaci√≥n libremente.\nUna vez descargados los tweets es necesario someterlos a un extenso proceso de depuraci√≥n, el cual incluye filtrado de spam, unificaci√≥n de criterios de escritura de palabras, borrado de t√©rminos no importantes (art√≠culos, preposiciones, conectores, etc.) y muchas otras cuestiones relativas a la limpieza de la base.\nEl resultado de este proceso se encuentra almacenado en el archivo tweets.RData, el cual contiene informaci√≥n sobre m√°s de 15.000 tweets con el hashtag #messi publicados en las fechas mencionadas. Sus primeras 10 filas lucen as√≠:\n\n\nload(\"../data/unidad03/tweets.RData\")\nhead(tweets, 10)\n\n# A tibble: 10 √ó 7\n   id      created_at          text  retweet_count favorite_count source limpios\n   &lt;chr&gt;   &lt;dttm&gt;              &lt;chr&gt;         &lt;int&gt;          &lt;int&gt; &lt;chr&gt;  &lt;chr&gt;  \n 1 160127‚Ä¶ 2022-12-09 18:02:24 \"Aho‚Ä¶             0              0 Twitt‚Ä¶ ahora ‚Ä¶\n 2 160127‚Ä¶ 2022-12-09 18:02:36 \"Vam‚Ä¶             0              0 Twitt‚Ä¶ vamos ‚Ä¶\n 3 160127‚Ä¶ 2022-12-09 18:02:44 \"Que‚Ä¶             0              1 Twitt‚Ä¶ gane e‚Ä¶\n 4 160127‚Ä¶ 2022-12-09 18:02:52 \"Ser‚Ä¶             0              0 Twitt‚Ä¶ sera v‚Ä¶\n 5 160127‚Ä¶ 2022-12-09 18:02:59 \"#Me‚Ä¶             0              0 Twitt‚Ä¶ merece‚Ä¶\n 6 160127‚Ä¶ 2022-12-09 18:03:07 \"Que‚Ä¶             1              1 Twitt‚Ä¶ quedam‚Ä¶\n 7 160127‚Ä¶ 2022-12-09 18:03:10 \"Sol‚Ä¶             0              0 Twitt‚Ä¶ solo q‚Ä¶\n 8 160127‚Ä¶ 2022-12-09 18:03:12 \"@Ma‚Ä¶             0              0 Twitt‚Ä¶ result‚Ä¶\n 9 160127‚Ä¶ 2022-12-09 18:03:27 \"Tra‚Ä¶             0              6 Twitt‚Ä¶ tranqu‚Ä¶\n10 160127‚Ä¶ 2022-12-09 18:03:48 \"Tod‚Ä¶             0              0 Twitt‚Ä¶ puesto‚Ä¶\n\n\n\n7.8.1 Frecuencias y nubes de palabras\n\nVamos a detectar cu√°les son las palabras m√°s frecuentes en esta base. Mediante la funci√≥n unnest_tokens() del paquete tidytext extraemos las palabras que componen cada tweet y ubicamos cada una de ellas en las filas de un nuevo dataset. Luego agregamos su frecuencia absoluta y nos quedamos con aquellos t√©rminos con al menos 4 caracteres:\n\n\nlibrary(tidytext)\n\nfrecuencias &lt;- tweets %&gt;% \n  unnest_tokens(palabras, limpios) %&gt;% \n  count(palabras, sort = TRUE, name = \"frec\") %&gt;% \n  filter(nchar(palabras) &gt; 3) %&gt;% \n  arrange(-frec)\n\nfrecuencias\n\n# A tibble: 16,340 √ó 2\n   palabras   frec\n   &lt;chr&gt;     &lt;int&gt;\n 1 argentina  2355\n 2 messi      2044\n 3 vamos      1340\n 4 mundial    1132\n 5 bobo       1117\n 6 mundo       882\n 7 mejor       839\n 8 partido     837\n 9 futbol      741\n10 final       721\n# ‚Ñπ 16,330 more rows\n\n\n\n\n\nPara comparar las frecuencias de estos t√©rminos podr√≠amos emplear un gr√°fico de barras, pero en este caso optamos por una nube de palabras. La idea de ambas visualizaciones es la misma: representar palabras en un gr√°fico, donde el tama√±o o color de cada una depende de cierta variable num√©rica (generalmente la frecuencia relativa o absoluta de la palabra dentro del texto analizado).\nPara crear una nube de palabras con nuestro ejemplo usamos el paquete ggwordcloud. Se incluyen √∫nicamente aquellos t√©rminos que hayan aparecido m√°s de 100 veces:\n\n\nlibrary(ggwordcloud)\n\nfrecuencias %&gt;% \n  filter(frec &gt; 100) %&gt;% \n  ggplot() +\n  aes(label = palabras, size = frec, color = frec) +\n  geom_text_wordcloud(eccentricity = 1) + #forma de la elipse\n  scale_size_area(max_size = 20) +\n  scale_color_gradient(low = \"red\", high = \"darkred\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n7.8.2 Co-ocurrencia, asociaci√≥n entre palabras y grafos\n\nOtro an√°lisis b√°sico para datos textuales consiste en identificar cu√°les son los pares de palabras que aparecen juntas frecuentemente (no necesariamente una despu√©s de la otra, sino en los mismos documentos).\nPara contar la cantidad de tweets en donde aparece cada par de palabras, vamos a valernos del paquete widyr y la funci√≥n pairwise_count():\n\n\npalabras_tweet &lt;- tweets %&gt;%\n  select(id, limpios) %&gt;% \n  unnest_tokens(palabras, limpios) %&gt;% \n  filter(nchar(palabras) &gt; 3)\n\npares_frec &lt;- pairwise_count(palabras_tweet, palabras, id, sort = TRUE)\npares_frec\n\n# A tibble: 756,550 √ó 3\n   item1     item2         n\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 miras     bobo        472\n 2 bobo      miras       472\n 3 argentina vamos       445\n 4 vamos     argentina   445\n 5 messi     argentina   433\n 6 argentina messi       433\n 7 bajos     paises      429\n 8 paises    bajos       429\n 9 bobo      anda        353\n10 anda      bobo        353\n# ‚Ñπ 756,540 more rows\n\n\n\nLos binomios m√°s comunes son ‚Äúmiras bobo‚Äù (de la famosa frase de Messi, qu√© mir√°s bobo, and√° pa‚Äô all√° bobo), ‚Äúvamos argentina‚Äù, ‚Äúpaises bajos‚Äù, etc.\nPodemos buscar palabras de nuestro inter√©s para saber con qu√© t√©rminos se asocian frecuentemente:\n\n\nfilter(pares_frec, item1 == \"dibu\")\n\n# A tibble: 887 √ó 3\n   item1 item2           n\n   &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1 dibu  martinez       66\n 2 dibu  messi          54\n 3 dibu  argentina      51\n 4 dibu  penales        24\n 5 dibu  gracias        23\n 6 dibu  semifinales    23\n 7 dibu  vamos          19\n 8 dibu  seleccion      18\n 9 dibu  paises         17\n10 dibu  bajos          17\n# ‚Ñπ 877 more rows\n\nfilter(pares_frec, item1 == \"scaloneta\") \n\n# A tibble: 291 √ó 3\n   item1     item2         n\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 scaloneta argentina    19\n 2 scaloneta vamos        15\n 3 scaloneta seleccion     9\n 4 scaloneta mundo         7\n 5 scaloneta messi         6\n 6 scaloneta final         5\n 7 scaloneta qatar         5\n 8 scaloneta juega         5\n 9 scaloneta mundial       4\n10 scaloneta pase          4\n# ‚Ñπ 281 more rows\n\nfilter(pares_frec, item1 == \"muchachos\")\n\n# A tibble: 409 √ó 3\n   item1     item2         n\n   &lt;chr&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1 muchachos vamos        30\n 2 muchachos argentina    23\n 3 muchachos gracias      20\n 4 muchachos ilusionar    19\n 5 muchachos volvimos     18\n 6 muchachos ahora        14\n 7 muchachos mundial      11\n 8 muchachos campeon      11\n 9 muchachos quiero       10\n10 muchachos ganar         9\n# ‚Ñπ 399 more rows\n\n\n\n\n\nUn par de palabras que ocurren muchas veces juntas podr√≠an no estar espec√≠ficamente asociadas entre s√≠, sobre todo si una de ellas posee alta frecuencia en t√©rminos generales (por ej., arriba vimos que la palabra argentina aparece muy asociada a dibu, scaloneta y muchachos).\nPara saber qu√© par de palabras se asocian entre s√≠, pero generalmente a ninguna otra, se emplea un coeficiente de asociaci√≥n entre variables binarias llamado \\(\\phi\\).\nPodemos calcular este coeficiente para cada par de palabras con la funci√≥n pairwise_cor().\n\n\npares_corr &lt;- palabras_tweet %&gt;%\n  group_by(palabras) %&gt;%\n  filter(n() &gt;= 20) %&gt;%\n  pairwise_cor(palabras, id, sort = TRUE)\n  \nfilter(pares_corr, item1 == \"muchachos\") \n\n# A tibble: 881 √ó 3\n   item1     item2     correlation\n   &lt;chr&gt;     &lt;chr&gt;           &lt;dbl&gt;\n 1 muchachos ilusionar      0.356 \n 2 muchachos volvimos       0.355 \n 3 muchachos tercera        0.159 \n 4 muchachos podemos        0.100 \n 5 muchachos gracias        0.0889\n 6 muchachos cielo          0.0822\n 7 muchachos vamos          0.0766\n 8 muchachos felices        0.0694\n 9 muchachos campeon        0.0592\n10 muchachos ahora          0.0565\n# ‚Ñπ 871 more rows\n\n\n\n\n\nArriba apreciamos las palabras que mayor correlaci√≥n poseen con muchachos: desaparecieron t√©rminos gen√©ricos como vamos o argentina, pero se mantuvieron palabras como volvimos o ilusionar. Esto se debe a que estas √∫ltimas generalmente s√≥lo aparecen cuando alguien escribe la letra de la famosa canci√≥n, y no resultan tan comunes en otros contextos.\nUna visualizaci√≥n interesante de toda esta informaci√≥n se logra con un grafo, el cual se define como una red de nodos conectados. En este caso, cada palabra es un nodo.\nLa l√≠nea que une dos nodos representa la asociaci√≥n entre las correspondientes palabras: a mayor oscuridad en la l√≠nea, mayor es la fuerza de asociaci√≥n; palabras no conectadas no est√°n asociadas.\nPara esta tarea hacemos uso de los paquetes igraph y ggraph:\n\n\nset.seed(2022)\n  \npares_corr %&gt;% \n  filter(correlation &gt; 0.2) %&gt;%\n  graph_from_data_frame() %&gt;%\n  ggraph(layout = \"fr\") + # Algoritmo de Fruchterman-Reingold para posicionar los nodos\n  geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +\n  geom_node_point(color = \"skyblue\", size = 3) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 3) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportante\n\n\n\nParte del material sobre nubes de palabras y grafos es de la autor√≠a del Prof.¬†Marcos Prunello.",
    "crumbs": [
      "Unidad 3. Cuali",
      "<span class='chapter-number'>7</span>¬† <span class='chapter-title'>Visualizaci√≥n de Variables Cualitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04.html",
    "href": "capitulos/04.html",
    "title": "Unidad 4. Cuanti",
    "section": "",
    "text": "Presentaci√≥n de la Unidad 4.\n\nP√°gina en construcci√≥n.",
    "crumbs": [
      "Unidad 4. Cuanti"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "",
    "text": "8.1 Introducci√≥n\n#Datos Multivariados\nlibrary(rgl)\nlibrary(plotly)\nlibrary(gganimate)\nlibrary(ggcleveland)\n\n#Hetmaps\nlibrary(pheatmap)\nlibrary(corrplot)\n\n#Series\nlibrary(echarts4r)\nlibrary(highcharter)\n\n#Gr√°ficos varios\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(ggradar)\nlibrary(ggridges)\n\n#Lectura y manipulaci√≥n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(scales)\n\n#Bases de datos\nlibrary(gapminder)\nlibrary(quantmod)",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#introducci√≥n",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#introducci√≥n",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "",
    "text": "A lo largo de esta unidad vamos a repasar gr√°ficos para visualizar variables num√©ricas.\nLos paquetes de R a emplear son los siguientes:",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#histogramas",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#histogramas",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.2 Histogramas",
    "text": "8.2 Histogramas\n\nEl histograma es uno de los m√©todos gr√°ficos m√°s antiguos para representar informaci√≥n univariada.\nLos datos se agrupan en clases o intervalos que se se√±alan en el eje horizontal, mientras que en el eje vertical se coloca alguna medida que indica la cantidad de observaciones que pertenece a cada intervalo.\nLa interpretaci√≥n que hagamos acerca de la distribuci√≥n depende mucho de la amplitud elegida para los intervalos, y de su cantidad:\n\nSi la amplitud es muy peque√±a o el n√∫mero de barras es elevado, el histograma presentar√° muchos picos y se oscurecer√° la visualizaci√≥n de la forma general de la distribuci√≥n.\nSi la amplitud es muy grande o el n√∫mero de barras es peque√±o, pueden perderse algunas caracter√≠sticas de la distribuci√≥n.\n\n\n\n8.2.1 Elegir la cantidad de intervalos de un histograma en R\n\nPara generar histogramas usando ggplot2 contamos con la funci√≥n geom_histogram(). Usaremos los datos de flores de iris para ejemplificar.\nLas opciones disponibles para elegir la cantidad y amplitud de los intervalos son las siguientes:\n\nDefault: elige siempre 30 intervalos, pero probablemente este valor arbitrario no sea el √≥ptimo para nuestros datos.\nDefinir la cantidad de barras: se usa el argumento bins.\nDefinir el ancho de cada barra: se usa el argumento binwidth.\nDefinir los l√≠mites de cada intervalo: se usa el argumento breaks.\n\n\n\nh_base &lt;- ggplot(data = iris) + \n  aes(x = Petal.Width) +\n  labs(x = \"Ancho de P√©talo\", y = \"Frecuencia absoluta\") +\n  theme_bw()\n\nh1 &lt;- h_base +\n  geom_histogram(fill = \"forestgreen\", col = \"black\") +\n  ggtitle(\"Opci√≥n 1: default (30 intervalos)\")\n\nh2 &lt;- h_base +\n  geom_histogram(fill = \"forestgreen\", col = \"black\", bins = 10) +\n  ggtitle(\"Opci√≥n 2: 10 intervalos\")\n\nh3 &lt;- h_base + \n  geom_histogram(fill = \"forestgreen\", col = \"black\", binwidth = 0.25) +\n  ggtitle(\"Opci√≥n 3: intervalos de amplitud 0.25 cm\")\n\nh4 &lt;- h_base + \n  geom_histogram(fill = \"forestgreen\", col = \"black\", breaks = seq(0, 2.5, 0.25)) +\n  ggtitle(\"Opci√≥n 4: l√≠mites espec√≠ficos\")\n\nplot_grid(h1, h2, h3, h4)\n\n\n\n\n\n\n\n\n\n\n8.2.2 Alternativas a las frecuencias absolutas\n\nComo vimos, ggplot2 grafica por defecto frecuencias absolutas (conteo de la cantidad de individuos que pertenecen a cada intervalo).\nA continuaci√≥n vemos 2 alternativas, para las cuales es necesario aplicar la funci√≥n after_stat():\n\nA) Frecuencia relativa: la suma de las alturas de las barras es igual a 1.\nB) Gr√°fico de densidad: la suma de las √°reas de las barras (ancho por alto) es igual a 1. En estos casos, carece de sentido interpretar la altura nominal de cada barra.\n\n\n\nh5 &lt;- ggplot(data = iris) + \n  aes(x = Petal.Width) +\n  geom_histogram(\n    aes(y = after_stat(count)/sum(after_stat(count))),\n    fill = \"forestgreen\", col = \"black\", bins = 10\n    ) +\n  labs(\n    x = \"Ancho de P√©talo\", y = \"Frecuencia relativa\",\n    title = \"Opci√≥n A: frecuencia relativa\"\n    )\n\nh6 &lt;- ggplot(data = iris) + \n  aes(x = Petal.Width) +\n  geom_histogram(\n    aes(y = after_stat(density)),\n    fill = \"forestgreen\", col = \"black\", bins = 10\n    ) +\n  labs(\n    x = \"Ancho de P√©talo\", y = \"Densidad\",\n    title = \"Opci√≥n B: Gr√°fico de Densidad\"\n    )\n\nplot_grid(h5, h6)",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#curvas-de-densidad",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#curvas-de-densidad",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.3 Curvas de Densidad",
    "text": "8.3 Curvas de Densidad\n\nLos histogramas han sido muy populares desde siempre, en parte por la facilidad de graficarlos manualmente. Sin embargo, poseen algunas desventajas: no son ‚Äúsuaves‚Äù y no son sensibles a cambios locales.\nDebido a esto, en la actualidad muchas veces son reemplazados por curvas de densidad, a partir de las cuales intentamos visualizar la distribuci√≥n de probabilidad subyacente bosquejando una curva continua, la cual es estimada a partir de los datos.\nPara esto, se suele emplear un m√©todo conocido como estimaci√≥n de densidades kernel, el cual ajusta una curva continua en la vecindad de cada dato, cuyo tama√±o es controlado por un par√°metro llamado ancho de banda. Luego se combinan todas esas curvas para obtener la estimaci√≥n final de la densidad.\nEl tipo de kernel (n√∫cleo) m√°s utilizado es el gaussiano, pero hay muchas opciones.\nConsideremos la definici√≥n de \\(f(x)\\):\n\n\\[f(x) \\equiv \\dfrac{d}{dx}F(x)\\equiv \\lim\\limits_{h \\to 0} \\dfrac{F(x+h)-F(x-h)}{2h}\\]\n\nEl histograma estima esta funci√≥n dividiendo el eje en intervalos, pero un enfoque m√°s sensible es realizar la estimaci√≥n de la derivada en cada punto \\(x\\).\nReemplazando \\(F(x)\\) por la funci√≥n de distribuci√≥n acumulada emp√≠rica obtenemos:\n\n\\[\\hat{f}(x)=\\dfrac{\\#\\{x_i \\in (x-h,x+h)\\}}{2hn}\\]\n\nEsto puede ser reescrito como:\n\n\\[\\hat{f}(x) = \\dfrac{1}{2hn}\\sum_{j=1}^n I\\Bigg(x_j - h &lt; x \\le x_j + h\\Bigg)=\\dfrac{1}{hn}\\sum_{j=1}^n K\\Bigg(\\dfrac{x-x_j}{h}\\Bigg) \\]\ndonde\n\\[K(u)=\\begin{cases}\\frac{1}{2} & si\\;\\;\\; {-1&lt;u  \\leq 1} \\\\ \\\\0 & e.o.c. \\end{cases}\\]\n\nEl anterior es un estimador de densidad con funci√≥n kernel \\(K\\) que corresponde a una funci√≥n de densidad uniforme en el \\((-1,1]\\).\nLa funci√≥n density() del paquete stats permite estimar funciones de densidad a partir del estimador presentado.\nEntre los distintos kernels disponibles, el gaussiano es el que se utiliza generalmente, siendo el kernel por defecto en la mayor√≠a de las funciones. A continuaci√≥n se presentan las distintas opciones:\n\n\n\n\n\n\n\n\n\n\n\nEl resultado depende del ancho de banda, que produce el mismo tipo de efecto que la amplitud de los intervalos en los histogramas, y tambi√©n del kernel empleado. Por ejemplo, un kernel gaussiano tendr√° una tendencia a producir densidades m√°s semejantes a la normal. En contraste, un kernel rectangular puede producir una apariencia escalonada.\nEn general, cuantos m√°s datos haya, menos importancia tendr√° la elecci√≥n del kernel. Por lo tanto, los gr√°ficos de densidad suelen ser confiables e informativos para grandes conjuntos de datos, pero pueden ser enga√±osos en otros casos.\nLas curvas de densidad se escalan para que el √°rea encerrada sea igual a 1, lo cual hace que los valores del eje vertical carezcan de relevancia en cuanto a su interpretaci√≥n.\n\n\n\n\n\n\n\nPrecauci√≥n\n\n\n\nLos gr√°ficos de densidad suelen dar la apariencia de que existen datos donde nos los hay, especialmente en las colas. En consecuencia, se podr√≠an producir gr√°ficos que presenten curvas que no tengan sentido, por ejemplo, que se extienden hacia valores negativos al representar la distribuci√≥n de una variable positiva. Para evitar este inconveniente, en los siguientes ejemplos las densidades se cortan en el m√≠nimo y m√°ximo observados.\n\n\n\nAplicaci√≥n en R: usamos la funci√≥n stat_density() de ggplot2:\n\n\nggplot(data = iris) + \n  aes(x = Petal.Width) +\n  stat_density(fill = \"blue\", col = \"black\", kernel = \"gaussian\")\n\n\n\n\n\n\n\n\n\nEl par√°metro bw (ver ?stats::bw.nrd) especifica la ventana a utilizar en cada estimaci√≥n de la densidad, y es un m√∫ltiplo del desv√≠o est√°ndar del kernel especificado.\nValores grandes de bw nos dan una curva m√°s suave (menor variancia) pero tambi√©n m√°s sesgada.\nR utiliza ciertos valores por defecto, los cuales pueden no funcionar bien para ciertos conjuntos de datos, siendo nuestro deber proporcionar valores m√°s apropiados.\nDebajo vemos el efecto del ancho de banda y de la selecci√≥n del kernel:\n\n\ncurva_base &lt;- ggplot(data = iris) + aes(x = Petal.Width)\n\ng1 &lt;- curva_base +\n  stat_density(kernel = \"gaussian\", bw = 0.1) +\n  ggtitle(\"Kernel Gaussiano con bw = 0.1\")\n\ng2 &lt;- curva_base +\n  stat_density(kernel = \"gaussian\", bw = 0.4) +\n  ggtitle(\"Kernel Gaussiano con bw = 0.4\")\n\ng3 &lt;- curva_base +\n  stat_density(kernel = \"rectangular\", bw = 0.1) +\n  ggtitle(\"Kernel rectangular con bw = 0.1\")\n\ng4 &lt;- curva_base +\n  stat_density(kernel = \"rectangular\", bw = 0.4) +\n  ggtitle(\"Kernel rectangular con bw = 0.4\")\n\nplot_grid(g1, g2, g3, g4, nrow = 2)\n\n\n\n\n\n\n\n\nC√°lculo ‚Äúa mano‚Äù de la curva de densidad estimada con kernel gaussiano:\n\nh &lt;- 0.1 #ancho de banda\n\nkernel_normal &lt;- function(x, h, datos) {mean(dnorm((x - datos)/h))/h}\nkernel_normal &lt;- Vectorize(kernel_normal, vectorize.args = \"x\")\n\nz &lt;- tibble(\n  ejex = seq(min(iris$Petal.Width), max(iris$Petal.Width), length.out = 500),\n  ejey = kernel_normal(ejex, h = h, datos = iris$Petal.Width)\n)\n\nggplot() + \n  stat_density(aes(x = iris$Petal.Width), bw = h, alpha = 0.5, kernel = \"gaussian\") +\n  geom_line(data = z, aes(x = ejex, y = ejey), color = \"red\", linewidth = 2) +\n  scale_x_continuous(limits = range(z$ejex))\n\n\n\n\n\n\n\n\n\n8.3.1 Ridgeline plots\n\nEstos gr√°ficos surgen ante la necesidad de comparar subgrupos de la misma poblaci√≥n mediante m√∫ltiples curvas de densidad. Debajo vemos la soluci√≥n ‚Äúcom√∫n‚Äù a este problema:\n\n\nggplot(data = iris) +\n  aes(x = Petal.Width, fill = Species, color = Species) +\n  geom_density(alpha = 0.4)\n\n\n\n\n\n\n\n\n\nLos ridgeline plots (por ridgeline mountains, crestas o riscos de monta√±as) constituyen una variante al gr√°fico presentado arriba, ya que proponen apilar las distintas curvas sobre el eje vertical, en lugar de superponerlas.\nSuelen ser particularmente √∫tiles para mostrar tendencias en el tiempo o ante la presencia de muchas distribuciones para comparar.\nDado que el eje horizontal representa la variable continua y el vertical la variable de agrupaci√≥n, no hay un eje apartado para la densidad. El prop√≥sito del gr√°fico no es mostrar expl√≠citamente los valores de densidad estimados, sino permitir una comparaci√≥n f√°cil de las formas y alturas de las densidades.\nEn R armamos este tipo de visualizaci√≥n mediante la funci√≥n geom_density_ridges() del paquete ggridges:\n\n\nggplot(data = iris) +\n  aes(y = Species, x = Petal.Width, fill = Species) +\n  geom_density_ridges() +\n  labs(x = \"Ancho de P√©talo (cm)\", y = \"Especie\") +\n  theme_ridges() + \n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n8.3.2 Gr√°ficos de violines\n\nLos gr√°ficos de violines persiguen el mismo objetivo que los boxplots, pero mostrando curvas de densidad estimadas en lugar de cajas. Las curvas se rotan 90 grados y se dibujan en espejo (son sim√©tricas). El aspecto resultante le da el nombre de viol√≠n al gr√°fico.\nSu uso se justifica si se tiene una suficiente cantidad de datos como para que la estimaci√≥n de la densidad sea precisa. Adem√°s, pueden mostrar m√°s matices de las distribuciones (por ejemplo bimodalidad) en comparaci√≥n a lo que se puede lograr mediante un boxplot.\nDebajo presentamos dos ejemplos construidos a trav√©s de la funci√≥n geom_violin() de ggplot2: una sin puntos superpuestos y otra con puntos perturbados (jittered):\n\n\nviolin1 &lt;- ggplot(data = iris) + \n  aes(y = Petal.Width, x = Species, fill = Species) +\n  geom_violin() + \n  ggtitle(\"Gr√°fico de Viol√≠n sin puntos\") +\n  theme(legend.position = \"none\")\n\nviolin2 &lt;- ggplot(data = iris) + \n  aes(y = Petal.Width, x = Species, fill = Species) +\n  geom_jitter(width = 0.25, height = 0) +\n  geom_violin(alpha = 0.4) + \n  ggtitle(\"Gr√°fico de Viol√≠n con puntos\") +\n  theme(legend.position = \"none\")\n\nplot_grid(violin1, violin2)",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#diagramas-de-caja",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#diagramas-de-caja",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.4 Diagramas de Caja",
    "text": "8.4 Diagramas de Caja\n\nLos diagramas de caja (boxplots) fueron inventados por John Tukey a principios de la d√©cada del ‚Äô70. Ganaron mucha popularidad principalmente debido a dos caracter√≠sticas:\n\nSon altamente informativos: podemos enterarnos de la mediana, los cuartiles, la forma, dispersi√≥n y asimetr√≠a de la distribuci√≥n, etc.\nSon muy f√°ciles de graficar a mano, detalle fundamental cuando las computadoras no eran tan populares como ahora.\n\n\n\n\n\n\n\n\n\n\n\n\nElementos que lo componen:\n\nMediana: medida de posici√≥n central de la distribuci√≥n (\\(Q_2\\)).\nCuartil inferior: \\(Q_1\\) = cuantil 0.25.\nCuartil superior: \\(Q_3\\) = cuantil 0.75.\nRango intercuartil o intercuart√≠lico \\(RI=(Q_3-Q_1)\\): medida de dispersi√≥n de la distribuci√≥n. El 50% de los datos se encuentran entre el cuartil inferior y el superior. Un valor de RI peque√±o indica homogeneidad alrededor de la mediana, mientras que un valor grande indica heterogeneidad.\nValor adyacente superior: mayor observaci√≥n menor o igual a \\(Q_3 + 1.5 \\times RI\\).\nValor adyacente inferior: menor observaci√≥n mayor o igual a \\(Q_1 - 1.5 \\times RI\\).\nValores externos: observaciones m√°s all√° de los valores adyacentes (outliers), se grafican en forma individual. Pueden no existir, en cuyo caso los valores adyacentes coinciden con el m√°ximo y m√≠nimo.\n\nVeremos 4 alternativas para graficar boxplots en R:\n\nOpci√≥n 1: versi√≥n com√∫n.\nOpci√≥n 2: se agregan puntos superpuestos con cierto nivel de jitter.\nOpci√≥n 3: marca un intervalo de confianza del 95% para la mediana, calculado como \\(mediana \\pm1.58 \\times RI/\\sqrt{n}\\). Se lo conoce como notched boxplot.\nOpci√≥n 4: con ancho (o alto) de caja proporcional al tama√±o muestral de cada grupo. Usamos el dataset mtcars para apreciar mejor esta caracter√≠stica.\n\n\n\nb1 &lt;- ggplot(data = iris) + \n  aes(x = Petal.Width, y = Species, fill = Species) +\n  geom_boxplot() +\n  ggtitle(\"Opci√≥n 1: default\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\nb2 &lt;- ggplot(data = iris) +\n  aes(x = Petal.Width, y = Species, fill = Species) +\n  geom_jitter(width = 0, height = 0.2) +\n  # Usamos shape NA para que no aparezcan dos veces los outliers\n  geom_boxplot(outlier.shape = NA, alpha = 0.5) + \n  ggtitle(\"Opci√≥n 2: con jitter\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\nb3 &lt;- ggplot(data = iris) +\n  aes(x = Petal.Width, y = Species, fill = Species) +\n  geom_boxplot(notch = TRUE) + \n  ggtitle(\"Opci√≥n 3: notched\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\nb4 &lt;- ggplot(data = mtcars) + \n  aes(x = mpg, y = factor(gear), fill = factor(gear)) +\n  geom_boxplot(varwidth = TRUE) +\n  ggtitle(\"Opci√≥n 4: proporcional a n\") +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\nplot_grid(b1, b2, b3, b4)",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#gr√°ficos-de-cuantiles",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#gr√°ficos-de-cuantiles",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.5 Gr√°ficos de Cuantiles",
    "text": "8.5 Gr√°ficos de Cuantiles\n\nEstos gr√°ficos permiten visualizar la distribuci√≥n de los datos, entendiendo a la misma como un conjunto de posiciones.\n\n\n\n\n\n\n\nDefinici√≥n\n\n\n\nEl cuantil \\(f\\), llamado \\(q(f)\\), es el valor tal que aproximadamente una fracci√≥n \\(f\\) del conjunto de datos es menor o igual que \\(q(f)\\).\n\n\n\nUn cuantil estimado a trav√©s de los datos es una magnitud aproximada porque puede no existir un valor con una fracci√≥n \\(f\\) de datos menor o igual al mismo.\nPara construir los cuantiles \\(q(f)\\), se ordena a la muestra de menor a mayor obteniendo los valores ascendentes \\(x_{(i)}\\) para \\(i=1,2,...,n\\).\nSe considera que cada valor ordenado \\(x_{(i)}\\) es el cuantil \\(q(f_i)\\) que acumula una fracci√≥n igual a:\n\\[f_i=\\dfrac{i-0.5}{n} \\]\nSi bien esta es la definici√≥n m√°s usual, existen alternativas, como por ejemplo \\(f_i=i/(n+1)\\) o bien \\(f_i=i/n\\).\nEjemplo: si \\(n=50\\), el quinto dato ordenado \\(x_{(5)}\\) es el cuantil \\((5-0.5)/ 50 = 0.09\\), es decir \\(x_{(5)} = q(0.09)\\) y consideramos que el 9% de los datos son menores o iguales a \\(x_{(5)}\\).\nLos valores \\(f_i\\) poseen incrementos de \\(1/n\\), comenzando por \\(0.5/n\\), y terminando en \\(1-0.5/n\\). Si bien definimos \\(q(f)\\) s√≥lo para los valores de \\(f\\) que son iguales a los \\(f_i\\), esto puede extenderse a todos los valores de \\(f\\) entre \\(0\\) y \\(1\\) mediante interpolaci√≥n y extrapolaci√≥n lineal.\nUna vez que tenemos todos los cuantiles calculados, graficamos \\(x_{(i)}\\) vs \\(f_i\\).\nEjemplo con datos simulados a partir de una normal est√°ndar:\n\n\nset.seed(1974)\nz &lt;- rnorm(1000)\n\nggplot() + \n  aes(sample = z) +\n  stat_qq(distribution = qunif, geom = \"line\")",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#datos-multivariados",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#datos-multivariados",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.6 Datos Multivariados",
    "text": "8.6 Datos Multivariados\n\nEn la Unidad 1 de la materia vimos c√≥mo agregar una tercera variable a un gr√°fico de dispersi√≥n mediante las est√©ticas de tama√±o (di√°metro del punto) o color (paletas con gradientes).\nEn esta secci√≥n mencionaremos algunas alternativas que tenemos a la hora de visualizar m√°s de dos variables num√©ricas al mismo tiempo.\n\n\n8.6.1 Dispersi√≥n en 3D\n\nSi bien hoy en d√≠a existen muchos paquetes de software que facilitan la visualizaci√≥n de datos trivariados, no debe olvidarse que el resultado para nuestra vista es siempre una representaci√≥n en dos dimensiones, y su interpretaci√≥n es altamente dependiente del √°ngulo elegido, Debido a estos detalles, muchos autores no recomiendan su uso.\nPasando por alto esta recomendaci√≥n, vamos a ver c√≥mo llevar a cabo esta tarea en R mediante el paquete rgl (dejamos de lado moment√°neamente a ggplot2 ya que no posee la capacidad de renderizar gr√°ficos din√°micos en 3D).\nDebajo graficamos tres variables num√©ricas en simult√°neo para el conjunto de datos iris. Adem√°s, la especie de cada flor se representa mediante una escala de colores (rojo para setosa, azul para versicolor y verde para virginica):\n\n\nplot3d(\n  x = iris$Petal.Width, \n  y = iris$Petal.Length, \n  z = iris$Sepal.Width, \n  col = c(rep(\"red\", 50), rep(\"blue\", 50), rep(\"green\", 50)),\n  size = 10,\n  xlab = \"Ancho del petalo\",\n  ylab = \"Largo del petalo\",\n  zlab = \"Ancho del sepalo\"\n  )\nrglwidget(width = 600, height = 600)\n\n\n\n\n\n\nUna alternativa muy recomendable es Plotly (link a su web oficial), compa√±√≠a canadiense fundada en 2013 que ofrece herramientas de visualizaci√≥n y data analytics asociadas generalmente a lenguajes de programaci√≥n como Python o JavaScript.\n\n\n\n\n\n\n\n\n\n\n\nEntre los muchos productos desarrollados por esta empresa se encuentra el paquete de R que lleva su nombre, orientado a generar visualizaciones din√°micas.\nEn esta materia ya usamos plotly al momento de crear gr√°ficos de tipo treemap. Ahora veamos c√≥mo podemos usarlo para generar un gr√°fico de dispersi√≥n 3D:\n\n\nplot_ly(\n  data = iris, \n  x = ~Petal.Width, \n  y = ~Petal.Length, \n  z = ~Sepal.Width, \n  color = ~Species,\n  type = \"scatter3d\", \n  mode = \"markers\", \n  size = I(150),\n  hoverinfo = \"text\",\n  hovertext = paste0(\n    \"&lt;b&gt;Ancho del p√©talo: &lt;/b&gt;\", iris$Petal.Width, \"&lt;br&gt;\",\n    \"&lt;b&gt;Largo del p√©talo: &lt;/b&gt;\", iris$Petal.Length, \"&lt;br&gt;\",\n    \"&lt;b&gt;Ancho del s√©palo: &lt;/b&gt;\", iris$Sepal.Width\n  )\n  ) %&gt;% \n  layout(\n    scene = list(\n      xaxis = list(title = \"Ancho del p√©talo\"),\n      yaxis = list(title = \"Largo del p√©talo\"),\n      zaxis = list(title = \"Ancho del s√©palo\")\n      )\n  )\n\n\n\n\n\n\nSi bien este paquete ofrece numerosas posibilidades (ver referencias y galer√≠a) no todos tenemos tiempo para aprender a generar gr√°ficos con una nueva sintaxis, lo que implicar√≠a acostumbrarse a escribir nuevas estructuras, funciones, argumentos, opciones, etc.\nPor suerte para nosotros, plotly puede integrarse con ggplot2 de manera muy simple a trav√©s de la funci√≥n ggplotly():\n\n\ngrafico &lt;- ggplot(data = iris) +\n  aes(x = Petal.Width, y = Petal.Length, color = Species) +\n  geom_point()\n\nggplotly(grafico)\n\n\n\n\n\n\n\n8.6.2 Coplots\n\nSi no queremos depender de una visualizaci√≥n interactiva en 3D, una alternativa son los denominados coplots (conditioning plots).\nEste tipo de gr√°ficos asigna el rol de ‚Äúcondicionante‚Äù a una de las tres variables en estudio, graficando la relaci√≥n entre las dos restantes para subconjuntos de la poblaci√≥n en diferentes paneles.\nEn R podemos armar estos gr√°ficos mediante la funci√≥n gg_coplot() del paquete ggcleveland (Prunello & Mar√≠, 2021).\nVeamos un coplot para analizar la relaci√≥n entre ancho y largo del p√©talo, condicionada a los valores de ancho de s√©palo:\n\n\ngg_coplot(\n  df = iris, \n  x = Petal.Width, \n  y = Petal.Length, \n  faceting = Sepal.Width,\n  number_bins = 6, \n  overlap = 1/2, \n  xlabel = \"Ancho del p√©talo\",\n  ylabel = \"Largo del p√©talo\",\n  facet_label = \"Ancho del s√©palo\",\n  loess_degree = 2\n  )\n\n\n\n\n\n\n\n\n\nEn este tipo de visualizaciones es com√∫n agregar una curva mediante ajuste LOESS para verificar si la relaci√≥n entre las 2 variables graficadas es homog√©nea a lo largo de los diferentes intervalos de la ‚Äúcondicionante‚Äù.\nEn un coplot los intervalos empleados para condicionar los paneles se solapan, lo cual implica que un mismo individuo aparece en m√°s de un panel. Para definir la longitud de cada intervalo deben tenerse en cuenta dos criterios:\n\nCantidad de puntos: la amplitud de los intervalos debe ser tal que los paneles dependientes posean suficientes puntos para visualizar la relaci√≥n existente.\nResoluci√≥n: la amplitud debe ser lo suficientemente peque√±a para mantener una resoluci√≥n razonable. Si el intervalo condicionante es muy grande, existe el riesgo de una visualizaci√≥n distorsionada cuando la naturaleza de la dependencia cambia dram√°ticamente a medida que crecen los valores de la variable condicionante.\n\n\n\n\n8.6.3 Paquete gganimate\n\ngganimate es una extensi√≥n de ggplot2 que ofrece herramientas para crear gr√°ficos animados a partir de objetos ggplot. Este paquete es √∫til cuando queremos representar en un mismo gr√°fico diferentes per√≠odos temporales, o bien destacar las diferencias entre distintos grupos de individuos.\n\n\n\n\n\n\n\n\n\n\n\nVeamos un ejemplo donde el objetivo es analizar la evoluci√≥n a trav√©s de los a√±os del PBI (gdpPercap) per c√°pita y la esperanza de vida (lifeExp) de varios pa√≠ses seg√∫n continente, tomando datos del paquete gapminder:\n\n\nhead(gapminder)\n\n# A tibble: 6 √ó 6\n  country     continent  year lifeExp      pop gdpPercap\n  &lt;fct&gt;       &lt;fct&gt;     &lt;int&gt;   &lt;dbl&gt;    &lt;int&gt;     &lt;dbl&gt;\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n6 Afghanistan Asia       1977    38.4 14880372      786.\n\n\n\n\n\nVamos a tomar el a√±o como variable de transici√≥n, utilizando funciones de gganimate para construir un gr√°fico animado.\nLos pasos a seguir para generar la animaci√≥n en formato gif son:\n\nCrear un gr√°fico de manera com√∫n y corriente con ggplot2.\nAgregar una capa extra con alguna de las funciones transition de gganimate, las cuales crean un gr√°fico diferente para cada valor de la variable de transici√≥n establecida.\nGenerar un objeto ‚Äúanimado‚Äù mediante la funci√≥n animate(), eligiendo la cantidad de fotogramas.\nGuardar el objeto animado en un archivo en nuestra PC, con formato gif, utilizando la funci√≥n anim_save().\n\n\n\nPaso 1: gr√°fico b√°sico\n\nEn este gr√°fico cada pa√≠s est√° representado por un punto de un determinado color, cuyo di√°metro depende de la cantidad de habitantes. Se observa una posible relaci√≥n positiva entre PBI per c√°pita y esperanza de vida:\n\n\npbi_esp &lt;- ggplot(data = gapminder) +\n  aes(x = log(gdpPercap), y = lifeExp, size = pop, colour = country) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = 'Logaritmo del PBI per C√°pita', \n       y = 'Esperanza de Vida (en a√±os)') +\n  theme_bw() +\n  theme(axis.title = element_text(face = \"bold\"))\n\npbi_esp + facet_wrap(~year)\n\n\n\n\n\n\n\n\n\n\nPaso 2: transici√≥n animada\n\nIntercambiamos la capa de paneles por una de transici√≥n animada y agregamos un t√≠tulo din√°mico:\n\n\npbi_esp_animado &lt;- pbi_esp + \n  transition_time(year) + #Variable de transici√≥n\n  ease_aes(\"linear\") + #Tipo de transici√≥n\n  ggtitle(\"A√±o: {frame_time}\") #T√≠tulo din√°mico\n\npbi_esp_animado\n\n\n\n\n\n\n\n\n\n\n\n\n8.6.3.1 Paso 3: funci√≥n animate()\n\nAntes de guardar la animaci√≥n en un objeto de R, dividimos el gr√°fico anterior en paneles seg√∫n continente. Luego, usamos la funci√≥n animate() para especificar opciones referidas a la generaci√≥n del gif, en este caso, la cantidad de frames (fotogramas):\n\n\npbi_esp_ok &lt;- pbi_esp_animado + facet_wrap(~continent)\n\nanimacion &lt;- animate(\n  plot = pbi_esp_ok, \n  renderer = gifski_renderer(), \n  nframes = 50 # Cantidad de fotogramas\n)\n\n\n\nPaso 4: exportaci√≥n del gif\n\nPor √∫ltimo, mediante la funci√≥n anim_save() exportamos a nuestra PC un archivo con la animaci√≥n generada:\n\n\n# Guardamos la animaci√≥n en un archivo formato gif\nanim_save(filename = \"Gapminder.gif\", animation = animacion)",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#radar-chart",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#radar-chart",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.7 Radar Chart",
    "text": "8.7 Radar Chart\n\nLos radar charts, tambi√©n conocidos como spider charts, son una manera de visualizar m√∫ltiples variables cuantitativas medidas a un mismo individuo utilizando un √∫nico gr√°fico, cuya forma es circular.\nEn teor√≠a, permiten comparar individuos de un solo vistazo a trav√©s de varios indicadores num√©ricos. Veamos un ejemplo donde se grafican las calificaciones de dos estudiantes en diversas materias (tomado de la excelente web https://www.data-to-viz.com/):\n\n\n\n\n\n\n\n\n\n\n\nAl igual que los gr√°ficos en 3D, este tipo de visualizaciones reciben varias cr√≠ticas por parte de los expertos. Sus principales desventajas son:\n\nLas cantidades son complejas de ‚Äúmedir‚Äù a simple vista dada la confecci√≥n circular del gr√°fico (siempre lo lineal es m√°s f√°cil).\nEl orden asignado a las variables posee un gran impacto sobre la apariencia final del gr√°fico.\nEl escalamiento necesario que se aplica sobre todas las variables para estandarizar rangos de amplitud puede distorsionar algunas diferencias.\nNo cumplen con el principio de tinta proporcional. Por ejemplo, un individuo con un score de 2 en todas sus variables deber√≠a tener un √°rea igual al doble que la de un individuo con score de 1 en todas sus variables; sin embargo, esto no ocurre, ya que las √°reas aumentan cuadr√°ticamente.\n\nOtras cr√≠ticas a estos gr√°ficos pueden encontrarse en este enlace. A pesar de todo esto, su popularidad ha ido en aumento, en parte gracias a su presencia en diversos videojuegos de f√∫tbol (PES, FIFA, etc.).\n\n\n8.7.1 Datos: Mundial de Qatar 2022\n\nPara homenajear a los juegos que han hecho populares este tipo de gr√°ficos, vamos a trabajar con un conjunto de datos que posee informaci√≥n sobre todos los jugadores que participaron en el Mundial de Qatar 2022. En este link hay m√°s detalles sobre el origen de la base.\nLos datos se encuentran almacenados en formato .csv, dentro del archivo llamado fifa2022. Las variables disponibles son:\n\nplayer: nombre del jugador.\nposition: posici√≥n m√°s habitual en la que juega (GK: arqueros, DF: defensores, MF: mediocampistas, FW: delanteros).\nteam: selecci√≥n.\nage: edad del jugador al inicio de la temporada.\nminutes_90s: total de minutos jugados durante el Mundial, dividido 90 (da idea de cu√°ntos partidos completos jug√≥).\ncards_red: cantidad de tarjetas rojas recibidas.\ncards_yellow: cantidad de tarjetas amarillas recibidas.\nfouls: faltas cometidas.\nfouled: faltas recibidas.\nball_recoveries: cantidad pelotas recuperadas.\ngoals: goles convertidos.\ngames: partidos jugados.\nminutes_pct: porcentaje de minutos jugados (minutos jugados dividido el total de minutos que jug√≥ su selecci√≥n en todo el mundial).\npasses_pct: porcentaje de pases completados.\ntouches: n√∫mero de veces que el jugador toc√≥ la pelota.\ncontinent: continente al que pertenece la selecci√≥n.\nronda: indica hasta qu√© ronda lleg√≥ la selecci√≥n a la que pertenece cada jugador.\namarillas: toma el valor ‚Äúsi‚Äù si el jugador tuvo tarjetas amarillas o ‚Äúno‚Äù en caso contrario.\n\nCargamos los datos y vemos un resumen de sus variables:\n\n\nmundial &lt;- read_csv(\"../data/unidad04/fifa2022.csv\")\nglimpse(mundial)\n\nRows: 680\nColumns: 18\n$ player          &lt;chr&gt; \"Aaron Mooy\", \"Aaron Ramsey\", \"Abdelhamid Sabiri\", \"Ab‚Ä¶\n$ position        &lt;chr&gt; \"MF\", \"MF\", \"MF\", \"DF\", \"FW\", \"FW\", \"DF\", \"FW\", \"MF\", ‚Ä¶\n$ team            &lt;chr&gt; \"Australia\", \"Wales\", \"Morocco\", \"Qatar\", \"Morocco\", \"‚Ä¶\n$ age             &lt;dbl&gt; 32.26, 31.98, 26.05, 29.31, 32.00, 21.00, 26.62, 18.78‚Ä¶\n$ minutes_90s     &lt;dbl&gt; 4.0, 3.0, 2.0, 3.0, 0.8, 1.0, 3.7, 0.0, 2.2, 2.0, 1.9,‚Ä¶\n$ cards_red       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ‚Ä¶\n$ cards_yellow    &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 1, 1, 0, 1, 0, ‚Ä¶\n$ fouls           &lt;dbl&gt; 4, 3, 2, 1, 3, 4, 3, 0, 4, 3, 8, 1, 0, 1, 2, 6, 10, 0,‚Ä¶\n$ fouled          &lt;dbl&gt; 1, 3, 3, 4, 2, 0, 0, 0, 1, 3, 4, 0, 0, 4, 1, 13, 4, 1,‚Ä¶\n$ ball_recoveries &lt;dbl&gt; 35, 19, 7, 11, 4, 4, 17, 0, 4, 15, 9, 2, 1, 3, 10, 46,‚Ä¶\n$ goals           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, ‚Ä¶\n$ games           &lt;dbl&gt; 4, 3, 5, 3, 4, 3, 4, 1, 3, 3, 2, 1, 2, 1, 3, 7, 6, 1, ‚Ä¶\n$ minutes_pct     &lt;dbl&gt; 100.0, 98.5, 27.4, 100.0, 10.3, 14.1, 91.9, 0.4, 72.6,‚Ä¶\n$ passes_pct      &lt;dbl&gt; 78.3, 78.6, 77.6, 75.8, 53.3, 76.9, 74.7, 100.0, 79.1,‚Ä¶\n$ touches         &lt;dbl&gt; 255, 147, 86, 193, 28, 40, 210, 2, 98, 129, 105, 19, 2‚Ä¶\n$ continent       &lt;chr&gt; \"Oceania\", \"Europe\", \"Africa\", \"Asia\", \"Africa\", \"Afri‚Ä¶\n$ ronda           &lt;chr&gt; \"octavos de final\", \"fase de grupos\", \"final o tercer ‚Ä¶\n$ amarillas       &lt;chr&gt; \"si\", \"si\", \"si\", \"no\", \"no\", \"no\", \"no\", \"no\", \"no\", ‚Ä¶\n\n\n\n\n8.7.2 Aplicaci√≥n en R\n\nDado que hay 680 jugadores en la base, vamos a limitarnos a trabajar con los de la Selecci√≥n Argentina.\nEl preprocesamiento de la base incluye tambi√©n un paso de re-escalamiento, en el cual convertimos todas las variables num√©ricas a una nueva escala, donde el m√≠nimo valor observado pasa a ser 0 y el m√°ximo pasa a ser 1.\nPara esta conversi√≥n usamos la funci√≥n rescale() del paquete scales:\n\n\nargentina &lt;- mundial %&gt;%\n  filter(team == \"Argentina\") %&gt;%\n  select(\n    group = player, #necesario para la funcion ggradar\n    goles = goals, \n    minutos = minutes_90s,\n    toques = touches, \n    faltas_comet = fouls, \n    faltas_recib = fouled,\n    pje_pases = passes_pct,\n    recup = ball_recoveries\n    ) %&gt;% \n  mutate_if(is.numeric, rescale)\n\n\nEl gr√°fico en s√≠ mismo lo construimos a trav√©s del paquete ggradar, una extensi√≥n de ggplot2 que debe instalarse desde su propio repositorio de GitHub:\n\n\ndevtools::install_github(\"ricardo-bion/ggradar\", dependencies = TRUE)\n\n\nUna vez hecho esto, conseguir el gr√°fico es relativamente f√°cil. Veamos un ejemplo para comparar a Lionel Messi con Rodrigo De Paul:\n\n\nmessi &lt;- ggradar(\n  plot.data = filter(argentina, group == \"Lionel Messi\"),\n  plot.title = \"Lionel Messi\",\n  fill = TRUE,\n  axis.label.size = 2.5,\n  grid.label.size = 2,\n  group.point.size = 3\n  )\n\ndepaul &lt;- ggradar(\n  plot.data = filter(argentina, group == \"Rodrigo De Paul\"),\n  plot.title = \"Rodrigo De Paul\",\n  fill = TRUE,\n  axis.label.size = 2.5,\n  grid.label.size = 2,\n  group.point.size = 3\n  )\n\nplot_grid(messi, depaul)\n\n\n\n\n\n\n\n\n\nDebajo vemos un gr√°fico con la comparaci√≥n de los 24 jugadores que sumaron minutos durante el Mundial:",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#mapas-de-calor",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#mapas-de-calor",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.8 Mapas de Calor",
    "text": "8.8 Mapas de Calor\n\nComo alternativa a los radar charts, presentamos los conocidos mapas de calor o heatmaps.\nEste tipo de visualizaci√≥n sirve para representar una matriz de datos num√©ricos, reemplazando cada valor por una celda pintada con un color, el cual indica la magnitud de la observaci√≥n correspondiente.\nAunque este tipo de gr√°fico no deja apreciar f√°cilmente los valores exactos que se muestran, hace un excelente trabajo al resaltar tendencias generales.\nDebajo vemos un heatmap para los jugadores de la Selecci√≥n Argentina, a trav√©s del cual podemos visualizar su rendimiento durante el Mundial de Qatar 2022:\n\n\nargentina %&gt;%\n  pivot_longer(-group) %&gt;%\n  group_by(name) %&gt;%\n  mutate(value = (value - mean(value)) / sd(value)) %&gt;%\n  ungroup() %&gt;% \n  ggplot() +\n  aes(x = name, y = group, fill = value) +\n  geom_tile(colour = \"white\") +\n  scale_fill_gradient2(low = \"darkblue\", mid = \"white\", high = \"red\") +\n  labs(x = \"Variable\", y = \"Jugador\")\n\n\n\n\n\n\n\n\n\nObservaciones: generalmente en las columnas se presentan las variables de inter√©s y en las filas los individuos. Los datos se estandarizan previamente para homogeneizar rangos de variaci√≥n entre diferentes variables.\nUn tipo de heatmap m√°s complejo surge cuando agregamos t√©cnicas de an√°lisis por conglomerados. En este caso se reordenan filas y columnas de acuerdo al resultado de alg√∫n proceso de clusterizaci√≥n, para mostrar grupos de individuos y/o variables con patrones similares.\nEn particular, si el agrupamiento surge de un an√°lisis de conglomerados jer√°rquicos, suelen agregarse los dendrogramas a la figura.\nVeamos un ejemplo con el paquete pheatmap, para el cual definimos de antemano 4 clusters (conglomerados) de jugadores:\n\n\nmatriz &lt;- argentina %&gt;% select(-group) %&gt;% as.matrix() %&gt;% scale()\nrownames(matriz) &lt;- argentina$group\npheatmap(matriz, cutree_rows = 4, angle_col = 0, fontsize_col = 7)\n\n\n\n\n\n\n\n\n\nIntentamos algunas interpretaciones de los clusters conformados por este m√©todo:\n\nCluster 1: jugadores con pocos minutos disputados durante el Mundial, en general poseen un porcentaje medio/alto de pases acertados.\nCluster 2: es el m√°s extenso de los 4. Si bien no posee una identidad clara, abarca jugadores con niveles medio/bajos de cantidad de toques y recuperaciones.\nCluster 3: Lionel Messi. √önico en su especie, es por lejos quien m√°s goles hizo y a quien mayor cantidad de faltas le cometieron. Tambi√©n posee niveles altos de cantidad de toques y minutos jugados.\nCluster 4: el coraz√≥n del equipo, est√° conformado por los 3 volantes titulares (Enzo, Alexis y De Paul) m√°s la pareja de marcadores centrales (Romero y Otamendi). Es el cluster ‚Äúr√∫stico‚Äù, con mayor cantidad de faltas cometidas y alto nivel de recuperaciones.\n\nSi bien las interpretaciones de los cluster obtenidos pueden ser algo sesgadas o subjetivas, esta t√©cnica es √∫til para descubrir perfiles de individuos similares entre s√≠, con respecto a las variables incluidas en el an√°lisis.\n\n\n8.8.1 Matrices de Correlaci√≥n\n\nOtro uso com√∫n de los heatmaps ocurre cuando queremos visualizar matrices de correlaci√≥n calculadas a partir de bases con alto valor de \\(p\\) (muchas variables).\nEn estos casos el paquete corrplot permite realizar mapas de calor muy √∫tiles para describir de manera visual la informaci√≥n guardada en este tipo de matrices, al reemplazar los valores num√©ricos por una escala de colores.\nEl paquete ofrece una gran cantidad de variantes para la visualizaci√≥n. Veremos solo algunas, usando nuevamente los datos mtcars:\n\n\nCaso 1: tama√±o del c√≠rculo proporcional a la correlaci√≥n\n\nmatriz_corr &lt;- cor(mtcars)\ncorrplot(matriz_corr)\n\n\n\n\n\n\n\n\n\n\nCaso 2: √°ngulo de la elipse seg√∫n tipo de relaci√≥n\n\ncorrplot(matriz_corr, method = \"ellipse\")\n\n\n\n\n\n\n\n\n\n\nCaso 3: variables reordenadas seg√∫n an√°lisis de conglomerados\n\ncorrplot.mixed(matriz_corr, upper = \"ellipse\", order = \"hclust\")",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#series-de-tiempo",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#series-de-tiempo",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.9 Series de Tiempo",
    "text": "8.9 Series de Tiempo\n\nLos gr√°ficos de series de tiempo son un cl√°sico de la visualizaci√≥n de datos. Se los puede pensar como un caso especial del diagrama de dispersi√≥n, cuando una de las dos variables representa el paso del tiempo, y deseamos representar la evoluci√≥n de la otra variable.\nEn ggplot2 se los construye mediante la funci√≥n geom_line(). Debajo vemos un ejemplo con los datos de gapminder, convertido a plotly para facilitar su interpretaci√≥n:\n\n\nfiltrado &lt;- gapminder %&gt;% \n  mutate(pobl = pop/1000000) %&gt;% \n  filter(\n    country %in% c(\"Argentina\", \"Brazil\", \"Colombia\", \"Ecuador\", \"Chile\", \n                   \"Paraguay\", \"Bolivia\", \"Peru\", \"Uruguay\", \"Venezuela\")\n         )\n  \nserie_sudam &lt;- ggplot(data = filtrado) +\n  aes(x = year, y = pobl, color = country) +\n  geom_line(linewidth = 1) +\n  geom_point(size = 2) +\n  scale_x_continuous(breaks = seq(1952, 2007, 5)) +\n  scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 200)) +\n  labs(x = \"A√±o\", y = \"Poblaci√≥n (en millones)\",\n       title = \"Evoluci√≥n de la poblaci√≥n de los pa√≠ses sudamericanos\") +\n  theme_bw()\n\nggplotly(serie_sudam)\n\n\n\n\n\n\n\n\nA continuaci√≥n presentamos dos paquetes que nos ayudan a darle un toque m√°s interesante a este tipo de gr√°ficos.\n\n\n8.9.1 Paquete echarts4r\n\nEste paquete est√° desarrollado en JavaScript y permite crear varios tipos de gr√°ficos. En este enlace podemos consultar una galer√≠a con ejemplos.\nDebajo vemos el c√≥digo necesario para recrear las series temporales presentadas arriba. Al igual que ocurre con plotly, la librer√≠a echarts4r genera gr√°ficos din√°micos e interactivos:\n\n\nfiltrado %&gt;%\n  group_by(country) %&gt;%\n  e_charts(x = year) %&gt;%\n  e_line(serie = pobl) %&gt;%\n  e_title(\"Evoluci√≥n de la poblaci√≥n de los pa√≠ses sudamericanos\") %&gt;%\n  e_x_axis(name = \"A√±o\", serie = year) %&gt;%\n  e_y_axis(name = \"Poblaci√≥n (en millones)\") %&gt;%\n  e_legend(orient = \"vertical\", left = \"10%\", top = \"10%\") %&gt;%\n  e_tooltip(trigger = \"axis\")\n\n\n\n\n\n\n\n8.9.2 Paquete highcharter\n\nLa librer√≠a highcharter tambi√©n est√° desarrollada en JavaScript y ofrece resultados din√°micos. Se diferencia de otros paquetes para visualizaci√≥n en que est√° enfocado principalmente en datos econ√≥micos.\nDebajo vemos un gr√°fico temporal que analiza datos OHLC (Open-high-low-close chart) para acciones de la empresa Amazon. Para acceder a este tipo de datos es necesario tener instalado, adem√°s, el paquete quantmod:\n\n\namazon &lt;- getSymbols(\"AMZN\", auto.assign = FALSE)\n\nhchart(amazon, type = \"ohlc\") %&gt;% \n  hc_title(text = \"Serie temporal: datos OHLC para Amazon\") %&gt;%  \n  hc_add_theme(hc_theme_bloom())",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#recursos-extra",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#recursos-extra",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.10 Recursos Extra",
    "text": "8.10 Recursos Extra\n\nFrom Data to Viz: proyecto que busca clasificar diferentes tipos de gr√°ficos estad√≠sticos y visualizaciones en categor√≠as, seg√∫n su objetivo y caracter√≠sticas principales.\nThe R Graph Gallery: similar a From Data to Viz, agregar ejemplos de c√≥digo en R para desarrollar cada tipo de gr√°fico.\nPaquete ggforce: paquete que agrega complementos muy interesantes para ggplot2. Ejemplo de agrupamiento de individuos:\n\n\nlibrary(ggforce)\nlibrary(concaveman)\n\nggplot(data = iris) +\n  aes(x = Petal.Length, y = Petal.Width) +\n  geom_point() +\n  geom_mark_hull(aes(label = Species, fill = Species), show.legend = FALSE) +\n  theme_bw()",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/04_visualizacion_variables_cuantitativas.html#ejercicios",
    "href": "capitulos/04_visualizacion_variables_cuantitativas.html#ejercicios",
    "title": "8¬† Unidad 4 - Visualizaci√≥n de Variables Cuantitativas",
    "section": "8.11 Ejercicios",
    "text": "8.11 Ejercicios\n\nUsando las t√©cnicas aprendidas durante esta clase, tratar de replicar los siguientes gr√°ficos.\n\n\n8.11.1 Ridgeline\n\nUsando los datos de cultivos que trabajamos en unidades anteriores de la materia, crear un gr√°fico de curvas de densidad del estilo ridgeline que compare el rendimiento del girasol desde el a√±o 2010 en adelante (las curvas se calculan teniendo en cuenta a los departamentos como individuos).\n\n\n\n\n\n\n\n\n\n\n\n\n8.11.2 Dispersi√≥n 3D\n\nCrear un gr√°fico de dispersi√≥n en 3D para las variables touches (toques), passes_pct (% de pases correctos) y ball_recoveries (pelotas recuperadas) utilizando a los jugadores de las 8 selecciones que alcanzaron los cuartos de final del Mundial de Qatar (ver variable ronda).\nEl recuadro a mostrar cuando se pasa el mouse en cada punto debe mostrar, adem√°s de las 3 variables graficadas, el nombre, selecci√≥n y posici√≥n de cada jugador.\n\n\n\n\n\n\n\n\n\n8.11.3 Gr√°fico animado\n\nUsando la base de datos de gapminder, generar esta animaci√≥n que muestra la evoluci√≥n temporal del PBI y la esperanza de vida para tres pa√≠ses: Argentina, China y Francia.\n\n\n\n\n\n\n\n\n\n\n\n\n8.11.4 Radar\n\nConstruir 4 radar charts que comparen las producciones de los siguientes cultivos: arveja, avena, cebada, girasol, ma√≠z, soja, sorgo y trigo, considerando datos de la campa√±a 2018/19 en las provincias de Buenos Aires, C√≥rdoba, Entre R√≠os y Santa Fe.\n\n\n\n\n\n\n\n\n\n\n\n\n8.11.5 Mapa de Calor\n\nResumir los datos del Mundial para obtener una base de datos con un registro por selecci√≥n, que contenga la siguiente informaci√≥n: mediana de edad de los jugadores, mediana del % de pases correctos, y suma de las variables cards_red, cards_yellow, fouls y goals.\nCon esta informaci√≥n construir un mapa de calor dividiendo a las selecciones en 5 clusters.",
    "crumbs": [
      "Unidad 4. Cuanti",
      "<span class='chapter-number'>8</span>¬† <span class='chapter-title'>Unidad 4 - Visualizaci√≥n de Variables Cuantitativas</span>"
    ]
  },
  {
    "objectID": "capitulos/05.html",
    "href": "capitulos/05.html",
    "title": "Unidad 5. Shiny",
    "section": "",
    "text": "Presentaci√≥n de la Unidad 5.\n\nP√°gina en construcci√≥n.",
    "crumbs": [
      "Unidad 5. Shiny"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html",
    "href": "capitulos/05_shiny.html",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "",
    "text": "Introducci√≥n a Shiny\ninstall.packages(\"shiny\")",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#introducci√≥n-a-shiny",
    "href": "capitulos/05_shiny.html#introducci√≥n-a-shiny",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "",
    "text": "¬øQu√© es Shiny?\nShiny (W. Chang et al, 2021) es un paquete de R que permite construir aplicaciones web directamente desde RStudio.\n\n\n\nUna caracter√≠stica importante de las aplicaciones web creadas mediante Shiny es que son din√°micas e interactivas. Esto implica que los usuarios pueden decidir qu√© datos ver, c√≥mo verlos, y jugar con ellos.\nShiny puede instalarse como cualquier otro paquete de R:\n\n\n\nUsos comunes de Shiny\nActualmente Shiny es utilizado con una gran variedad de prop√≥sitos, en diversos √°mbitos de aplicaci√≥n. Algunos ejemplos son:\n\nEmpresas que desarrollan tableros de informaci√≥n (dashboards) para analizar en tiempo real cientos de indicadores, m√©tricas y gr√°ficas relativas a la situaci√≥n actual de la compa√±√≠a, por ejemplo: tablero para analizar tr√°fico a√©reo seg√∫n mes y aerol√≠nea. En el mercado actual existen alternativas a Shiny, como por ejemplo Power BI o Tableau; si bien la preferencia entre uno u otro software depender√° del contexto, una b√∫squeda r√°pida en Google (‚Äòshiny vs power bi‚Äô o bien ‚Äòshiny vs tableau‚Äô) nos demuestra que la discusi√≥n sigue abierta.\nOrganismos p√∫blicos que buscan digitalizar grandes vol√∫menes de informaci√≥n, evitando de esa manera recurrir a la impresi√≥n de miles de hojas de papel. Para poder comunicar resultados de manera eficiente, es necesario que el medio a trav√©s del cual circula la informaci√≥n sea flexible y de f√°cil acceso; por ejemplo, compartir los resultados de un Censo de Poblaci√≥n y Hogares de manera f√≠sica requiere editar varios libros con cientos de tablas y cuadros desagregados seg√∫n m√∫ltiples variables (provincia, g√©nero, edad, condici√≥n de empleo, etc.). Mediante una Shiny app podemos almacenar toda esta informaci√≥n en un solo lugar, ahorrando as√≠ costos de impresi√≥n, env√≠o, etc. Ejemplo: evoluci√≥n de la cantidad de estudiantes, ingresantes y egresados/as en carreras de grado de la UNR. Otros ejemplos: https://appsilon.com/r-shiny-in-government-examples/.\nDocentes que desarrollan apps interactivas con el objetivo de facilitar la ense√±anza de conceptos mediante visualizaciones apropiadas. Ejemplo: visualizaci√≥n de distribuciones muestrales para la media, variancia y proporci√≥n.\nOrganizaciones que desean comunicar resultados de estudios o investigaciones de manera din√°mica y actualizada en tiempo real. Algunos ejemplos son: seguimiento del avance de la pandemia de COVID-19 mediante referenciaci√≥n geogr√°fica, an√°lisis de m√©tricas relacionadas a deportistas, aplicaciones que permiten importar datasets sobre los cuales se ajustan modelos predefinidos, y un largo etc√©tera. Ejemplos: app para monitoreo de casos de COVID-19 y app para visualizar en vivo los tweets m√°s relevantes con cierto hashtag.\nPersonas que arman aplicaciones s√≥lo por diversi√≥n: nube de palabras de obras de Shakespeare, juego de la memoria con stickers de paquetes de R.\n\nPara una muestra m√°s completa de las posibilidades que ofrece Shiny, recomendamos visitar la galer√≠a de apps seleccionadas por RStudio y las apps ganadoras de la 3¬∞ edici√≥n del concurso Shiny Contest.\nAdem√°s, en la p√°gina web oficial de Shiny existen numerosos ejemplos, machetes y tutoriales altamente recomendables para aquellas personas que est√©n dando sus primeros pasos con esta herramienta.\n\n\n\n\n\n\nBibliograf√≠a\n\n\n\nAquellas personas interesadas en profundizar sus conocimientos sobre Shiny pueden consultar el muy recomendable libro Mastering Shiny (2021) escrito por Hadley Wickham, desarrollador del tidyverse y referente de Posit (empresa anteriormente conocida como RStudio). El libro se encuentra disponible para ser le√≠do de manera gratuita en este link, y adem√°s, el c√≥digo utilizado para generarlo puede consultarse en este repositorio p√∫blico de GitHub.\n\n\n\n\nEstructura de una Shiny App\n\nA lo largo de este curso usaremos el t√©rmino Shiny App para referirnos al conjunto de sentencias que generan la aplicaci√≥n. Una Shiny App debe guardarse en un script de R, al cual llamaremos app.R.\nEste archivo de sentencias estar√° conformado por 3 secciones bien diferenciadas:\n\nInterfaz del usuario (user interface)\nFunci√≥n servidor (server function)\nPublicaci√≥n de la app (app deployment)\n\n\n\n\n\n\n\n\nAclaraciones\n\n\n\n\nEn versiones antiguas de Shiny era necesario crear la interfaz y el servidor en archivos separados (ui.R y server.R respectivamente), aunque hoy en d√≠a esto es optativo.\nLlamar a nuestro archivo de sentencias app.R no surge por un capricho, sino que es el nombre requerido por algunos servidores para poder ejecutar la aplicaci√≥n de manera correcta cuando se encuentra disponible online. Si estamos trabajando con Shiny apps de manera local (en nuestra PC, sin publicaci√≥n en web) podemos nombrar al script como m√°s nos guste.\nUsaremos la notaci√≥n NombrePaquete::NombreFunci√≥n() para especificar expl√≠citamente la funci√≥n que estamos utilizando. Esta es una pr√°ctica recomendada para escribir c√≥digo en R que mejora la claridad, evita conflictos y facilita el mantenimiento del c√≥digo a largo plazo.\n\n\n\n\nInterfaz\n\nLa interfaz del usuario (user interface o ui, por sus siglas en ingl√©s) se encarga de controlar el aspecto de la p√°gina web. Muchos de los conceptos necesarios para desarrollar una interfaz est√°n vinculados a lenguajes de programaci√≥n como HTML, CSS o JavaScript. Afortunadamente, las funciones del paquete bslib facilitan en gran medida nuestro trabajo y no debemos preocuparnos (demasiado) por aprender a utilizar estos lenguajes.\n\n\n\n\n\n\n\nPaquete {bslib}\n\n\n\n\nbslib proporciona un moderno conjunto de herramientas de interfaz de usuario para Shiny basado en Bootstrap. A diferencia de shiny (que utiliza Bootstrap 3) bslib utiliza la versi√≥n m√°s moderna de Bootstrap (actualmente Bootstrap 5)\nEl paquete bslib es una dependencia de shiny, es decir, se instala al momento de instalar shiny.\n\n\n\n\n\nServidor\n\nEn la secci√≥n server se escribe el c√≥digo de R que le indica a la app qu√© debe hacer y c√≥mo debe funcionar. Aqu√≠ se incluyen generalmente la manipulaci√≥n de datos, el ajuste de modelos, el armado de gr√°ficos, etc.\nEn algunas ocasiones ser√° recomendable realizar estas tareas por fuera del servidor para reducir tiempos de ejecuci√≥n (m√°s adelante hablaremos de este tema en mayor profundidad).\nLa versi√≥n m√°s simple del server es una funci√≥n con dos argumentos:\n\ninput: almacena elementos de entrada tales como opciones elegidas por los/as usuarios/as a trav√©s de la interfaz.\noutput: almacena elementos de salida para mostrar en la app: valores num√©ricos, textos, tablas, gr√°ficos, mapas o cualquier tipo de resultado que deseemos visualizar.\n\n\n\n\nEjecuci√≥n\n\nLa parte final de la aplicaci√≥n es un llamado a la funci√≥n shiny::shinyApp(), cuyos dos argumentos principales son ui y server, es decir, los dos elementos definidos anteriormente.\nEjecutar esta funci√≥n da como resultado el lanzamiento de la aplicaci√≥n, la cual podremos utilizar dentro de RStudio o usando nuestro navegador preferido (Google Chrome, Mozilla Firefox, Microsoft Edge, etc.).\nPara ver la app fuera de RStudio debemos elegir la opci√≥n Run External al momento de la ejecuci√≥n, o bien copiar y pegar en un navegador la direcci√≥n URL que se muestra en la consola mientras la app est√° activa.\nEs importante destacar que, al seguir estos pasos, la aplicaci√≥n s√≥lo funcionar√° mientras la sesi√≥n de RStudio desde la cual se lanz√≥ est√© vigente. M√°s adelante veremos c√≥mo subir nuestra aplicaci√≥n a la web para que cualquier persona con conexi√≥n a Internet pueda acceder a ella.\n\n\n\n\n\n\n\nImportante\n\n\n\nA continuaci√≥n plantearemos algunos objetivos espec√≠ficos y desarrollaremos un camino paso a paso para construir nuestra primera Shiny App.",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#datos-canciones-de-queen",
    "href": "capitulos/05_shiny.html#datos-canciones-de-queen",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "Datos: canciones de Queen",
    "text": "Datos: canciones de Queen\n\nLa popular aplicaci√≥n Spotify registra numerosas variables para cada una de las canciones disponibles en su servicio de streaming, las cuales tratan de cuantificar ciertas caracter√≠sticas musicales.\nPor ejemplo, a cada canci√≥n se le miden conceptos algo abstractos como ‚Äúenerg√≠a‚Äù, ‚Äúpositividad‚Äù, ‚Äúinstrumentalidad‚Äù, etc., adem√°s de otros mejor definidos, como duraci√≥n, volumen o nivel de popularidad.\n\n\n\n\n\n\n\n\n\n\n\nEstos datos pueden descargarse usando R mediante el paquete Rspotify, el cual se conecta a la API de Spotify para acceder a la informaci√≥n de cada artista, √°lbum y canci√≥n presente en la plataforma.\nPara este curso hemos seleccionado canciones pertenecientes a la emblem√°tica banda de rock brit√°nica Queen, formada en Londres en 1970.\n\n\n\n\n\n\n\n\n\n\n\nLa base se encuentra almacenada en el archivo de texto plano queen.txt, el cual cuenta con 152 registros (canciones) y 14 variables:\n\n\n\n\n\n\n\n\nVariable\nDescripci√≥n\n\n\n\n\nid\nC√≥digo de identificaci√≥n de la canci√≥n.\n\n\nname\nNombre de la canci√≥n.\n\n\nalbum\n√Ålbum donde aparece la canci√≥n.\n\n\npopularity\nNivel de popularidad en Spotify.\n\n\ndanceability\nMide qu√© tan ‚Äúbailable‚Äù es la canci√≥n de acuerdo a caracter√≠sticas musicales como tempo, estabilidad r√≠tmica, fuerza del pulso, etc.\n\n\nenergy\nMide intensidad y actividad, por ejemplo, canciones de heavy metal poseen valores altos de energ√≠a.\n\n\nloudness\nVolumen promedio en decibeles.\n\n\nspeechiness\nMide el nivel de oralidad: una canci√≥n muy ‚Äúhablada‚Äù posee valores altos de esta variable.\n\n\nacousticness\nMide el nivel de ac√∫stica de la canci√≥n.\n\n\ninstrumentalness\nMide qu√© tan instrumental es la canci√≥n.\n\n\nliveness\nDetecta si la canci√≥n fue grabada en vivo (recitales), en cuyo caso recibe un valor alto de esta variable.\n\n\nvalence\nMide el nivel de positividad: canciones con valores altos suenan alegres y euf√≥ricas, mientras que canciones con valores bajos suenan tristes y apagadas.\n\n\ntempo\nTempo promedio (pulsos/minuto).\n\n\nduration_ms\nDuraci√≥n de la canci√≥n en milisegundos.\n\n\n\n\nPodemos cargar los datos en R y darles una mirada r√°pida:\n\n\n\nC√≥digo\ndatos &lt;- readr::read_delim(\"../data/unidad05/queen.txt\", delim = \"\\t\")\ndplyr::glimpse(datos)\n\n\nRows: 152\nColumns: 14\n$ id               &lt;chr&gt; \"6aNP9GlBi3VHPXl7w3Qjr9\", \"5RYLa5P4qweEAKq5U1gdcK\", \"‚Ä¶\n$ name             &lt;chr&gt; \"'39\", \"A Kind Of Magic\", \"A Winter's Tale\", \"Action ‚Ä¶\n$ album            &lt;chr&gt; \"A Night At The Opera\", \"A Kind Of Magic\", \"Made In H‚Ä¶\n$ popularity       &lt;dbl&gt; 45, 72, 40, 33, 38, 33, 82, 39, 62, 37, 41, 82, 58, 3‚Ä¶\n$ danceability     &lt;dbl&gt; 0.524, 0.670, 0.286, 0.727, 0.491, 0.307, 0.933, 0.78‚Ä¶\n$ energy           &lt;dbl&gt; 0.5710, 0.7760, 0.5650, 0.4780, 0.0765, 0.7960, 0.528‚Ä¶\n$ loudness         &lt;dbl&gt; -9.686, -5.874, -6.368, -6.121, -14.570, -8.066, -6.4‚Ä¶\n$ speechiness      &lt;dbl&gt; 0.0273, 0.0356, 0.0320, 0.0403, 0.0416, 0.0950, 0.161‚Ä¶\n$ acousticness     &lt;dbl&gt; 0.02710, 0.01840, 0.17900, 0.05640, 0.78700, 0.23300,‚Ä¶\n$ instrumentalness &lt;dbl&gt; 0.00e+00, 2.94e-03, 0.00e+00, 2.62e-04, 3.06e-04, 2.0‚Ä¶\n$ liveness         &lt;dbl&gt; 0.1110, 0.1280, 0.3210, 0.0801, 0.1140, 0.3130, 0.163‚Ä¶\n$ valence          &lt;dbl&gt; 0.3730, 0.7030, 0.1320, 0.9090, 0.3050, 0.2310, 0.754‚Ä¶\n$ tempo            &lt;dbl&gt; 101.626, 130.128, 106.219, 166.364, 113.728, 181.620,‚Ä¶\n$ duration_ms      &lt;dbl&gt; 210800, 264253, 230160, 214813, 189587, 261653, 21465‚Ä¶\n\n\n\nACP\n\nSi bien la base de datos presentada se puede explorar de diversas maneras, nos enfocaremos en una meta puntual: aplicar la t√©cnica de Componentes Principales para reducir la dimensionalidad de los datos y al mismo tiempo buscar canciones con patrones de comportamiento similares.\nEl An√°lisis de Componentes Principales (ACP) puede llevarse a cabo en R de diversas maneras; en este curso aplicaremos la funci√≥n PCA() del paquete FactoMineR:\n\n\n\nC√≥digo\ncp &lt;- FactoMineR::PCA(\n  # matriz de datos: elegimos variables num√©ricas\n  X = dplyr::select(datos, dplyr::where(is.numeric)),\n  ncp = 11, # cantidad de componentes a retener\n  graph = FALSE # no mostrar los gr√°ficos\n)\n\n\n\nEn particular, vamos a focalizarnos en tres aspectos del ACP:\n\nLas cargas (loadings) asociadas a cada variable en cada una de las componentes halladas.\nEl porcentaje de variancia explicada por cada componente.\nEl gr√°fico de los individuos proyectados sobre alg√∫n par de componentes.\n\nA continuaci√≥n mostramos estos resultados para el an√°lisis llevado a cabo sobre la base completa:\n\n\n\n\nCargas para las 11 Componentes\n\n\nVariable\nCP1\nCP2\nCP3\nCP4\nCP5\nCP6\nCP7\nCP8\nCP9\nCP10\nCP11\n\n\n\n\npopularity\n-0.0014\n0.3128\n-0.6539\n0.3325\n0.4226\n0.0709\n0.3410\n-0.1953\n-0.1586\n0.0146\n0.0253\n\n\ndanceability\n0.3310\n0.8096\n-0.0955\n0.0361\n0.0042\n0.0845\n-0.0597\n0.3049\n0.2010\n-0.2735\n0.0747\n\n\nenergy\n0.8767\n-0.2090\n0.1042\n0.1470\n-0.0669\n-0.1900\n0.0159\n-0.1216\n0.0002\n0.0587\n0.3100\n\n\nloudness\n0.7752\n-0.0448\n-0.2446\n0.0906\n-0.0940\n-0.2809\n-0.0321\n-0.3331\n0.3076\n-0.0393\n-0.1819\n\n\nspeechiness\n0.4748\n-0.2219\n0.2357\n0.2339\n0.5911\n0.2990\n-0.4177\n0.0013\n0.0022\n-0.0056\n-0.0415\n\n\nacousticness\n-0.8110\n0.0381\n0.0688\n-0.0209\n0.1369\n0.2161\n0.0341\n-0.2376\n0.4340\n0.1011\n0.1180\n\n\ninstrumentalness\n-0.3579\n-0.0806\n0.3576\n0.5266\n0.2639\n-0.5298\n0.1715\n0.2635\n0.1003\n0.0105\n-0.0296\n\n\nliveness\n0.3346\n-0.3571\n0.1658\n0.5137\n-0.2855\n0.4909\n0.3492\n0.1219\n0.0798\n-0.0304\n-0.0502\n\n\nvalence\n0.4882\n0.7064\n0.3065\n-0.0845\n0.0096\n0.0674\n0.1011\n0.0731\n0.0100\n0.3708\n-0.0619\n\n\ntempo\n0.3286\n-0.1402\n0.4271\n-0.6048\n0.3357\n0.0123\n0.4257\n-0.0764\n0.0174\n-0.1534\n-0.0187\n\n\nduration_ms\n0.2533\n-0.4793\n-0.5712\n-0.3235\n0.1425\n-0.0041\n0.0493\n0.4474\n0.1739\n0.1485\n0.0097\n\n\n\n\n\n\n\n\n\n\nVariancia explicada por cada Componente\n\n\nCP\nAutovalor\n% Variancia\n% Acumulado\n\n\n\n\n1\n3.0130\n27.3905\n27.3905\n\n\n2\n1.7321\n15.7463\n43.1368\n\n\n3\n1.3256\n12.0510\n55.1878\n\n\n4\n1.2156\n11.0505\n66.2383\n\n\n5\n0.8443\n7.6750\n73.9133\n\n\n6\n0.7897\n7.1792\n81.0925\n\n\n7\n0.6421\n5.8372\n86.9298\n\n\n8\n0.6089\n5.5355\n92.4652\n\n\n9\n0.3957\n3.5972\n96.0625\n\n\n10\n0.2744\n2.4945\n98.5570\n\n\n11\n0.1587\n1.4430\n100.0000",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#paso-i-preliminares",
    "href": "capitulos/05_shiny.html#paso-i-preliminares",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "Paso I: Preliminares",
    "text": "Paso I: Preliminares\n\nNuestro objetivo consiste en desarrollar una app que permita al usuario/a seleccionar:\n\nQu√© √°lbum (o √°lbumes) incluir en el an√°lisis de CP.\nCu√°les componentes graficar.\n\nAhora que ya tenemos un objetivo planteado, lleg√≥ el momento de construir una Shiny App desde cero. Una recomendaci√≥n importante es guardar cada app en un directorio √∫nico, donde no haya aplicaciones creadas previamente ni otros archivos innecesarios.\nEn consecuencia, para empezar a armar la aplicaci√≥n, comenzamos por crear un nuevo directorio y guardar all√≠ dos archivos:\n\napp.R (por ahora vac√≠o) con codificaci√≥n UTF-8\nqueen.txt\n\n\n\n\n\nLo primero que podemos hacer dentro de app.R es leer los datos, definir interfaz y servidor vac√≠os, y hacer un llamado a la funci√≥n shiny::shinyApp():\n\n\n# Importaci√≥n de datos y ajuste CP\ndatos &lt;- readr::read_delim(\"queen.txt\", delim = \"\\t\")\ncp &lt;- FactoMineR::PCA(\n  # matriz de datos: elegimos variables numericas\n  X = dplyr::select(datos, dplyr::where(is.numeric)), \n  ncp = 11, # cantidad de componentes a almacenar\n  graph = FALSE # no mostrar los graficos\n)\n\n# Esqueleto de la Web\nMiInterfaz &lt;- bslib::page_fluid()\nMiServidor &lt;- function(input, output) {}\n\n# Lanzamiento de la app\nshiny::shinyApp(ui = MiInterfaz, server = MiServidor)\n\n\nAl detectar la funci√≥n shiny::shinyApp(), RStudio reconoce que nuestro archivo es una aplicaci√≥n web y agregar√° la opci√≥n Run App en la barra de herramientas:",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#paso-ii-interfaz",
    "href": "capitulos/05_shiny.html#paso-ii-interfaz",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "Paso II: Interfaz",
    "text": "Paso II: Interfaz\n\nEl segundo paso consiste en definir el aspecto de la p√°gina web. Algunas de las opciones disponibles en bslib son bslib::page_fluid(), bslib::page_fixed(), bslib::page_fillable(), bslib::page_navbar() y bslib::page_sidebar(), todas con diferentes estructuras predefinidas.\nComenzaremos utilizando bslib::page_fluid(), la cual permite una gran flexibilidad a la hora de dise√±ar la aplicaci√≥n. Dado que estamos dando nuestros primeros pasos con Shiny, vamos a enfocarnos en construir una p√°gina web simple, conformada s√≥lo por dos paneles; m√°s adelante estudiaremos en mayor detalle dise√±os m√°s complejos.\nPor costumbre, en el panel m√°s angosto (sidebar) ubicaremos los comandos que nos permiten controlar el output; a su vez, en el panel principal (main panel) vamos a situar los resultados que queremos visualizar.\nPodemos armar la estructura reci√©n descripta usando la funci√≥n bslib::layout_sidebar() dentro de bslib::page_fluid(). El esquema de la interfaz luce as√≠:\n\n\n\nC√≥digo\n# Importaci√≥n de datos y ajuste CP\ndatos &lt;- readr::read_delim(\"queen.txt\", delim = \"\\t\")\ncp &lt;- FactoMineR::PCA(\n  # matriz de datos: elegimos variables numericas\n  X = dplyr::select(datos, dplyr::where(is.numeric)),\n  ncp = 11, # cantidad de componentes a almacenar\n  graph = FALSE # no mostrar los graficos\n)\n\n# User Interface\nMiInterfaz &lt;- bslib::page_fluid( # Estructura general de la web\n  # T√≠tulo de la web\n  shiny::titlePanel(\"Mi Primera Shiny App - ACP sobre Canciones de Queen\"), \n  bslib::layout_sidebar( # Funci√≥n para crear paneles\n    sidebar = bslib::sidebar(), # Panel secundario\n    # Panel principal\n  )\n)\n\n# Servidor\nMiServidor &lt;- function(input, output) {}\n\n# Lanzamiento de la app\nshiny::shinyApp(ui = MiInterfaz, server = MiServidor)",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#paso-iii-outputs",
    "href": "capitulos/05_shiny.html#paso-iii-outputs",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "Paso III: Outputs",
    "text": "Paso III: Outputs\n\nAhora es el turno de definir lo que mostraremos en el panel principal. En general, cuando deseamos mostrar en Shiny alg√∫n elemento creado por nosotros/as, debemos utilizar alguna de las funciones de tipo output. Las m√°s comunes son:\n\nshiny::textOutput() para texto plano\nshiny::htmlOutput() para texto con formato HTML\nshiny::tableOutput() para tablas, matrices o conjuntos de datos\nDT::DTOutput() para tablas creadas con el paquete DT\nreactable::reactableOutput() para tablas creadas con el paquete reactable\nshiny::plotOutput() para gr√°ficos creados con el paquete ggplot2\nplotly::plotlyOutput() para gr√°ficos creados con el paquete plotly\necharts4r::echarts4rOutput() para gr√°ficos creados con el paquete echarts4r\nleaflet::leafletOutput() para mapas creados con el paquete leaflet\n\n\n\n\n\nEn nuestro caso usaremos DT::DTOutput() y reactable::reactableOutput() para mostrar tablas con las cargas y autovalores del ACP respectivamente (observaci√≥n: usamos ambos tipos de Output con fines did√°cticos; al momento de desarrollar una app deber√°n elegir uno u otro paquete) y plotly::plotlyOutput() para mostrar gr√°ficos.\nMediante el siguiente c√≥digo le avisamos a R que dentro del panel principal habr√° 4 objetos llamados tabla_cargas, tabla_pjevar, plot_scree y plot_indiv:\n\n\n\nC√≥digo\n# Importaci√≥n de datos y ajuste CP\ndatos &lt;- readr::read_delim(\"queen.txt\", delim = \"\\t\")\ncp &lt;- FactoMineR::PCA(\n  # matriz de datos: elegimos variables numericas\n  X = dplyr::select(datos, dplyr::where(is.numeric)), \n  ncp = 11, # cantidad de componentes a almacenar\n  graph = FALSE # no mostrar los graficos\n)\n\n# User Interface\nMiInterfaz &lt;- bslib::page_fluid(\n  shiny::titlePanel(\"Mi Primera Shiny App - ACP sobre Canciones de Queen\"), \n  bslib::layout_sidebar(\n    sidebar = bslib::sidebar(), \n    \n    DT::DTOutput(\"tabla_cargas\"),\n    reactable::reactableOutput(\"tabla_pjevar\"),\n    plotly::plotlyOutput(\"plot_scree\"),\n    plotly::plotlyOutput(\"plot_indiv\")\n\n  )\n)\n\n# Servidor\nMiServidor &lt;- function(input, output) {}\n\n# Lanzamiento de la app\nshiny::shinyApp(ui = MiInterfaz, server = MiServidor)",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#paso-iv-servidor",
    "href": "capitulos/05_shiny.html#paso-iv-servidor",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "Paso IV: Servidor",
    "text": "Paso IV: Servidor\n\nAhora podemos ocuparnos de definir la secci√≥n server. Este bloque estar√° constituido por una funci√≥n con dos argumentos: input y output:\n\nel argumento input es una lista donde se guardan los valores que pueden cambiar seg√∫n el deseo del usuario/a, en este caso √°lbums incluidos y componentes a graficar.\nel argumento output es una lista donde se almacenan los resultados que dependen de los valores elegidos en input, en este caso las tablas y gr√°ficos.\n\n\n\n\n\nPor ahora no nos preocuparemos por el argumento input; √∫nicamente colocaremos dentro de la funci√≥n MiServidor el c√≥digo necesario para generar los 4 objetos que deseamos mostrar:\n\n\n\nC√≥digo\n# Importaci√≥n de datos y ajuste CP\ndatos &lt;- readr::read_delim(\"queen.txt\", delim = \"\\t\")\ncp &lt;- FactoMineR::PCA(\n  # matriz de datos: elegimos variables numericas\n  X = dplyr::select(datos, dplyr::where(is.numeric)), \n  ncp = 11, # cantidad de componentes a almacenar\n  graph = FALSE # no mostrar los graficos\n)\n  \n# User Interface\nMiInterfaz &lt;- bslib::page_fluid(\n  shiny::titlePanel(\"Mi Primera Shiny App - ACP sobre Canciones de Queen\"), \n  bslib::layout_sidebar(\n    sidebar = bslib::sidebar(), \n    \n    # Usamos bslib::card() para evitar superposici√≥n de las tablas\n    # Esto parece ser comportamiento inesperado de DT::DTOutput\n    bslib::card(DT::DTOutput(\"tabla_cargas\"), height = \"620px\"), \n    reactable::reactableOutput(\"tabla_pjevar\"),\n    plotly::plotlyOutput(\"plot_scree\"),\n    plotly::plotlyOutput(\"plot_indiv\")\n\n  )\n)\n\n# Servidor\nMiServidor &lt;- function(input, output) {\n  \n  output$tabla_cargas &lt;- DT::renderDT({\n    cp$var$coord |&gt; \n      DT::datatable(options = list(pageLength = 11)) |&gt; \n      DT::formatRound(columns = 1:11, digits = 4)\n  })\n  \n  output$tabla_pjevar &lt;- reactable::renderReactable({\n    cp$eig |&gt; \n      reactable::reactable(\n        pagination = FALSE,\n        defaultColDef = reactable::colDef(\n          format = reactable::colFormat(digits = 2)\n        )\n      )\n  })\n  \n  output$plot_scree &lt;- plotly::renderPlotly({\n    gg_scree &lt;- tibble::tibble(CP = 1:nrow(cp$eig),\n                               PVE = cp$eig[,2]) |&gt; \n      ggplot2::ggplot() +\n      ggplot2::aes(x = CP, y = PVE) +\n      ggplot2::geom_line(linewidth = 1) +\n      ggplot2::geom_point(size = 3, color = \"red\") +\n      ggplot2::scale_x_continuous(breaks = 1:nrow(cp$eig)) +\n      ggplot2::scale_y_continuous(name = \"% Variancia Explicada\") +\n      ggplot2::ggtitle(\"Scree Plot\") +\n      ggplot2::theme_bw()\n    \n    plotly::ggplotly(gg_scree)\n    \n  })\n  \n  output$plot_indiv &lt;- plotly::renderPlotly({\n    \n    individuos &lt;- cp$ind$coord |&gt; \n      dplyr::bind_cols(datos) |&gt; \n      dplyr::mutate(name = stringr::str_wrap(name, 25)) |&gt; \n      ggplot2::ggplot() +\n      ggplot2::aes(x = Dim.1, y = Dim.2, color = album, label = name) +\n      ggplot2::geom_hline(yintercept = 0, linewidth = 0.1) +\n      ggplot2::geom_vline(xintercept = 0, linewidth = 0.1) +\n      ggplot2::geom_point(alpha = 0) +\n      ggplot2::geom_text(size = 2, show.legend = FALSE) +\n      ggplot2::ggtitle(\"Gr√°fico de los individuos en las CP seleccionadas\") +\n      ggplot2::theme_bw()\n\n    plotly::ggplotly(individuos)\n\n  })\n  \n}\n\n# Lanzamiento de la app\nshiny::shinyApp(ui = MiInterfaz, server = MiServidor)\n\n\n\nImportante: estructura del servidor\n\nEstudiemos el formato de escritura empleado: dentro de la funci√≥n que juega el rol de servidor debemos listar los elementos que deseamos que est√©n disponibles para ser incluidos en el resultado final de la app, siguiendo la estructura output$NombreObjeto.\nAsociado a este nombre debe haber un llamado a una funci√≥n de tipo render, las cuales son la contraparte de las funciones output mencionadas arriba. Ejemplos:\n\nplotly::plotlyOutput() en la interfaz ‚Äì&gt; plotly::renderPlotly() en el servidor\nDT::DTOutput() en la interfaz ‚Äì&gt; DT::renderDT() en el servidor\nreactable::reactableOutput() en la interfaz ‚Äì&gt; reactable::renderReactable() en el servidor",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#paso-v-widgets",
    "href": "capitulos/05_shiny.html#paso-v-widgets",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "Paso V: Widgets",
    "text": "Paso V: Widgets\n\nTodav√≠a no hemos otorgado a nuestra app la interactividad deseada: s√≥lo muestra las primeras 2 componentes e incluye todos los √°lbums disponibles de Queen en la base, ya que as√≠ est√° programado en el c√≥digo mostrado arriba.\nPara lograr la interactividad ser√° necesario incluir ciertos widgets (t√©rmino traducido como ‚Äúdispositivos‚Äù o ‚Äúartilugios‚Äù) en nuestra app. Podemos pensar a un widget como un elemento prefabricado que nos da la posibilidad de transmitirle informaci√≥n a la app sobre lo que queremos. Los m√°s comunes son:\n\nshiny::checkboxGroupInput(): listado de opciones para marcar (multiple choice)\nshiny::radioButtons(): listado de opciones que admite una respuesta √∫nica\nshiny::textInput(): entrada manual de texto\nshiny::numericInput(): entrada de valores num√©ricos\nshiny::dateInput(): entrada de fechas\nshiny::fileInput(): permite subir un archivo desde mi PC para ser utilizado por la app\nshiny::actionButton(): bot√≥n de acci√≥n para activar o desactivar cierta opci√≥n\nshiny::sliderInput(): barra horizontal que permite elegir un valor num√©rico o un intervalo dentro de un rango determinado\n\n\n\n\n\nShiny ofrece una variada lista de posibilidades, las cuales podemos consultar en esta galer√≠a de widgets. Una alternativa recomendable es el paquete shinyWidgets el cual ofrece muchas otras opciones, las cuales vale la pena repasar en su p√°gina web. M√°s adelante hablaremos m√°s sobre este paquete.\nPara continuar con el armado de nuestra app, existen dos widgets que ser√°n particularmente √∫tiles:\n\nshiny::checkboxGroupInput() para poder elegir los discos de Queen a incluir en el ACP\nshiny::numericInput() para poder elegir las componentes a graficar (uno para cada eje)\n\n\n\n\n\nA cada widget que creamos debemos asignarle un ID, el cual luego podr√° ser usado para hacer referencia a los valores que cada uno de ellos tomen en determinado momento.\nEl c√≥digo para generar los widgets puede incluirse directamente dentro del sidebarPanel presente en la interfaz de nuestra aplicaci√≥n:\n\n\n\nC√≥digo\n# Datos\ndatos &lt;- readr::read_delim(\"queen.txt\", delim = \"\\t\")\ncp &lt;- FactoMineR::PCA(\n  # matriz de datos: elegimos variables numericas\n  X = dplyr::select(datos, dplyr::where(is.numeric)), \n  ncp = 11, # cantidad de componentes a almacenar\n  graph = FALSE # no mostrar los graficos\n)\n\n# User Interface\nMiInterfaz &lt;- bslib::page_fluid(\n  shiny::titlePanel(\"Mi Primera Shiny App - ACP sobre Canciones de Queen\"), \n  bslib::layout_sidebar(\n    sidebar = bslib::sidebar(\n      \n      # Listado de Albums\n      shiny::checkboxGroupInput(\n        inputId = \"album\", # ID del widget\n        label = \"√Ålbums a incluir\", # T√≠tulo a mostrar en la app\n        choices = sort(unique(datos$album)), # Opciones disponibles\n        selected = sort(unique(datos$album))[1:3] # Opciones seleccionadas al inicio\n      ),\n\n      # Componente Eje X\n      shiny::numericInput(\n        inputId = \"ejex\", # ID del widget\n        label = \"CP Eje X\", # T√≠tulo a mostrar en la app\n        value = 1, # Valor seleccionado inicialmente\n        min = 1, # M√≠nimo valor posible\n        max = 11 # M√°ximo valor posible\n      ),\n\n      # Componente Eje Y\n      shiny::numericInput(\n        inputId = \"ejey\", # ID del widget\n        label = \"CP Eje Y\", # T√≠tulo a mostrar en la app\n        value = 2, # Valor seleccionado inicialmente\n        min = 1, # M√≠nimo valor posible\n        max = 11 # M√°ximo valor posible\n      )\n      \n    ), \n    \n    # Usamos bslib::card() para evitar superposici√≥n de las tablas\n    # Esto parece ser comportamiento inesperado de DT::DTOutput\n    bslib::card(DT::DTOutput(\"tabla_cargas\"), height = \"620px\"), \n    reactable::reactableOutput(\"tabla_pjevar\"),\n    plotly::plotlyOutput(\"plot_scree\"),\n    plotly::plotlyOutput(\"plot_indiv\")\n\n  )\n)\n\n# Servidor\nMiServidor &lt;- function(input, output) {\n  \n  output$tabla_cargas &lt;- DT::renderDT({\n    cp$var$coord |&gt; \n      DT::datatable(options = list(pageLength = 11)) |&gt; \n      DT::formatRound(columns = 1:11, digits = 4)\n  })\n  \n  output$tabla_pjevar &lt;- reactable::renderReactable({\n    cp$eig |&gt; \n      reactable::reactable(\n        pagination = FALSE,\n        defaultColDef = reactable::colDef(\n          format = reactable::colFormat(digits = 4)\n        )\n      )\n  })\n  \n  output$plot_scree &lt;- plotly::renderPlotly({\n    \n    gg_scree &lt;- tibble::tibble(CP = 1:nrow(cp$eig),\n                               PVE = cp$eig[,2]) |&gt; \n      ggplot2::ggplot() +\n      ggplot2::aes(x = CP, y = PVE) +\n      ggplot2::geom_line(linewidth = 1) +\n      ggplot2::geom_point(size = 3, color = \"red\") +\n      ggplot2::scale_x_continuous(breaks = 1:nrow(cp$eig)) +\n      ggplot2::scale_y_continuous(name = \"% Variancia Explicada\") +\n      ggplot2::ggtitle(\"Scree Plot\") +\n      ggplot2::theme_bw()\n    \n    plotly::ggplotly(gg_scree)\n    \n  })\n  \n  output$plot_indiv &lt;- plotly::renderPlotly({\n    \n    individuos &lt;- cp$ind$coord |&gt; \n      dplyr::bind_cols(datos) |&gt; \n      dplyr::mutate(name = stringr::str_wrap(name, 25)) |&gt; \n      ggplot2::ggplot() +\n      ggplot2::aes(x = Dim.1, y = Dim.2, color = album, label = name) +\n      ggplot2::geom_hline(yintercept = 0, linewidth = 0.1) +\n      ggplot2::geom_vline(xintercept = 0, linewidth = 0.1) +\n      ggplot2::geom_point(alpha = 0) +\n      ggplot2::geom_text(size = 2, show.legend = FALSE) +\n      ggplot2::ggtitle(\"Gr√°fico de los individuos en las CP seleccionadas\") +\n      ggplot2::theme_bw()\n\n    plotly::ggplotly(individuos)\n\n  })\n  \n}\n\n# Lanzamiento de la app\nshiny::shinyApp(ui = MiInterfaz, server = MiServidor)",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#paso-vi-reactividad",
    "href": "capitulos/05_shiny.html#paso-vi-reactividad",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "Paso VI: Reactividad",
    "text": "Paso VI: Reactividad\n\nCada uno de los widgets comunica al server el valor seleccionado por el usuario a trav√©s de la lista input. Para acceder al valor definido por un usuario para un determinado widget usamos el input ID. En este caso, input$album nos permite acceder a los albumes seleccionados mientras que input$ejex e input$ejey nos permiten acceder al valor seleccionado para cada eje.\nEn esta secci√≥n utilizaremos input$album para filtrar el conjunto de datos original de acuerdo a los albumes seleccionados por el usuario, obtendremos las CP a partir de la base filtrada y luego armaremos el gr√°fico seg√∫n los valores de input$ejex e input$ejey.\nLa base filtrada debe ser un elemento reactivo, es decir, un objeto de R cuyo valor no sea fijo, sino que se actualice de acuerdo a las opciones que seleccionemos en pantalla. Esto se logra mediante la funci√≥n shiny::reactive(). Dentro de nuestra funci√≥n servidor podemos incluir el siguiente c√≥digo:\n\n\nbase_filtrada &lt;- shiny::reactive({\n  dplyr::filter(datos, album %in% input$album)\n})\n\n\nImportante: cuando estamos utilizando elementos reactivos debemos llamarlos agregando un par de par√©ntesis al final de su nombre, por ejemplo, base_filtrada() en vez de base_filtrada.\nEl elemento reactivo definido arriba permite R actualice su valor a medida que el usuario de la app elige diferentes albumes. La l√≥gica es simple: si definimos base_filtrada &lt;- dplyr::filter(datos, album %in% c(\"Innuendo\", \"Jazz\")), luego la app usar√° siempre las canciones que pertenecen a los albumes Innuendo y Jazz; si definimos base_filtrada &lt;- shiny::reactive({dplyr::filter(datos, album %in% input$album)}), el valor cambiar√° siempre que el usuario modifique manualmente el input asociado.\nDado que los objetos de R que dependen de valores reactivos tambi√©n son reactivos, el objeto donde guardamos el resultado del ACP tambi√©n es reactivo (depende de la base de datos, que a su vez depende de los discos elegidos). Todos estos detalles requieren que modifiquemos el c√≥digo original. Por ejemplo, lo que antes era:\n\n\ncp &lt;- FactoMineR::PCA(\n  X = dplyr::select(datos, dplyr::where(is.numeric)), \n  ncp = 11, \n  graph = FALSE \n)\n\nahora se convierte en:\n\ncp &lt;- shiny::reactive({\n  FactoMineR::PCA(\n    X = dplyr::select(base_filtrada(), dplyr::where(is.numeric)), \n    ncp = 11, \n    graph = FALSE \n  )\n})\n\n\nAclaraci√≥n: el concepto de reactividad es un tema complejo que requiere de cierto tiempo para ser comprendido plenamente. Si bien la reactividad es un elemento fundamental de cualquier aplicaci√≥n Shiny, por una cuesti√≥n de tiempo disponible no profundizaremos demasiado en este t√≥pico. Aquellas personas interesadas en aprender m√°s sobre el tema pueden consultar el cap√≠tulo ‚ÄúMastering reactivity‚Äù del ya mencionado libro Mastering Shiny.",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#paso-vii-ejecuci√≥n",
    "href": "capitulos/05_shiny.html#paso-vii-ejecuci√≥n",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "Paso VII: Ejecuci√≥n",
    "text": "Paso VII: Ejecuci√≥n\n\n¬°Llegamos al √∫ltimo paso! Una vez que ya tenemos listas la interfaz y el servidor, s√≥lo falta agregar la sentencia que permite ejecutar la aplicaci√≥n:\n\n\nshiny::shinyApp(ui = MiInterfaz, server = MiServidor)\n\n\nEsta l√≠nea de c√≥digo debe figurar siempre dentro del archivo app.R, respetando los nombres asignados a la interfaz y al server.\nExisten 3 maneras diferentes de lanzar la aplicaci√≥n:\n\nApretar el bot√≥n Run App en la barra de herramientas de RStudio, donde podemos elegir si queremos ejecutarla dentro de RStudio o en un navegador externo.\nEntrar a app.R, seleccionar todo el c√≥digo y ejecutarlo.\nUsar la funci√≥n shiny::runApp() en la consola de RStudio, eligiendo la ruta donde est√° ubicado el directorio que contiene la app, por ejemplo runApp(\"C:/Mis Documentos/MiApp\").\n\n\n\n\n\nUniendo el c√≥digo presentado en cada paso, llegamos a este resultado final:\n\n\n\nC√≥digo\n# Datos\ndatos &lt;- readr::read_delim(\"queen.txt\", delim = \"\\t\")\n\n# User Interface\nMiInterfaz &lt;- bslib::page_fluid(\n  shiny::titlePanel(\"Mi Primera Shiny App - ACP sobre Canciones de Queen\"), \n  bslib::layout_sidebar( \n    sidebar = bslib::sidebar(\n      \n      # Listado de Albums\n      shiny::checkboxGroupInput(\n        inputId = \"album\", # ID del widget\n        label = \"√Ålbums a incluir\", # T√≠tulo a mostrar en la app\n        choices = sort(unique(datos$album)), # Opciones disponibles\n        selected = sort(unique(datos$album))[1:3] # Opciones seleccionadas al inicio\n      ),\n\n      # Componente Eje X\n      shiny::numericInput(\n        inputId = \"ejex\", # ID del widget\n        label = \"CP Eje X\", # T√≠tulo a mostrar en la app\n        value = 1, # Valor seleccionado inicialmente\n        min = 1, # M√≠nimo valor posible\n        max = 11 # M√°ximo valor posible\n      ),\n\n      # Componente Eje Y\n      shiny::numericInput(\n        inputId = \"ejey\", # ID del widget\n        label = \"CP Eje Y\", # T√≠tulo a mostrar en la app\n        value = 2, # Valor seleccionado inicialmente\n        min = 1, # M√≠nimo valor posible\n        max = 11 # M√°ximo valor posible\n      )\n\n    ), \n\n    # Usamos bslib::card() para evitar superposici√≥n de las tablas\n    # Esto parece ser comportamiento inesperado de DT::DTOutput\n    bslib::card(DT::DTOutput(\"tabla_cargas\"), height = \"620px\"), \n    reactable::reactableOutput(\"tabla_pjevar\"),\n    plotly::plotlyOutput(\"plot_scree\"),\n    plotly::plotlyOutput(\"plot_indiv\")\n\n  )\n)\n\n#Servidor\nMiServidor &lt;- function(input, output) {\n  \n  base_filtrada &lt;- shiny::reactive({\n    dplyr::filter(datos, album %in% input$album)\n  })\n    \n  cp &lt;- shiny::reactive({\n \n    FactoMineR::PCA(\n      # matriz de datos: elegimos variables numericas\n      X = dplyr::select(base_filtrada(), dplyr::where(is.numeric)), \n      ncp = 11, # cantidad de componentes a almacenar\n      graph = FALSE # no mostrar los graficos\n    )\n    \n  })\n    \n  output$tabla_cargas &lt;- DT::renderDT({\n    cp()$var$coord |&gt; \n      DT::datatable(options = list(pageLength = 11)) |&gt; \n      DT::formatRound(columns = 1:11, digits = 4)\n  })\n  \n  output$tabla_pjevar &lt;- reactable::renderReactable({\n    cp()$eig |&gt; \n      reactable::reactable(\n        pagination = FALSE,\n        defaultColDef = reactable::colDef(\n          format = reactable::colFormat(digits = 4)\n        )\n      )\n  })\n  \n  output$plot_scree &lt;- plotly::renderPlotly({\n    \n    gg_scree &lt;- tibble::tibble(CP = 1:nrow(cp()$eig),\n                               PVE = cp()$eig[,2]) |&gt; \n      ggplot2::ggplot() +\n      ggplot2::aes(x = CP, y = PVE) +\n      ggplot2::geom_line(linewidth = 1) +\n      ggplot2::geom_point(size = 3, color = \"red\") +\n      ggplot2::scale_x_continuous(breaks = 1:nrow(cp()$eig)) +\n      ggplot2::scale_y_continuous(name = \"% Variancia Explicada\") +\n      ggplot2::ggtitle(\"Scree Plot\") +\n      ggplot2::theme_bw()\n    \n    plotly::ggplotly(gg_scree)\n    \n  })\n  \n  output$plot_indiv &lt;- plotly::renderPlotly({\n    \n    individuos &lt;- cp()$ind$coord |&gt; \n      dplyr::bind_cols(base_filtrada()) |&gt; \n      dplyr::mutate(name = stringr::str_wrap(name, 25)) |&gt; \n      dplyr::select(album,\n                    name, \n                    x = paste0(\"Dim.\", input$ejex), \n                    y = paste0(\"Dim.\", input$ejey)) |&gt; \n      ggplot2::ggplot() +\n      ggplot2::aes(x = x, y = y, color = album, label = name) +\n      ggplot2::geom_hline(yintercept = 0, linewidth = 0.1) +\n      ggplot2::geom_vline(xintercept = 0, linewidth = 0.1) +\n      ggplot2::geom_point(alpha = 0) +\n      ggplot2::geom_text(size = 2, show.legend = FALSE) +\n      ggplot2::ggtitle(\"Gr√°fico de los individuos en las CP seleccionadas\") +\n      ggplot2::labs(x = paste0(\"CP\", input$ejex), y = paste0(\"CP\", input$ejey)) +\n      ggplot2::theme_bw()\n\n    plotly::ggplotly(individuos)\n\n  })\n  \n}\n\n# Lanzamiento de la app\nshiny::shinyApp(ui = MiInterfaz, server = MiServidor)\n\n\n\nEs interesante notar que se implementaron algunos cambios en el servidor, para adaptarnos a la reactividad definida en el paso anterior; prestemos especial atenci√≥n al proceso de selecci√≥n de componentes dentro del c√≥digo del gr√°fico de individuos:\n\n\ndplyr::select(\n  album, \n  name, \n  x = paste0(\"Dim.\", input$ejex), \n  y = paste0(\"Dim.\", input$ejey)\n)\n\n\n\n\n\n\n\nDatos Importantes\n\n\n\n\nSi lanzamos la app desde RStudio, es necesario detenerla para poder seguir utilizando R. Esto se logra apretando el bot√≥n rojo ‚ÄúSTOP‚Äù ubicado en el sector superior derecho de la consola.\nEn la versi√≥n final del c√≥digo de la app, algunas sentencias se incorporan dentro de la funci√≥n server y otras fuera de ella. La recomendaci√≥n a seguir es incluir en el server s√≥lo los outputs y aquellos objetos que sean reactivos (o que dependan de objetos reactivos), y dejar fuera cualquier otro. Gracias a esto evitamos sobrecargar y/o enlentecer la app, ya que los objetos definidos fuera del server se eval√∫an una √∫nica vez, mientras que aquellos definidos dentro del server son re-evaluados constantemente.\nSe recomienda crear un esquema que replique la estructura principal de la app, ya que esto ayuda a comprender mejor su funcionamiento. En nuestro caso, el esquema est√° compuesto por tres inputs (album, ejex y ejey) y cuatro outputs (tabla_cargas, tabla_pjevar, plot_scree y plot_indiv).\n\n\n\n\nEl orden de los pasos seguidos en este tutorial no es necesariamente fijo, y depender√° en gran medida de las caracter√≠sticas de la app que estemos desarrollando. Algunas apps simples quiz√°s no necesiten reactividad, widgets o gr√°ficos, mientras que aquellas apps m√°s complejas seguramente requieran de un ida y vuelta retroalimentado entre los pasos 2 a 6, hasta que alcancemos el resultado deseado.\nUna vez que hayamos adquirido cierta experiencia en la construcci√≥n de apps, resulta una buena idea construir en primer lugar la interfaz con sus widgets incluidos (pasos 2 y 5), para luego dedicarle tiempo al servidor y el contenido (pasos 3, 4 y 6). Obviamente esta es s√≥lo una sugerencia, y el proceso de creaci√≥n de una app debe responder a las necesidades y gustos de su respectivo/a autor/a.",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_shiny.html#trabajo-en-equipo",
    "href": "capitulos/05_shiny.html#trabajo-en-equipo",
    "title": "Comunicaci√≥n de Resultados: Shiny",
    "section": "Trabajo en Equipo",
    "text": "Trabajo en Equipo\n\nIntentar replicar la siguiente app, en la cual se muestra un histograma para alguna de las variables num√©ricas presentes en la base.\nDetalles a considerar:\n\nSe pueden elegir m√∫ltiples √°lbums\nEl t√≠tulo del gr√°fico debe mostrar los nombres de los √°lbums seleccionados\nEl histograma utiliza siempre 10 barras\n\n\n\n\n\nAyuda: el widget empleado en ambos casos es pickerInput() del paquete shinyWidgets, el cual permite agregar una barra de b√∫squeda (liveSearch) en su argumento options.",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>9</span>¬† <span class='chapter-title'>Comunicaci√≥n de Resultados: Shiny</span>"
    ]
  },
  {
    "objectID": "capitulos/05_tableros.html",
    "href": "capitulos/05_tableros.html",
    "title": "Tableros",
    "section": "",
    "text": "Introducci√≥n\nLos ejemplos mencionados arriba fueron desarrollados utilizando Shiny; sin embargo, debemos aclarar que hay m√∫ltiples herramientas disponibles para crear tableros de este estilo. Las m√°s conocidas actualmente, adem√°s del propio Shiny, son Power BI y Tableau.",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Tableros</span>"
    ]
  },
  {
    "objectID": "capitulos/05_tableros.html#introducci√≥n",
    "href": "capitulos/05_tableros.html#introducci√≥n",
    "title": "Tableros",
    "section": "",
    "text": "En esta Unidad hablaremos sobre tableros (dashboards), los cuales son herramientas digitales orientadas a la visualizaci√≥n de una gran cantidad de indicadores relevantes para una empresa u organizaci√≥n.\nLos tableros se caracterizan por resumir la informaci√≥n m√°s importante en pocos cuadros o gr√°ficos, actualizando los datos de manera peri√≥dica (o varias veces al d√≠a), permitiendo un monitoreo en tiempo real del proceso que estamos analizando.\nSu nombre proviene del tablero presente en los autos, en los cuales podemos acceder a informaci√≥n relevante con solo un vistazo: velocidad actual, nivel de combustible, kilometraje total, etc.\nHoy en d√≠a una herramienta como esta parece indispensable para el manejo de cualquier organizaci√≥n medianamente grande, o bien como un recurso adicional dentro de cualquier proyecto de an√°lisis de datos. Los ejemplos abundan:\n\nTablero que analiza el impacto en redes sociales de un determinado tema o hashtag (link)\nTablero para seguimiento en vivo de l√≠neas de colectivo (link)\nTablero para an√°lisis financiero y comparaci√≥n de indicadores econ√≥micos (link)\nTablero desarrollado por el Observatorio Econ√≥mico Social de la UNR (link)\nTablero que analiza datos sobre personas en situaci√≥n de calle en Ohio (USA) (link)",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Tableros</span>"
    ]
  },
  {
    "objectID": "capitulos/05_tableros.html#dashboards-con-bslib",
    "href": "capitulos/05_tableros.html#dashboards-con-bslib",
    "title": "Tableros",
    "section": "Dashboards con bslib",
    "text": "Dashboards con bslib\nEn esta Secci√≥n veremos c√≥mo usar bslib para crear la interfaz de Shiny dashboards.\n\nConceptos b√°sicos\nLa estructura de un dashboard puede crearse proporcionando un title, sidebar y contenido del √°rea principal a bslib::page_sidebar().\n\n\nC√≥digo\nui &lt;- bslib::page_sidebar(\n  title = \"Mi Tablero\",\n  sidebar = \"Sidebar\",\n  \"Contenido del √°rea principal\"\n)\n\nserver &lt;- function(input, output) {}\n\nshiny::shinyApp(ui, server)\n\n\nTanto el sidebar como el contenido del √°rea principal pueden contener cualquier cantidad arbitraria de elementos de interfaz, pero es una buena pr√°ctica poner los inputs en el sidebar y los outputs en el √°rea principal. A su vez, se recomienda poner los outputs dentro de ‚Äútarjetas‚Äù (usando la funci√≥n bslib::card() de la cual hablaremos m√°s adelante) y los contenidos del sidebar en un objeto bslib::sidebar() para agregar t√≠tulos y proveer estilos personalizados.\nUtilicemos los conceptos mencionados hasta el momento para crear un dashboard que analiza los partos en Rosario.\n\n\nC√≥digo\ndatos &lt;- readr::read_csv(\"partos_rosario.csv\")\n\nui &lt;- bslib::page_sidebar(\n  fillable = FALSE, # M√°s sobre esto en la secci√≥n \"Scrolling vs Filling\"\n\n  title = \"Partos en Rosario\",\n  sidebar = bslib::sidebar(\n    title = \"Panel de Control\",\n    \n    shinyWidgets::pickerInput(\n      inputId = \"efector\",\n      label = \"Seleccionar Efector\",\n      choices = datos$efector |&gt; unique() |&gt; sort(),\n      selected = \"HRSP\"\n    ),\n    \n    shinyWidgets::pickerInput(\n      inputId = \"a√±o\",\n      label = \"Seleccionar A√±o\",\n      choices = datos$a√±o |&gt; unique() |&gt; sort(decreasing = TRUE),\n      selected = max(datos$a√±o)\n    )\n    \n  ),\n  \n  bslib::card(\n    full_screen = TRUE,\n    bslib::card_header(\"Partos seg√∫n sexo del beb√©\"),\n    echarts4r::echarts4rOutput(outputId = \"graf_sexo_bebe\")\n  ),\n  \n  bslib::card(\n    full_screen = TRUE,\n    bslib::card_header(\"Partos seg√∫n edad de la madre y tipo de parto\"),\n    echarts4r::echarts4rOutput(outputId = \"graf_edad_madre_tipo_parto\")\n  ),\n  \n  bslib::card(\n    full_screen = TRUE,\n    bslib::card_header(\"Datos\"),\n    reactable::reactableOutput(outputId = \"tabla\")\n  )\n  \n)\n\nserver &lt;- function(input, output) {\n  \n  datos_filtrados &lt;- shiny::eventReactive(c(input$efector, input$a√±o), {\n    datos |&gt; \n      dplyr::filter(\n        efector == input$efector,\n        a√±o == input$a√±o\n      )\n  })\n  \n  output$graf_sexo_bebe &lt;- echarts4r::renderEcharts4r({\n    datos_filtrados() |&gt;\n      dplyr::count(sexo_bb) |&gt; \n      echarts4r::e_chart(x = sexo_bb) |&gt; \n      echarts4r::e_pie(\n        serie = n,\n        name = \"N√∫mero de partos\", # Cambiar el nombre de la serie\n        itemStyle = list(\n          borderColor = \"black\" # Agregar bordes al gr√°fico\n        ),\n        label = list(\n          position = \"inside\", # Ubicar los labels dentro del gr√°fico\n          formatter = \"{b}\\n\\n{d}%\", # Agregar porcentajes a los labels\n          fontSize = 15 # Modificar el tama√±o de fuente del label\n        ),\n        # Agregar \"√©nfasis\"\n        emphasis = list(\n          label = list(\n            fontSize = 20,\n            fontWeight = \"bold\"\n          )\n        )\n      ) |&gt; \n      echarts4r::e_legend(show = FALSE) |&gt; # Remover gu√≠a\n      echarts4r::e_tooltip() |&gt; # Agregar tooltip\n      echarts4r::e_color(c(\"lightgrey\", \"white\")) # Definir colores para cada categor√≠a\n\n  })\n  \n  output$graf_edad_madre_tipo_parto &lt;- echarts4r::renderEcharts4r({\n    datos_procesados &lt;- datos_filtrados() |&gt; \n      dplyr::count(rango_edad, parto) |&gt; \n      dplyr::group_by(parto)\n    \n    datos_procesados |&gt;\n      echarts4r::e_chart(x = rango_edad) |&gt; \n      echarts4r::e_bar(\n        serie = n,\n        stack = \"barras_apiladas\" # Para nuestro ejemplo, este nombre no es importante\n      ) |&gt; \n      echarts4r::e_flip_coords() |&gt; \n      echarts4r::e_tooltip(trigger = \"axis\") |&gt; \n      echarts4r::e_grid(containLabel = TRUE)\n  })\n  \n  output$tabla &lt;- reactable::renderReactable({\n    datos_filtrados() |&gt; \n      reactable::reactable()\n  })\n}\n\nshiny::shinyApp(ui, server)\n\n\n\n\nLayouts\nEn esta Secci√≥n veremos distintas opciones para acomodar el contenido de nuestros dashboards:\n\nDisponer los outputs en columnas\nAgregar p√°ginas al dashboard\n\n\nM√∫ltiples Columnas\nPara acomodar el contenido en columnas usamos bslib::layout_columns().\nSi no se especifican col_widths, el espacio se divide en partes iguales entre los distintos elementos, los cuales se ubican en una misma fila.\n\n\nC√≥digo\ndatos &lt;- readr::read_csv(\"partos_rosario.csv\")\n\nui &lt;- bslib::page_sidebar(\n  fillable = FALSE, # M√°s sobre esto en la secci√≥n \"Scrolling vs Filling\"\n\n  title = \"Partos en Rosario\",\n  sidebar = bslib::sidebar(\n    title = \"Panel de Control\",\n    \n    shinyWidgets::pickerInput(\n      inputId = \"efector\",\n      label = \"Seleccionar Efector\",\n      choices = datos$efector |&gt; unique() |&gt; sort(),\n      selected = \"HRSP\"\n    ),\n    \n    shinyWidgets::pickerInput(\n      inputId = \"a√±o\",\n      label = \"Seleccionar A√±o\",\n      choices = datos$a√±o |&gt; unique() |&gt; sort(decreasing = TRUE),\n      selected = max(datos$a√±o)\n    )\n    \n  ),\n  \n  bslib::layout_columns(\n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n sexo del beb√©\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_sexo_bebe\")\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n edad de la madre y tipo de parto\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_edad_madre_tipo_parto\")\n    )\n  ),\n  \n  bslib::card(\n    full_screen = TRUE,\n    bslib::card_header(\"Datos\"),\n    reactable::reactableOutput(outputId = \"tabla\")\n  )\n  \n)\n\nserver &lt;- function(input, output) {\n  \n  datos_filtrados &lt;- shiny::eventReactive(c(input$efector, input$a√±o), {\n    datos |&gt; \n      dplyr::filter(\n        efector == input$efector,\n        a√±o == input$a√±o\n      )\n  })\n  \n  output$graf_sexo_bebe &lt;- echarts4r::renderEcharts4r({\n    datos_filtrados() |&gt;\n      dplyr::count(sexo_bb) |&gt; \n      echarts4r::e_chart(x = sexo_bb) |&gt; \n      echarts4r::e_pie(\n        serie = n,\n        name = \"N√∫mero de partos\", # Cambiar el nombre de la serie\n        itemStyle = list(\n          borderColor = \"black\" # Agregar bordes al gr√°fico\n        ),\n        label = list(\n          position = \"inside\", # Ubicar los labels dentro del gr√°fico\n          formatter = \"{b}\\n\\n{d}%\", # Agregar porcentajes a los labels\n          fontSize = 15 # Modificar el tama√±o de fuente del label\n        ),\n        # Agregar \"√©nfasis\"\n        emphasis = list(\n          label = list(\n            fontSize = 20,\n            fontWeight = \"bold\"\n          )\n        )\n      ) |&gt; \n      echarts4r::e_legend(show = FALSE) |&gt; # Remover gu√≠a\n      echarts4r::e_tooltip() |&gt; # Agregar tooltip\n      echarts4r::e_color(c(\"lightgrey\", \"white\")) # Definir colores para cada categor√≠a\n\n  })\n  \n  output$graf_edad_madre_tipo_parto &lt;- echarts4r::renderEcharts4r({\n    datos_procesados &lt;- datos_filtrados() |&gt; \n      dplyr::count(rango_edad, parto) |&gt; \n      dplyr::group_by(parto)\n    \n    datos_procesados |&gt;\n      echarts4r::e_chart(x = rango_edad) |&gt; \n      echarts4r::e_bar(\n        serie = n,\n        stack = \"barras_apiladas\" # Para nuestro ejemplo, este nombre no es importante\n      ) |&gt; \n      echarts4r::e_flip_coords() |&gt; \n      echarts4r::e_tooltip(trigger = \"axis\") |&gt; \n      echarts4r::e_grid(containLabel = TRUE)\n  })\n  \n  output$tabla &lt;- reactable::renderReactable({\n    datos_filtrados() |&gt; \n      reactable::reactable()\n  })\n}\n\nshiny::shinyApp(ui, server)\n\n\ncol_widths espera un vector num√©rico que indica el n√∫mero de columnas (sobre un total de 12) que se asignan a cada elemento. Si se supera el l√≠mite de 12, los elementos pasan a la siguiente fila. Por defecto, la altura de las filas es la misma, pero esto puede ser personalizado usando el argumento row_heights.\n\n\nC√≥digo\ndatos &lt;- readr::read_csv(\"partos_rosario.csv\")\n\nui &lt;- bslib::page_sidebar(\n  fillable = FALSE, # M√°s sobre esto en la secci√≥n \"Scrolling vs Filling\"\n\n  title = \"Partos en Rosario\",\n  sidebar = bslib::sidebar(\n    title = \"Panel de Control\",\n    \n    shinyWidgets::pickerInput(\n      inputId = \"efector\",\n      label = \"Seleccionar Efector\",\n      choices = datos$efector |&gt; unique() |&gt; sort(),\n      selected = \"HRSP\"\n    ),\n    \n    shinyWidgets::pickerInput(\n      inputId = \"a√±o\",\n      label = \"Seleccionar A√±o\",\n      choices = datos$a√±o |&gt; unique() |&gt; sort(decreasing = TRUE),\n      selected = max(datos$a√±o)\n    )\n    \n  ),\n  \n  bslib::layout_columns(\n    col_widths = c(4, 8, 12),\n    row_heights = c(2, 1), # Probar con c(4, 3) para ver diferencias!\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n sexo del beb√©\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_sexo_bebe\")\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n edad de la madre y tipo de parto\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_edad_madre_tipo_parto\")\n    ),\n  \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Datos\"),\n      reactable::reactableOutput(outputId = \"tabla\")\n    )\n\n  )\n)\n\nserver &lt;- function(input, output) {\n  \n  datos_filtrados &lt;- shiny::eventReactive(c(input$efector, input$a√±o), {\n    datos |&gt; \n      dplyr::filter(\n        efector == input$efector,\n        a√±o == input$a√±o\n      )\n  })\n  \n  output$graf_sexo_bebe &lt;- echarts4r::renderEcharts4r({\n    datos_filtrados() |&gt;\n      dplyr::count(sexo_bb) |&gt; \n      echarts4r::e_chart(x = sexo_bb) |&gt; \n      echarts4r::e_pie(\n        serie = n,\n        name = \"N√∫mero de partos\", # Cambiar el nombre de la serie\n        itemStyle = list(\n          borderColor = \"black\" # Agregar bordes al gr√°fico\n        ),\n        label = list(\n          position = \"inside\", # Ubicar los labels dentro del gr√°fico\n          formatter = \"{b}\\n\\n{d}%\", # Agregar porcentajes a los labels\n          fontSize = 15 # Modificar el tama√±o de fuente del label\n        ),\n        # Agregar \"√©nfasis\"\n        emphasis = list(\n          label = list(\n            fontSize = 20,\n            fontWeight = \"bold\"\n          )\n        )\n      ) |&gt; \n      echarts4r::e_legend(show = FALSE) |&gt; # Remover gu√≠a\n      echarts4r::e_tooltip() |&gt; # Agregar tooltip\n      echarts4r::e_color(c(\"lightgrey\", \"white\")) # Definir colores para cada categor√≠a\n\n  })\n  \n  output$graf_edad_madre_tipo_parto &lt;- echarts4r::renderEcharts4r({\n    datos_procesados &lt;- datos_filtrados() |&gt; \n      dplyr::count(rango_edad, parto) |&gt; \n      dplyr::group_by(parto)\n    \n    datos_procesados |&gt;\n      echarts4r::e_chart(x = rango_edad) |&gt; \n      echarts4r::e_bar(\n        serie = n,\n        stack = \"barras_apiladas\" # Para nuestro ejemplo, este nombre no es importante\n      ) |&gt; \n      echarts4r::e_flip_coords() |&gt; \n      echarts4r::e_tooltip(trigger = \"axis\") |&gt; \n      echarts4r::e_grid(containLabel = TRUE)\n  })\n  \n  output$tabla &lt;- reactable::renderReactable({\n    datos_filtrados() |&gt; \n      reactable::reactable()\n  })\n}\n\nshiny::shinyApp(ui, server)\n\n\nSe pueden usar valores negativos en col_widths para crear espacios vac√≠os.\n\n\nC√≥digo\ndatos &lt;- readr::read_csv(\"partos_rosario.csv\")\n\nui &lt;- bslib::page_sidebar(\n  fillable = FALSE, # M√°s sobre esto en la secci√≥n \"Scrolling vs Filling\"\n\n  title = \"Partos en Rosario\",\n  sidebar = bslib::sidebar(\n    title = \"Panel de Control\",\n    \n    shinyWidgets::pickerInput(\n      inputId = \"efector\",\n      label = \"Seleccionar Efector\",\n      choices = datos$efector |&gt; unique() |&gt; sort(),\n      selected = \"HRSP\"\n    ),\n    \n    shinyWidgets::pickerInput(\n      inputId = \"a√±o\",\n      label = \"Seleccionar A√±o\",\n      choices = datos$a√±o |&gt; unique() |&gt; sort(decreasing = TRUE),\n      selected = max(datos$a√±o)\n    )\n    \n  ),\n  \n  bslib::layout_columns(\n    col_widths = c(-4, 4, -4,\n                   -2, 8, -2,\n                   12),\n    row_heights = c(1, 2, 1),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n sexo del beb√©\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_sexo_bebe\")\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n edad de la madre y tipo de parto\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_edad_madre_tipo_parto\")\n    ),\n  \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Datos\"),\n      reactable::reactableOutput(outputId = \"tabla\")\n    )\n\n  )\n)\n\nserver &lt;- function(input, output) {\n  \n  datos_filtrados &lt;- shiny::eventReactive(c(input$efector, input$a√±o), {\n    datos |&gt; \n      dplyr::filter(\n        efector == input$efector,\n        a√±o == input$a√±o\n      )\n  })\n  \n  output$graf_sexo_bebe &lt;- echarts4r::renderEcharts4r({\n    datos_filtrados() |&gt;\n      dplyr::count(sexo_bb) |&gt; \n      echarts4r::e_chart(x = sexo_bb) |&gt; \n      echarts4r::e_pie(\n        serie = n,\n        name = \"N√∫mero de partos\", # Cambiar el nombre de la serie\n        itemStyle = list(\n          borderColor = \"black\" # Agregar bordes al gr√°fico\n        ),\n        label = list(\n          position = \"inside\", # Ubicar los labels dentro del gr√°fico\n          formatter = \"{b}\\n\\n{d}%\", # Agregar porcentajes a los labels\n          fontSize = 15 # Modificar el tama√±o de fuente del label\n        ),\n        # Agregar \"√©nfasis\"\n        emphasis = list(\n          label = list(\n            fontSize = 20,\n            fontWeight = \"bold\"\n          )\n        )\n      ) |&gt; \n      echarts4r::e_legend(show = FALSE) |&gt; # Remover gu√≠a\n      echarts4r::e_tooltip() |&gt; # Agregar tooltip\n      echarts4r::e_color(c(\"lightgrey\", \"white\")) # Definir colores para cada categor√≠a\n\n  })\n  \n  output$graf_edad_madre_tipo_parto &lt;- echarts4r::renderEcharts4r({\n    datos_procesados &lt;- datos_filtrados() |&gt; \n      dplyr::count(rango_edad, parto) |&gt; \n      dplyr::group_by(parto)\n    \n    datos_procesados |&gt;\n      echarts4r::e_chart(x = rango_edad) |&gt; \n      echarts4r::e_bar(\n        serie = n,\n        stack = \"barras_apiladas\" # Para nuestro ejemplo, este nombre no es importante\n      ) |&gt; \n      echarts4r::e_flip_coords() |&gt; \n      echarts4r::e_tooltip(trigger = \"axis\") |&gt; \n      echarts4r::e_grid(containLabel = TRUE)\n  })\n  \n  output$tabla &lt;- reactable::renderReactable({\n    datos_filtrados() |&gt; \n      reactable::reactable()\n  })\n}\n\nshiny::shinyApp(ui, server)\n\n\n\n\nM√∫ltiples P√°ginas\nPara agregar m√∫ltiples p√°ginas, reemplazaremos bslib::page_sidebar() por bslib::page_navbar() y usaremos bslib::nav_panel() para definir el t√≠tulo y contenido de cada p√°gina. Podemos usar bslib::nav_spacer() y bslib::nav_item() para controlar la alineaci√≥n y los elementos de la navbar (por ejemplo, un hiperv√≠nculo).\n\n\nC√≥digo\ndatos &lt;- readr::read_csv(\"partos_rosario.csv\")\n\nui &lt;- bslib::page_navbar(\n  fillable = FALSE, # M√°s sobre esto en la secci√≥n \"Scrolling vs Filling\"\n\n  title = \"Partos en Rosario\",\n  sidebar = bslib::sidebar(\n    title = \"Panel de Control\",\n    \n    shinyWidgets::pickerInput(\n      inputId = \"efector\",\n      label = \"Seleccionar Efector\",\n      choices = datos$efector |&gt; unique() |&gt; sort(),\n      selected = \"HRSP\"\n    ),\n    \n    shinyWidgets::pickerInput(\n      inputId = \"a√±o\",\n      label = \"Seleccionar A√±o\",\n      choices = datos$a√±o |&gt; unique() |&gt; sort(decreasing = TRUE),\n      selected = max(datos$a√±o)\n    )\n    \n  ),\n  \n  bslib::nav_panel(\n    title = \"Tablero\",\n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n sexo del beb√©\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_sexo_bebe\")\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n edad de la madre y tipo de parto\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_edad_madre_tipo_parto\")\n    )\n  ),\n  \n  bslib::nav_panel(\n    title = \"Datos\",\n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Datos\"),\n      reactable::reactableOutput(outputId = \"tabla\")\n    )\n  ),\n  \n  bslib::nav_spacer(),\n  \n  bslib::nav_item(shiny::a(\"Rosario3\", href = \"https://rosario3.com\", target = \"_blank\"))\n\n)\n\nserver &lt;- function(input, output) {\n  \n  datos_filtrados &lt;- shiny::eventReactive(c(input$efector, input$a√±o), {\n    datos |&gt; \n      dplyr::filter(\n        efector == input$efector,\n        a√±o == input$a√±o\n      )\n  })\n  \n  output$graf_sexo_bebe &lt;- echarts4r::renderEcharts4r({\n    datos_filtrados() |&gt;\n      dplyr::count(sexo_bb) |&gt; \n      echarts4r::e_chart(x = sexo_bb) |&gt; \n      echarts4r::e_pie(\n        serie = n,\n        name = \"N√∫mero de partos\", # Cambiar el nombre de la serie\n        itemStyle = list(\n          borderColor = \"black\" # Agregar bordes al gr√°fico\n        ),\n        label = list(\n          position = \"inside\", # Ubicar los labels dentro del gr√°fico\n          formatter = \"{b}\\n\\n{d}%\", # Agregar porcentajes a los labels\n          fontSize = 15 # Modificar el tama√±o de fuente del label\n        ),\n        # Agregar \"√©nfasis\"\n        emphasis = list(\n          label = list(\n            fontSize = 20,\n            fontWeight = \"bold\"\n          )\n        )\n      ) |&gt; \n      echarts4r::e_legend(show = FALSE) |&gt; # Remover gu√≠a\n      echarts4r::e_tooltip() |&gt; # Agregar tooltip\n      echarts4r::e_color(c(\"lightgrey\", \"white\")) # Definir colores para cada categor√≠a\n\n  })\n  \n  output$graf_edad_madre_tipo_parto &lt;- echarts4r::renderEcharts4r({\n    datos_procesados &lt;- datos_filtrados() |&gt; \n      dplyr::count(rango_edad, parto) |&gt; \n      dplyr::group_by(parto)\n    \n    datos_procesados |&gt;\n      echarts4r::e_chart(x = rango_edad) |&gt; \n      echarts4r::e_bar(\n        serie = n,\n        stack = \"barras_apiladas\" # Para nuestro ejemplo, este nombre no es importante\n      ) |&gt; \n      echarts4r::e_flip_coords() |&gt; \n      echarts4r::e_tooltip(trigger = \"axis\") |&gt; \n      echarts4r::e_grid(containLabel = TRUE)\n  })\n  \n  output$tabla &lt;- reactable::renderReactable({\n    datos_filtrados() |&gt; \n      reactable::reactable()\n  })\n}\n\nshiny::shinyApp(ui, server)\n\n\n\n\n\n\n\n\nImportante\n\n\n\nTener en cuenta que el argumento sidebar de bslib::page_navbar() coloca el mismo sidebar en cada p√°gina, lo cual puede o no ser lo que deseamos. Pueden revisar el art√≠culo Sidebars para aprender diferentes estrategias relacionadas con la creaci√≥n de sidebars.\n\n\n\n\nScrolling vs Filling\nTanto bslib::page_sidebar() como bslib::page_navbar() usan filling layouts por defecto, lo cual significa que los distintos outputs se agrandan o achican para ajustarse a la ventana del navegador. Dependiendo del tama√±o de los elementos, este comportamiento puede resultar en una interfaz no deseada. Para combatir estos posibles problemas podemos usar los argumentos height para definir tarjetas (cards) de tama√±o fijo o bien min_height/max_height para tarjetas cuyo tama√±o no debe excederse de ciertos l√≠mites.\nDicho esto, si no queremos permitir que los elementos se agranden o achiquen en una determinada p√°gina (por ejemplo, porque tenemos muchos outputs que mostrar y preferimos que mantengan su tama√±o original) podemos definir fillable = FALSE. Los usuarios van a poder desplazarse por la p√°gina (scrolling) si el espacio vertical que ocupan los outputs es mayor a la altura de la ventana del navegador.\n\n\n\nComponentes\n\nTarjetas (Cards)\nLas tarjetas son una herramienta de organizaci√≥n habitual en las interfaces de usuario modernas. B√°sicamente, son contenedores rectangulares con bordes y margen interno. Sin embargo, cuando se emplean correctamente para agrupar informaci√≥n relacionada, facilitan a los usuarios la comprensi√≥n, interacci√≥n y navegaci√≥n del contenido.\nPara m√°s informaci√≥n pueden revisar el art√≠culo Cards\n\n\nCajas de valores (Value Boxes)\nUn value_box() es un tipo especial de tarjeta dise√±ada para resaltar un valor junto con un t√≠tulo y un √≠cono (usualmente de bsicons).\n\n\nC√≥digo\ndatos &lt;- readr::read_csv(\"partos_rosario.csv\")\n\nui &lt;- bslib::page_navbar(\n  fillable = FALSE, # M√°s sobre esto en la secci√≥n \"Scrolling vs Filling\"\n  \n  title = \"Partos en Rosario\",\n  sidebar = bslib::sidebar(\n    title = \"Panel de Control\",\n    \n    shinyWidgets::pickerInput(\n      inputId = \"efector\",\n      label = \"Seleccionar Efector\",\n      choices = datos$efector |&gt; unique() |&gt; sort(),\n      selected = \"HRSP\"\n    ),\n    \n    shinyWidgets::pickerInput(\n      inputId = \"a√±o\",\n      label = \"Seleccionar A√±o\",\n      choices = datos$a√±o |&gt; unique() |&gt; sort(decreasing = TRUE),\n      selected = max(datos$a√±o)\n    )\n    \n  ),\n  \n  bslib::nav_panel(\n    title = \"Tablero\",\n    \n    bslib::layout_columns(\n      fill = FALSE,\n      bslib::value_box(\n        title = \"# de Partos\",\n        value = shiny::textOutput(\"n_partos\"),\n        showcase = bsicons::bs_icon(\"person-arms-up\")\n      ),\n      bslib::value_box(\n        title = \"Edad Gestacional Promedio\",\n        value = shiny::textOutput(\"promedio_edad_gestacional\"),\n        showcase = bsicons::bs_icon(\"calendar4-week\")\n      ),\n      bslib::value_box(\n        title = \"Peso Promedio del Beb√©\",\n        value = shiny::textOutput(\"promedio_peso_bebe\"),\n        showcase = bsicons::bs_icon(\"handbag\")\n      )\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n sexo del beb√©\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_sexo_bebe\")\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n edad de la madre y tipo de parto\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_edad_madre_tipo_parto\")\n    )\n  ),\n  \n  bslib::nav_panel(\n    title = \"Datos\",\n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Datos\"),\n      reactable::reactableOutput(outputId = \"tabla\")\n    )\n  ),\n  \n  bslib::nav_spacer(),\n  \n  bslib::nav_item(shiny::a(\"Rosario3\", href = \"https://rosario3.com\", target = \"_blank\"))\n  \n)\n\nserver &lt;- function(input, output) {\n  \n  datos_filtrados &lt;- shiny::eventReactive(c(input$efector, input$a√±o), {\n    datos |&gt; \n      dplyr::filter(\n        efector == input$efector,\n        a√±o == input$a√±o\n      )\n  })\n  \n  output$n_partos &lt;- shiny::renderText({\n    scales::label_number(big.mark = \".\", decimal.mark = \",\")(nrow(datos_filtrados()))\n  })\n  \n  output$promedio_edad_gestacional &lt;- shiny::renderText({\n    promedio &lt;- datos_filtrados() |&gt; \n      dplyr::pull(edad_gestacional_valor) |&gt; \n      mean(na.rm = TRUE)\n    \n    scales::label_number(suffix = \" semanas\", decimal.mark = \",\", accuracy = 0.01)(promedio)\n  })\n  \n  output$promedio_peso_bebe &lt;- shiny::renderText({\n    promedio &lt;- datos_filtrados() |&gt; \n      dplyr::pull(peso) |&gt; \n      mean(na.rm = TRUE)\n    scales::label_number(suffix = \"g\", big.mark = \".\", decimal.mark = \",\")(promedio)\n    \n  })\n  \n  \n  output$graf_sexo_bebe &lt;- echarts4r::renderEcharts4r({\n    datos_filtrados() |&gt;\n      dplyr::count(sexo_bb) |&gt; \n      echarts4r::e_chart(x = sexo_bb) |&gt; \n      echarts4r::e_pie(\n        serie = n,\n        name = \"N√∫mero de partos\", # Cambiar el nombre de la serie\n        itemStyle = list(\n          borderColor = \"black\" # Agregar bordes al gr√°fico\n        ),\n        label = list(\n          position = \"inside\", # Ubicar los labels dentro del gr√°fico\n          formatter = \"{b}\\n\\n{d}%\", # Agregar porcentajes a los labels\n          fontSize = 15 # Modificar el tama√±o de fuente del label\n        ),\n        # Agregar \"√©nfasis\"\n        emphasis = list(\n          label = list(\n            fontSize = 20,\n            fontWeight = \"bold\"\n          )\n        )\n      ) |&gt; \n      echarts4r::e_legend(show = FALSE) |&gt; # Remover gu√≠a\n      echarts4r::e_tooltip() |&gt; # Agregar tooltip\n      echarts4r::e_color(c(\"lightgrey\", \"white\")) # Definir colores para cada categor√≠a\n    \n  })\n  \n  output$graf_edad_madre_tipo_parto &lt;- echarts4r::renderEcharts4r({\n    datos_procesados &lt;- datos_filtrados() |&gt; \n      dplyr::count(rango_edad, parto) |&gt; \n      dplyr::group_by(parto)\n    \n    datos_procesados |&gt;\n      echarts4r::e_chart(x = rango_edad) |&gt; \n      echarts4r::e_bar(\n        serie = n,\n        stack = \"barras_apiladas\" # Para nuestro ejemplo, este nombre no es importante\n      ) |&gt; \n      echarts4r::e_flip_coords() |&gt; \n      echarts4r::e_tooltip(trigger = \"axis\") |&gt; \n      echarts4r::e_grid(containLabel = TRUE)\n  })\n  \n  output$tabla &lt;- reactable::renderReactable({\n    datos_filtrados() |&gt; \n      reactable::reactable()\n  })\n}\n\nshiny::shinyApp(ui, server)\n\n\nPara m√°s informaci√≥n pueden revisar el art√≠culo Value boxes\n\n\n\nPersonalizar Apariencia (Theming)\nSi estamos creando apps para una empresa u organizaci√≥n, es recomendable invertir tiempo en cambiar la apariencia general de la app para que coincida con el estilo de la misma.\nLa forma m√°s sencilla de cambiar la apariencia general de la app es utilizando el argumento bootswatch de la funci√≥n bslib::bs_theme(). Los temas predefinidos se pueden encontrar en https://bootswatch.com/.\nVeamos un ejemplo con el estilo sketchy:\n\n\nC√≥digo\ndatos &lt;- readr::read_csv(\"partos_rosario.csv\")\n\nui &lt;- bslib::page_navbar(\n  fillable = FALSE, # M√°s sobre esto en la secci√≥n \"Scrolling vs Filling\"\n  theme = bslib::bs_theme(\n    bootswatch = \"sketchy\"\n  ),\n  \n  title = \"Partos en Rosario\",\n  sidebar = bslib::sidebar(\n    title = \"Panel de Control\",\n    \n    shinyWidgets::pickerInput(\n      inputId = \"efector\",\n      label = \"Seleccionar Efector\",\n      choices = datos$efector |&gt; unique() |&gt; sort(),\n      selected = \"HRSP\"\n    ),\n    \n    shinyWidgets::pickerInput(\n      inputId = \"a√±o\",\n      label = \"Seleccionar A√±o\",\n      choices = datos$a√±o |&gt; unique() |&gt; sort(decreasing = TRUE),\n      selected = max(datos$a√±o)\n    )\n    \n  ),\n  \n  bslib::nav_panel(\n    title = \"Tablero\",\n    \n    bslib::layout_columns(\n      fill = FALSE,\n      bslib::value_box(\n        title = \"# de Partos\",\n        value = shiny::textOutput(\"n_partos\"),\n        showcase = bsicons::bs_icon(\"person-arms-up\")\n      ),\n      bslib::value_box(\n        title = \"Edad Gestacional Promedio\",\n        value = shiny::textOutput(\"promedio_edad_gestacional\"),\n        showcase = bsicons::bs_icon(\"calendar4-week\")\n      ),\n      bslib::value_box(\n        title = \"Peso Promedio del Beb√©\",\n        value = shiny::textOutput(\"promedio_peso_bebe\"),\n        showcase = bsicons::bs_icon(\"handbag\")\n      )\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n sexo del beb√©\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_sexo_bebe\")\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n edad de la madre y tipo de parto\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_edad_madre_tipo_parto\")\n    )\n  ),\n  \n  bslib::nav_panel(\n    title = \"Datos\",\n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Datos\"),\n      reactable::reactableOutput(outputId = \"tabla\")\n    )\n  ),\n  \n  bslib::nav_spacer(),\n  \n  bslib::nav_item(shiny::a(\"Rosario3\", href = \"https://rosario3.com\", target = \"_blank\"))\n  \n)\n\nserver &lt;- function(input, output) {\n  \n  datos_filtrados &lt;- shiny::eventReactive(c(input$efector, input$a√±o), {\n    datos |&gt; \n      dplyr::filter(\n        efector == input$efector,\n        a√±o == input$a√±o\n      )\n  })\n  \n  output$n_partos &lt;- shiny::renderText({\n    scales::label_number(big.mark = \".\", decimal.mark = \",\")(nrow(datos_filtrados()))\n  })\n  \n  output$promedio_edad_gestacional &lt;- shiny::renderText({\n    promedio &lt;- datos_filtrados() |&gt; \n      dplyr::pull(edad_gestacional_valor) |&gt; \n      mean(na.rm = TRUE)\n    \n    scales::label_number(suffix = \" semanas\", decimal.mark = \",\", accuracy = 0.01)(promedio)\n  })\n  \n  output$promedio_peso_bebe &lt;- shiny::renderText({\n    promedio &lt;- datos_filtrados() |&gt; \n      dplyr::pull(peso) |&gt; \n      mean(na.rm = TRUE)\n    scales::label_number(suffix = \"g\", big.mark = \".\", decimal.mark = \",\")(promedio)\n    \n  })\n  \n  \n  output$graf_sexo_bebe &lt;- echarts4r::renderEcharts4r({\n    datos_filtrados() |&gt;\n      dplyr::count(sexo_bb) |&gt; \n      echarts4r::e_chart(x = sexo_bb) |&gt; \n      echarts4r::e_pie(\n        serie = n,\n        name = \"N√∫mero de partos\", # Cambiar el nombre de la serie\n        itemStyle = list(\n          borderColor = \"black\" # Agregar bordes al gr√°fico\n        ),\n        label = list(\n          position = \"inside\", # Ubicar los labels dentro del gr√°fico\n          formatter = \"{b}\\n\\n{d}%\", # Agregar porcentajes a los labels\n          fontSize = 15 # Modificar el tama√±o de fuente del label\n        ),\n        # Agregar \"√©nfasis\"\n        emphasis = list(\n          label = list(\n            fontSize = 20,\n            fontWeight = \"bold\"\n          )\n        )\n      ) |&gt; \n      echarts4r::e_legend(show = FALSE) |&gt; # Remover gu√≠a\n      echarts4r::e_tooltip() |&gt; # Agregar tooltip\n      echarts4r::e_color(c(\"lightgrey\", \"white\")) # Definir colores para cada categor√≠a\n    \n  })\n  \n  output$graf_edad_madre_tipo_parto &lt;- echarts4r::renderEcharts4r({\n    datos_procesados &lt;- datos_filtrados() |&gt; \n      dplyr::count(rango_edad, parto) |&gt; \n      dplyr::group_by(parto)\n    \n    datos_procesados |&gt;\n      echarts4r::e_chart(x = rango_edad) |&gt; \n      echarts4r::e_bar(\n        serie = n,\n        stack = \"barras_apiladas\" # Para nuestro ejemplo, este nombre no es importante\n      ) |&gt; \n      echarts4r::e_flip_coords() |&gt; \n      echarts4r::e_tooltip(trigger = \"axis\") |&gt; \n      echarts4r::e_grid(containLabel = TRUE)\n  })\n  \n  output$tabla &lt;- reactable::renderReactable({\n    datos_filtrados() |&gt; \n      reactable::reactable()\n  })\n}\n\nshiny::shinyApp(ui, server)\n\n\nPor otro lado, podemos crear nuestro propio theme usando los dem√°s argumentos de bslib::bs_theme(), por ejemplo bg (background color), fg (foreground colour) y base_font:\n\n\nC√≥digo\ndatos &lt;- readr::read_csv(\"partos_rosario.csv\")\n\nui &lt;- bslib::page_navbar(\n  fillable = FALSE, # M√°s sobre esto en la secci√≥n \"Scrolling vs Filling\"\n  theme = bslib::bs_theme(\n    bg = \"#000000\",\n    fg = \"#FFFFFF\",\n    primary = \"#9600FF\",\n    secondary = \"#1900A0\",\n    success = \"#38FF12\",\n    info = \"#00F5FB\",\n    warning = \"#FFF100\",\n    danger = \"#FF00E3\",\n    base_font = \"Marker Felt\",\n    heading_font = \"Marker Felt\",\n    code_font = \"Chalkduster\"\n  ),\n  \n  title = \"Partos en Rosario\",\n  sidebar = bslib::sidebar(\n    title = \"Panel de Control\",\n    \n    shinyWidgets::pickerInput(\n      inputId = \"efector\",\n      label = \"Seleccionar Efector\",\n      choices = datos$efector |&gt; unique() |&gt; sort(),\n      selected = \"HRSP\"\n    ),\n    \n    shinyWidgets::pickerInput(\n      inputId = \"a√±o\",\n      label = \"Seleccionar A√±o\",\n      choices = datos$a√±o |&gt; unique() |&gt; sort(decreasing = TRUE),\n      selected = max(datos$a√±o)\n    )\n    \n  ),\n  \n  bslib::nav_panel(\n    title = \"Tablero\",\n    \n    bslib::layout_columns(\n      fill = FALSE,\n      bslib::value_box(\n        title = \"# de Partos\",\n        value = shiny::textOutput(\"n_partos\"),\n        showcase = bsicons::bs_icon(\"person-arms-up\")\n      ),\n      bslib::value_box(\n        title = \"Edad Gestacional Promedio\",\n        value = shiny::textOutput(\"promedio_edad_gestacional\"),\n        showcase = bsicons::bs_icon(\"calendar4-week\")\n      ),\n      bslib::value_box(\n        title = \"Peso Promedio del Beb√©\",\n        value = shiny::textOutput(\"promedio_peso_bebe\"),\n        showcase = bsicons::bs_icon(\"handbag\")\n      )\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n sexo del beb√©\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_sexo_bebe\")\n    ),\n    \n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Partos seg√∫n edad de la madre y tipo de parto\"),\n      echarts4r::echarts4rOutput(outputId = \"graf_edad_madre_tipo_parto\")\n    )\n  ),\n  \n  bslib::nav_panel(\n    title = \"Datos\",\n    bslib::card(\n      full_screen = TRUE,\n      bslib::card_header(\"Datos\"),\n      reactable::reactableOutput(outputId = \"tabla\")\n    )\n  ),\n  \n  bslib::nav_spacer(),\n  \n  bslib::nav_item(shiny::a(\"Rosario3\", href = \"https://rosario3.com\", target = \"_blank\"))\n  \n)\n\nserver &lt;- function(input, output) {\n  \n  datos_filtrados &lt;- shiny::eventReactive(c(input$efector, input$a√±o), {\n    datos |&gt; \n      dplyr::filter(\n        efector == input$efector,\n        a√±o == input$a√±o\n      )\n  })\n  \n  output$n_partos &lt;- shiny::renderText({\n    scales::label_number(big.mark = \".\", decimal.mark = \",\")(nrow(datos_filtrados()))\n  })\n  \n  output$promedio_edad_gestacional &lt;- shiny::renderText({\n    promedio &lt;- datos_filtrados() |&gt; \n      dplyr::pull(edad_gestacional_valor) |&gt; \n      mean(na.rm = TRUE)\n    \n    scales::label_number(suffix = \" semanas\", decimal.mark = \",\", accuracy = 0.01)(promedio)\n  })\n  \n  output$promedio_peso_bebe &lt;- shiny::renderText({\n    promedio &lt;- datos_filtrados() |&gt; \n      dplyr::pull(peso) |&gt; \n      mean(na.rm = TRUE)\n    scales::label_number(suffix = \"g\", big.mark = \".\", decimal.mark = \",\")(promedio)\n    \n  })\n  \n  \n  output$graf_sexo_bebe &lt;- echarts4r::renderEcharts4r({\n    datos_filtrados() |&gt;\n      dplyr::count(sexo_bb) |&gt; \n      echarts4r::e_chart(x = sexo_bb) |&gt; \n      echarts4r::e_pie(\n        serie = n,\n        name = \"N√∫mero de partos\", # Cambiar el nombre de la serie\n        itemStyle = list(\n          borderColor = \"black\" # Agregar bordes al gr√°fico\n        ),\n        label = list(\n          position = \"inside\", # Ubicar los labels dentro del gr√°fico\n          formatter = \"{b}\\n\\n{d}%\", # Agregar porcentajes a los labels\n          fontSize = 15 # Modificar el tama√±o de fuente del label\n        ),\n        # Agregar \"√©nfasis\"\n        emphasis = list(\n          label = list(\n            fontSize = 20,\n            fontWeight = \"bold\"\n          )\n        )\n      ) |&gt; \n      echarts4r::e_legend(show = FALSE) |&gt; # Remover gu√≠a\n      echarts4r::e_tooltip() |&gt; # Agregar tooltip\n      echarts4r::e_color(c(\"lightgrey\", \"white\")) # Definir colores para cada categor√≠a\n    \n  })\n  \n  output$graf_edad_madre_tipo_parto &lt;- echarts4r::renderEcharts4r({\n    datos_procesados &lt;- datos_filtrados() |&gt; \n      dplyr::count(rango_edad, parto) |&gt; \n      dplyr::group_by(parto)\n    \n    datos_procesados |&gt;\n      echarts4r::e_chart(x = rango_edad) |&gt; \n      echarts4r::e_bar(\n        serie = n,\n        stack = \"barras_apiladas\" # Para nuestro ejemplo, este nombre no es importante\n      ) |&gt; \n      echarts4r::e_flip_coords() |&gt; \n      echarts4r::e_tooltip(trigger = \"axis\") |&gt; \n      echarts4r::e_grid(containLabel = TRUE)\n  })\n  \n  output$tabla &lt;- reactable::renderReactable({\n    datos_filtrados() |&gt; \n      reactable::reactable()\n  })\n}\n\nshiny::shinyApp(ui, server)\n\n\nPara m√°s informaci√≥n pueden revisar el art√≠culo Theming\n\nEstilo de gr√°ficos\nNo debemos olvidar modificar la apariencia de los gr√°ficos para que coincida con los cambios realizados en la app.\nSi creamos gr√°ficos con ggplot2, podemos usar el paquete thematic para aplicar temas autom√°ticamente a nuestros gr√°ficos.\nS√≥lo es necesario llamar a la funci√≥n thematic::thematic_shiny() en la funci√≥n server, y esta buscar√° el tema predominante en nuestra app para hacerlo coincidir con el de los gr√°ficos incluidos.\n\n\n\nTrabajo en Equipo\n\nConstruir una app que utilice el estilo ‚Äúminty‚Äù del paquete bslib y posea las siguientes tres pesta√±as:\n\n1. La primera debe mostrar la matriz de cargas (loadings) obtenida a partir del ACP sobre canciones de Queen.\n2. La segunda debe mostrar la tabla con autovalores y, debajo, el scree plot asociado.\n3. La tercera debe mostrar el gr√°fico de los individuos proyectados sobre dos componentes.",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Tableros</span>"
    ]
  },
  {
    "objectID": "capitulos/05_tableros.html#widgets",
    "href": "capitulos/05_tableros.html#widgets",
    "title": "Tableros",
    "section": "Widgets",
    "text": "Widgets\nEn esta Secci√≥n haremos un repaso por algunos de los widgets m√°s interesantes que ofrece Shiny, ya sea a trav√©s de funciones propias o de paquetes especializados. Siguiendo con la l√≥gica de separar las definiciones de interfaz por un lado y servidor por el otro, los widgets son elementos que se encuentran a mitad de camino entre ambos mundos.\nEstas herramientas ya fueron presentadas en la primera clase del curso, y los definimos como ‚Äúelementos prefabricados que nos dan la posibilidad de transmitirle informaci√≥n a la app sobre lo que queremos‚Äù. Hubo 2 widgets a los que prestamos particular atenci√≥n: shiny::checkboxGroupInput() y shiny::numericInput(), ya que los usamos para transmitirle a la app qu√© discos de Queen y qu√© par de CP nos interesaban.\nIniciaremos el repaso presentando en detalle los widgets que ofrece el paquete shiny, para adentrarnos luego en aquellos incluidos dentro de la librer√≠a shinyWidgets.\n\nPaquete shiny\nExisten dos argumentos que se repiten a lo largo de todos los widgets del paquete shiny:\n\ninputId: es un nombre de uso interno que sirve para hacer referencia al objeto dentro de la app. En general los widgets se definen dentro de la interfaz, pero sus valores son utilizados por funciones que se encuentran en el servidor (ej: un widget cuyo ID es album se invoca desde el servidor con la sintaxis input$album). Hay 2 reglas para nombrar a estos ID: s√≥lo pueden usarse letras, n√∫meros o guiones bajos (tal cual ocurre con los objetos de R) y no puede haber IDs repetidos dentro de la misma app.\nlabel: es el t√≠tulo que se muestra encima de cada widget cuando ejecutamos la app. Si el ID es el nombre ‚Äúinterno‚Äù del widget, este label (etiqueta) puede pensarse como el nombre ‚Äúexterno‚Äù. No hay reglas con respecto a los caracteres: cualquier cadena de texto v√°lida puede ser utilizada como etiqueta.\n\nLos restantes argumentos de los widgets son espec√≠ficos de cada uno de ellos. A continuaci√≥n vemos en acci√≥n los m√°s comunes:\n\n\nC√≥digo\nui &lt;- bslib::page(\n  \n  bslib::layout_columns(\n    col_widths = c(4, 8),\n    shiny::tagList(\n      shiny::h1(\"Textuales\"),\n      shiny::textInput(\"id1\", \"Texto Libre\"), \n      shiny::textAreaInput(\"id2\", \"P√°rrafo\"), \n      \n      shiny::h1(\"Num√©ricos\"),\n      shiny::numericInput(\"id3\", \"N√∫mero con men√∫ desplegable\", value = 50, min = 1, max = 100), \n      shiny::sliderInput(\"id4\", \"N√∫mero eligiendo desde un rango\", value = 50, min = 1, max = 100), \n      shiny::sliderInput(\"id5\", \"Intervalo num√©rico\", value = c(25, 75), min = 1, max = 100), \n      \n      shiny::h1(\"Fechas\"),\n      shiny::dateInput(\"id6\", \"Fecha √∫nica\"), \n      shiny::dateRangeInput(\"id7\", \"Rango de fechas\")\n    ),\n    shiny::tagList(\n      shiny::h1(\"Elegir opciones\"),\n      shiny::selectInput(\"id8\", \"Opci√≥n √∫nica con men√∫ desplegable\", LETTERS[1:5]), \n      shiny::radioButtons(\"id9\", \"Opci√≥n √∫nica con listado a la vista\", LETTERS[1:5]), \n      shiny::selectInput(\"id8\", \"Opci√≥n m√∫ltiple con men√∫ desplegable\", LETTERS[1:5], multiple = TRUE), \n      shiny::checkboxGroupInput(\"id9\", \"Opci√≥n m√∫ltiple con listado a la vista\", LETTERS[1:5]), \n      \n      shiny::h1(\"Acciones (requiere reactividad)\"),\n      bslib::layout_columns(\n        shiny::fileInput(\"id10\", \"Subir archivos\", buttonLabel = \"Examinar\", placeholder = \"Elegir archivo...\"),\n        shiny::div(p(\"Descargar archivos\"), shiny::downloadButton(\"id17\", \"Click aqu√≠ para descarga\"))\n      ),\n      p(\"Botones de Acci√≥n\"),\n      bslib::layout_columns(\n        shiny::actionButton(\"id11\", \"Default\", class = \"btn-primary\"),\n        shiny::actionButton(\"id12\", \"√âxito\", class = \"btn-success\"),\n        shiny::actionButton(\"id13\", \"Info\", class = \"btn-info\"),\n        shiny::actionButton(\"id14\", \"Alerta\", class = \"btn-warning\"),\n        shiny::actionButton(\"id15\", \"Peligro\", class = \"btn-danger\"),\n        shiny::actionButton(\"id16\", \"√çcono\", icon = icon(\"tree\"))\n      )\n    )\n  )\n)\n\nserver &lt;- function(input, output) {}\nshiny::shinyApp(ui, server)\n\n\n\n\nPaquete shinyWidgets\nEl paquete shinyWidgets lleva los widgets a otro nivel. Repasar todas las posibilidades que ofrece nos llevar√≠a un curso entero.\nUna de las ventajas de trabajar con esta librer√≠a es que la estructura de sus funciones es similar a la que ya conocemos (inputId, label, etc.). Se caracteriza por incluir widgets m√°s din√°micos y con una est√©tica m√°s atractiva en comparaci√≥n a los disponibles en shiny.\nUno de los widgets m√°s √∫tiles de este paquete es pickerInput(), el cual permite seleccionar una o varias opciones posibles a partir de un listado, mediante matcheo parcial de escritura. Veamos un ejemplo:\n\n\nC√≥digo\nui &lt;- bslib::page(\n  bslib::layout_columns(\n    col_widths = c(4, 8),\n    shinyWidgets::pickerInput(\n      inputId = \"ID\",\n      label = \"Seleccionar paquete\",\n      choices = installed.packages()[,1],\n      multiple = FALSE,\n      options = list(`live-search` = TRUE)\n    ),\n    shiny::tagList(\n      h4(\"Cita del paquete\"),\n      textOutput(\"salida\")\n    )\n  )\n)\n\nserver &lt;- function(input, output) {\n  output$salida &lt;- shiny::renderText({format(utils::citation(input$ID), style = \"text\")})\n}\n\nshiny::shinyApp(ui, server)",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Tableros</span>"
    ]
  },
  {
    "objectID": "capitulos/05_tableros.html#alternativas-a-bslib",
    "href": "capitulos/05_tableros.html#alternativas-a-bslib",
    "title": "Tableros",
    "section": "Alternativas a bslib",
    "text": "Alternativas a bslib\nAdem√°s de bslib, existen otros paquetes que se desarrollaron para crear dashboards en Shiny:\n\nshinydashboard\nflexdashboard\nbs4Dash\n\nSin embargo, estos paquetes dejaron de ser actualizados y se basan en versiones anteriores de Bootstrap. Por ese motivo, no recomendamos su uso.",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>10</span>¬† <span class='chapter-title'>Tableros</span>"
    ]
  },
  {
    "objectID": "capitulos/05_reactividad.html",
    "href": "capitulos/05_reactividad.html",
    "title": "Reactividad",
    "section": "",
    "text": "Principios de la Reactividad",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Reactividad</span>"
    ]
  },
  {
    "objectID": "capitulos/05_reactividad.html#principios-de-la-reactividad",
    "href": "capitulos/05_reactividad.html#principios-de-la-reactividad",
    "title": "Reactividad",
    "section": "",
    "text": "Side Effects\nResulta necesario estudiar el concepto de side effects antes de avanzar con la ‚Äúreactividad‚Äù.\nLas funciones en R pueden ejecutarse por una (o ambas) de las siguientes razones:\n\nQuer√©s su return value.\nQuer√©s que produzca otro efecto, los cuales se denominan side effects.\n\nCualquier efecto que no sea un return value es un side effect.\n\nEjemplo de Funciones con Side Effects\n\n\nC√≥digo\nwrite.csv(...)\n\nplot(cars)\n\nprint(x)\n\nvalue &lt;&lt;- 10\n\nsource(\"script.R\")\n\nlibrary(dplyr)\n\n\nNunca usamos el return value de estas funciones ya que no estamos interesados en lo que tienen para decir, sino en lo que hacen.\n\n\n¬øPor qu√© se consideran side effects?\n&lt;&lt;- define una variable en el parent environment.\nsource(\"script.R\"): carga todo en el global environment.\nlibrary() Altera la sesi√≥n (global search list).\n\n\nNo son side effects (dentro de una funci√≥n):\n\n\nC√≥digo\n# Modificaci√≥n de variables locales\nvalue &lt;- 10\n\n# Creaci√≥n de la mayor√≠a de los tipos de objetos\nlist(a = 1, b = 2)\n\n# La mayor√≠a de los c√°lculos\na + 1\nsummary(pressure)\nlm(speed ~ dist, data = cars)\npredict(wfit, interval = \"prediction\")\n\n# Lectura de archivos\nreadLines(\"data.csv\")\n\n\nModificar variables locales no se considera un side effect porque ese valor no va a ser visible fuera de la funci√≥n.\nA grandes rasgos se puede decir que:\n\nSi la ejecuci√≥n de tu funci√≥n / expresi√≥n deja el estado del mundo un poco distinto a lo que era antes de ser ejecutada, tiene side effects.\nSi ‚Äúlo que pasa en func queda en func‚Äù (a excepci√≥n del return value), entonces no tiene side effects.\n\n\n\nQuiz: side effects\nPara cada funci√≥n, determinar si tiene o no side effects.\n\n\nC√≥digo\n# FUNCION 1\nfunction(a, b) {\n  (b - a) / a\n}\n\n# FUNCION 2\nfunction() {\n  options(digits.secs = 6)\n  as.character(Sys.time())\n}\n\n# FUNCION 3\nfunction(df) {\n  df$foo &lt;- factor(df$foo)\n  df\n}\n\n# FUNCION 4\nfunction() {\n  readLines(\"~/data/raw.txt\")\n}\n\n# FUNCION 5\nfunction(values) {\n  hist(values, plot = TRUE)\n}\n\n\n\n\nSoluciones\n\n\nC√≥digo\n# FUNCION 1: NO\n\n# FUNCION 2: SI\n\n# FUNCION 3: NO\n\n# FUNCION 4: NO\n\n# FUNCION 5: SI\n\n\n\n\n¬øPor qu√© esto es importante?\nLos side effects hacen que sea m√°s dif√≠cil razonar acerca del c√≥digo dado que el orden de ejecuci√≥n de diferentes funciones con side effects puede importar (de maneras no obvias).\nSin embargo, las necesitamos. Sin side effects, nuestros programas ser√≠an in√∫tiles ya que si un programa se ejecuta pero no tiene interacciones observables con el mundo, es como si no se hubiese ejecutado.\n\n\n\nProgramaci√≥n Reactiva\nLa programaci√≥n reactiva, tambi√©n conocida como reactive programming, es un estilo de programaci√≥n que se concentra en valores que cambian en el tiempo y en c√°lculos y acciones que dependen de esos valores.\nLa reactividad es importante en aplicaciones Shiny porque las mismas son interactivas: los usuarios cambian input controls (mueven sliders, escriben en textboxes, seleccionan checkboxes) lo que causa que se ejecuten acciones en el servidor (leer archivos csv, elegir un subconjunto de datos, ajustar modelos) lo cual resulta en la actualizaci√≥n de outputs (gr√°ficos que se vuelven a generar, tablas que se actualizan). Esto es completamente diferente a la mayor√≠a de los scripts que creamos con R, los cuales usualmente lidian con datos est√°ticos.\nPara maximizar la utilidad de las aplicaciones Shiny necesitamos que las reactive expressions y los outputs se actualicen si y solo si los inputs cambian. Queremos que los outputs est√©n sincronizados con los inputs asegurando que no haremos m√°s trabajo del necesario.\n\nEscalera de Conocimiento\n\nHe usado output e input\nHe usado reactive expressions (reactive())\nHe usado observe() y/o observeEvent(). Tambi√©n he escrito reactive expressions que dependen de otras reactive expressions. He usado isolate() de manera adecuada.\nEntiendo la diferencia y s√© cuando corresponde usar reactive() vs.¬†observe().\nEscribo reactives de alto nivel (funciones que tienen reactive expressions como input parameters y return values).\n\nEn el Nivel 3 es posible escribir apps complicadas. Es una zona de riesgo. Las apps por lo general funcionan pero a veces se lucha con entender por qu√© las cosas se ejecutan demasiado o no lo suficiente. Cada nueva feature que se agrega parece incrementar la complejidad de la app.\nEl objetivo de esta Unidad es llegar al Nivel 4. Con un conocimiento firme de los conceptos fundamentales de Shiny es posible construir redes complicadas de reactive expressions y observers con seguridad.\n\nEjercicio 1\nCompletar la server function de modo tal que el plot output muestre un simple gr√°fico con las primeras nrows filas del conjunto de datos cars.\nAyuda: plot(head(cars, nrows))\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  h1(\"App de Ejemplo\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"nrows\", \"Cantidad de Filas\", 10)\n    ),\n    mainPanel(\n      plotOutput(\"plot\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  # Objetivo: Graficar las primeras input$nrows filas de \n  # cars, usando head() y plot()\n}\n\nshinyApp(ui, server)\n\n\nSoluci√≥n\n\n\nC√≥digo\noutput$plot &lt;- renderPlot({\n  plot(head(cars, input$nrows))\n})\n\n\nAnti-soluci√≥n\n\n\nC√≥digo\nobserve({\n  df &lt;- head(cars, input$nrows)\n  output$plot &lt;- renderPlot(plot(df))\n})\n\n\nEste patr√≥n de poner renderPlot dentro de un observe usualmente significa que quien escribe el c√≥digo tiene una idea equivocada de lo que significa asignar un bloque de c√≥digo render a un output.\n\n\nC√≥digo\noutput$plot1 &lt;- renderPlot(...)\n\n\nNO SIGNIFICA: ‚ÄúActualiz√° el output de plot1 con el resultado de este c√≥digo‚Äù.\nSIGNIFICA: ‚ÄúEste c√≥digo es la receta que debe seguirse para actualizar el output plot1‚Äù.\n¬øC√≥mo hace Shiny para saber c√≥mo se relacionan las l√≠neas de c√≥digo? ¬øC√≥mo hace para saber qu√© outputs dependen de qu√© inputs, reactives?\nExisten dos posibilidades: an√°lisis est√°tico, donde se revisa el c√≥digo buscando cosas que parezcan reactivas o an√°lisis de tiempo de ejecuci√≥n (runtime analysis), donde se ejecuta el c√≥digo y se observa qu√© pasa.\nShiny usa runtime analysis. Ejecuta el c√≥digo y ve qu√© es lo que sucede. Escucha a escondidas para detectar qu√© reactive values (como input) o reactive expressions son le√≠das por output, y todo aquello que output lee es considerado una dependencia. Cualquier cambio que se produzca en una de esas dependencias significa que output es considerado desactualizado (o invalidado) y es probable que necesite ser ejecutado nuevamente.\n\n\n\n\nBloques de Construcci√≥n Reactivos (Reactive Building Blocks)\nEn esta Secci√≥n veremos c√≥mo entra en juego la reactividad en R. Existen tres bloques de construcci√≥n fundamentales de programaci√≥n reactiva: reactive values, reactive expressions y observers.\n\nReactive Values\nUn objeto reactiveValues almacena pares nombre/valor, algo as√≠ como un named list. Los valores se obtienen o fijan usando $ o [[nombre]] .\nExisten dos tipos de reactive values:\n\nUn √∫nico reactive value, creado usando reactiveVal().\nUna lista de reactive values, creada usando reactiveValues().\n\nLa forma de obtener (get) y asignar (set) valores para cada uno de ellos es la siguiente:\n\n\nC√≥digo\nx &lt;- reactiveVal(10)\nx()       # get\n#&gt; [1] 10\nx(20)     # set\nx()       # get\n#&gt; [1] 20\n\nr &lt;- reactiveValues(x = 10)\nr$x       # get\n#&gt; [1] 10\nr$x &lt;- 20 # set\nr$x       # get\n#&gt; [1] 20\n\n\nEs importante mencionar que ambos tipos de reactive values tienen lo que se denomina reference semantics. La mayor√≠a de los objetos de R tienen copy-on-modify semantics, lo que significa que si se le asigna el mismo valor a dos nombres, la conexi√≥n se rompe en el momento que uno es modificado:\n\n\nC√≥digo\na1 &lt;- a2 &lt;- 10\na2 &lt;- 20\na1 # unchanged\n#&gt; [1] 10\n\n\nEste no es el caso con reactive values ya que siempre mantienen una referencia al mismo valor por lo cual modificar cualquier copia modifica todos los valores:\n\n\nC√≥digo\nb1 &lt;- b2 &lt;- reactiveValues(x = 10)\nb1$x &lt;- 20\nb2$x\n#&gt; [1] 20\n\n\nLa mayor√≠a de los reactive values que encontrar√°n provendr√°n del argumento input de la funci√≥n del servidor. Una diferencia con los reactiveValues() creados por uno mismo es que aquellos provenientes de input son de solo lectura: sus valores no se pueden modificar porque Shiny los actualiza autom√°ticamente basado en acciones del usuario en el navegador.\n\n\nEjemplo de Uso\nUso de reactive values en botones de Anterior/Siguiente.\n\n\nC√≥digo\nlibrary(shiny)\n\nmessages_list &lt;- c(\"Mensaje 1/3\", \"Mensaje 2/3\", \"Mensaje 3/3\")\n\nui &lt;- fluidPage(\n  actionButton(\"left\", \"Anterior\"),\n  actionButton(\"right\", \"Siguiente\"),\n  textOutput(\"message\")\n)\n\nserver &lt;- function(input, output, session) {\n  index &lt;- reactiveVal(1)\n  \n  output$message &lt;- renderText(messages_list[[index()]])\n  \n  observeEvent(input$left, {\n    if (index() == 1) index(3)\n    else index(index() - 1)\n  })\n  \n  observeEvent(input$right, {\n    if (index() == 3) index(1)\n    else index(index() + 1)\n  })\n  \n}\n\nshinyApp(ui, server)\n\n\n\n\nReactive Expressions\nLas reactive expressions son expresiones que son reactivas.\n\nExpresi√≥n: C√≥digo que produce un valor.\nReactivo: Detecta cambios en cualquier cosa reactiva que lee.\n\n\n\nC√≥digo\nfunction(input, output, session) {\n  # Cuando input$min_size o input$max_size cambian, large_diamonds\n  # ser√° informado sobre ello.\n  large_diamonds &lt;- reactive({\n    diamonds %&gt;%\n      filter(carat &gt;= input$min_size) %&gt;%\n      filter(carat &lt; input$max_size)\n  })\n  \n  # Si eso pasa, large_diamonds notificar√° a output$table.\n  output$table &lt;- renderTable({\n    large_diamonds() %&gt;% select(carat, price)\n  })\n  \n  # Las reactive expressions pueden usar otras reactive expressions.\n  mean_price &lt;- reactive({\n    mean(large_diamonds()$price)\n  })\n  \n  # Tanto large_diamonds como mean_price notificar√°n a output$message\n  # acerca de los cambios que detecten.\n  output$message &lt;- renderText({\n    paste0(nrow(large_diamonds()), \" diamantes en ese rango, \",\n      \"con un precio promedio igual a $\", mean_price())\n  })\n}\n\n\n\n\nC√≥digo\nfunction(input, output, session) {\n  \n  # Esto NO funciona.\n  large_diamonds &lt;- diamonds %&gt;%\n    filter(carat &gt;= input$min_size) %&gt;%\n    filter(carat &lt; input$max_size)\n  \n  output$table &lt;- renderTable({\n    large_diamonds %&gt;% select(carat, price)\n  })\n}\n\n\n\nEjercicio 2\nFactorizar la server function removiendo duplicaci√≥n de c√≥digo y evitando que la operaci√≥n se ejecute dos veces por cada cambio en input$nrows.\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  h1(\"App de Ejemplo\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"nrows\", \"Cantidad de Filas\", 10)\n    ),\n    mainPanel(\n      plotOutput(\"plot\"),\n      tableOutput(\"table\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  # Objetivo: Factorizar head(cars, input$nrows) de modo tal\n  # que el codigo no se duplique y que la operaci√≥n no se \n  # ejecute dos veces por cada cambio en input$nrows.\n  \n  output$plot &lt;- renderPlot({\n    plot(head(cars, input$nrows))\n  })\n  \n  output$table &lt;- renderTable({\n    head(cars, input$nrows)\n  })\n}\n\nshinyApp(ui, server)\n\n\nSoluci√≥n\n\n\nC√≥digo\nfunction(input, output, session) {\n  df &lt;- reactive({\n    head(cars, input$nrows)\n  })\n  \n  output$plot &lt;- renderPlot({\n    plot(df())\n  })\n  \n  output$table &lt;- renderTable({\n    df()\n  })\n}\n\n\nAnti-soluci√≥n\n\n\nC√≥digo\nfunction(input, output, session) {\n  values &lt;- reactiveValues(df = cars)\n  observe({\n    values$df &lt;- head(cars, input$nrows)\n  })\n  \n  output$plot &lt;- renderPlot({\n    plot(values$df)\n  })\n  \n  output$table &lt;- renderTable({\n    values$df\n  })\n}\n\n\nLa soluci√≥n usa una reactive expression para almacenar el c√°lculo. La anti-soluci√≥n crea un objeto de reactive values y usa un observer para mantener el valor actualizado.\nEl primer enfoque es mejor. ¬øPor qu√©? Continuemos con el curso para poder responder esta pregunta‚Ä¶\n\n\n\nObservers\nLos observers son bloques de c√≥digo que realizan acciones.\nSe ejecutan en respuesta a cambios en reactive values/expressions.\nNo devuelven un valor.\n\n\nC√≥digo\nobserve({\n  cat(\"El valor actual de input$x es \", input$x, \"\\n\")\n})\n\n\nExisten dos tipos de observers:\n\nImpl√≠citos: Dependen de todos los reactives values/expressions encontrados durante su ejecuci√≥n.\nobserve({‚Ä¶}) configura un bloque de c√≥digo que es ejecutado cada vez que uno de los reactive values o expressions que utiliza es actualizado.\nExpl√≠citos: Dependen de reactive values/expressions espec√≠ficos ignorando a los dem√°s. Son conocidos como event handler.\nobserveEvent(eventExpr, {‚Ä¶})\n\n\n\nC√≥digo\nfunction(input, output, session) {\n  # Se ejecuta inmediatamente y cada vez que input$cambia.\n  observe({\n    cat(\"El valor actual de input$x es \", input$x, \"\\n\")\n  })\n  \n  # Solo se ejecuta cuando input$upload_button es presionado. \n  # Cualquier reactive value/expression en el c√≥digo es \n  # tratado como si no fuese reactivo.\n  observeEvent(input$upload_button, {\n    httr::POST(server_url, jsonlite::toJSON(dataset()))\n  })\n}\n\n\nobserve() es la herramienta de bajo nivel que alimenta observeEvent(). Generalmente, es mejor usar observeEvent() a menos que resulte imposible usarlo para lo que uno quiere hacer.\nobserve() tambi√©n alimenta outputs reactivos. Los outputs reactivos son un tipo especial de observers que cuentan con dos importantes propiedades:\n\nSon definidos al ser asignados a output, por ejemplo, output$text &lt;- ‚Ä¶ crea el observer.\nTienen habilidad limitada para detectar cuando no son visibles (es decir, cuando est√°n en una ventana no activa) de modo tal que no tienen que volver a calcularse.\n\nEs importante notar que observe() y los outputs reactivos no ‚Äúhacen‚Äù algo sino que ‚Äúcrean‚Äù algo (que despu√©s toma acci√≥n cuando es necesario). Esto permite entender lo que sucede en este ejemplo:\n\n\nC√≥digo\nx &lt;- reactiveVal(1)\ny &lt;- observe({\n  x()\n  observe(print(x()))\n})\n#&gt; [1] 1\nx(2)\n#&gt; [1] 2\n#&gt; [1] 2\nx(3)\n#&gt; [1] 3\n#&gt; [1] 3\n#&gt; [1] 3\n\n\nCada cambio a x causa que el observer se dispare. Este observer llama a observe() lo cual configura otro observer. De este modo, cada vez que x cambia, obtiene otro observer por lo cual su valor es impreso otra vez.\nComo regla general uno solo deber√≠a crear observers y outputs en el nivel m√°s alto de la funci√≥n del servidor. Si uno se encuentra tratando de anidarlos o crear observers dentro de un output es momento de pensar en lo que uno est√° creando ya que seguramente hay una mejor manera de hacerlo.\nUn observer es ejecutado inmediatamente cuando es creado. Esto es necesario para que determine sus dependencias reactivas.\n\n\nEjemplo de Uso: Interactive Drill Down\nEn este Ejemplo veremos una aplicaci√≥n conjunta de reactive expressions y observers junto con una de las funciones de la familia updateInput: updateSelectInput.\n\n\nC√≥digo\nlibrary(shiny)\n\nsales &lt;- vroom::vroom(\"data/sales_data_sample.csv\", \n                      col_types = list(),\n                      na = \"\")\n\nui &lt;- fluidPage(\n  selectInput(\"territory\", \"Territory\", choices = unique(sales$TERRITORY)),\n  selectInput(\"customername\", \"Customer\", choices = NULL),\n  selectInput(\"ordernumber\", \"Order number\", choices = NULL),\n  tableOutput(\"data\")\n)\n\nserver &lt;- function(input, output, session) {\n  territory &lt;- reactive({\n    filter(sales, TERRITORY == input$territory)\n  })\n  observeEvent(territory(), {\n    choices &lt;- unique(territory()$CUSTOMERNAME)\n    updateSelectInput(inputId = \"customername\", choices = choices) \n  })\n  \n  customer &lt;- reactive({\n    req(input$customername)\n    filter(territory(), CUSTOMERNAME == input$customername)\n  })\n  observeEvent(customer(), {\n    choices &lt;- unique(customer()$ORDERNUMBER)\n    updateSelectInput(inputId = \"ordernumber\", choices = choices)\n  })\n  \n  output$data &lt;- renderTable({\n    req(input$ordernumber)\n    customer() %&gt;% \n      filter(ORDERNUMBER == input$ordernumber) %&gt;% \n      select(QUANTITYORDERED, PRICEEACH, PRODUCTCODE)\n  })\n}\n\nshinyapp(ui, server)\n\n\n\nEjercicio 3\nModificar la server function de modo tal que al apretar el bot√≥n ‚ÄúGuardar‚Äù se cree el archivo datos.csv.\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  h1(\"App de Ejemplo\"),\n  sidebarLayout(\n    sidebarPanel(\n      numericInput(\"nrows\", \"Cantidad de Filas\", 10),\n      actionButton(\"save\", \"Guardar\")\n    ),\n    mainPanel(\n      plotOutput(\"plot\"),\n      tableOutput(\"table\")\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n  df &lt;- reactive({\n    head(cars, input$nrows)\n  })\n  \n  output$plot &lt;- renderPlot({\n    plot(df())\n  })\n  \n  output$table &lt;- renderTable({\n    df()\n  })\n  \n  # Objetivo: Agregar la l√≥gica necesaria de modo tal que al apretar\n  # el boton \"Guardar\", los datos se guarden en \"datos.csv\"\n}\n\nshinyApp(ui, server)\n\n\nSoluci√≥n\n\n\nC√≥digo\n# Usar observeEvent para avisarle a Shiny qu√© hacer\n# cuando se hace click en input$save.\nobserveEvent(input$save, {\n  write.csv(df(), \"datos.csv\")\n})\n\n\n\n\n\nReactive Expressions vs Observers\n\nreactive()\n\nComo una funci√≥n, puede ser llamado y devuelve un valor, ya sea la √∫ltima expresi√≥n o return().\nEs lazy (vago). No ejecuta su c√≥digo hasta que alguien lo llama (incluso si sus dependencias reactivas cambiaron). Esto tambi√©n es una caracter√≠stica de las funciones. En otras palabras, solo trabaja cuando es necesario.\nCachea sus resultados. La primera vez que es llamado ejecuta el c√≥digo y almacena el valor resultante. Las siguientes llamadas se saltean la ejecuci√≥n y √∫nicamente regresan el valor.\nEs reactivo. Es notificado cuando sus dependencias cambian. Cuando eso pasa, vac√≠a el cache y notifica a quienes dependen de √©l.\n\n\n\nC√≥digo\nr1 &lt;- function() { runif(1) }\nr1()\n# [1] 0.8403573\nr1()\n# [1] 0.4590713\nr1()\n# [1] 0.9816089\n\n\n\n\nC√≥digo\nr2 &lt;- reactive({ runif(1) })\nr2()\n# [1] 0.5327107\nr2()\n# [1] 0.5327107\nr2()\n# [1] 0.5327107\n\n\nResulta cr√≠tico el hecho que las reactive expressions son lazy y cached.\nEs dif√≠cil razonar cu√°ndo se ejecutar√° el c√≥digo de una reactive expression (o incluso si se ejecutar√° o no).\nTodo lo que Shiny garantiza es que cuando solicitas una respuesta a una reactive expression, obtendr√°s la respuesta actualizada.\n\n\nC√≥digo\nfunction(input, output, session) {\n  reactive({\n    # Este c√≥digo nunca se ejecutar√°!\n    cat(\"El valor actual de input$x es \", input$x, \"\\n\")\n  })\n}\n\n\n\n\nobserve() / observeEvent()\n\nNo se puede llamar y no devuelve un valor. El valor de la √∫ltima expresi√≥n ser√° eliminado, as√≠ como los valores pasados a return().\nEs eager (ansioso). Cuando sus dependencias cambian, se ejecuta al instante. Esta ansiedad es infecciosa porque si usan una reactive expression, la misma tambi√©n ser√° evaluada.\nComo no puede ser llamado y no tiene un return value no existe una noci√≥n de caching que se pueda aplicar en este caso.\nEs reactivo. Es notificado cuando sus dependencias cambian y cuando eso sucede, se ejecuta lo m√°s r√°pido posible (no necesariamente en el instante que se produjo el cambio).\n\n\n\n\nreactive()\nobserve()\n\n\n\n\nSe puede invocar\nNo se puede invocar\n\n\nDevuelve un valor\nNo devuelve un valor\n\n\nLazy\nEager\n\n\nCached\nNo aplica\n\n\n\nExisten dos cosas que resulta necesario recordar:\n\nreactive() se usa para calcular valores, sin side effects\nobserve() se usa para realizar acciones, con side effects\n\nEsto es lo que cada uno de ellos es bueno haciendo. No hay que utilizar observe para calcular un valor y especialmente no hay que usar reactive para realizar acciones con side effects.\nUn c√°lculo es un bloque de c√≥digo donde no te interesa si el c√≥digo se ejecuta o no, s√≥lo te importa la respuesta. Es seguro para cachear. En este caso, hay que usar reactive().\nEn una acci√≥n el foco est√° en que el c√≥digo se ejecute y no hay una respuesta, s√≥lo side effects. En este caso, hay que usar observe()/observeEvent().\nEn el caso que alguien est√© interesado tanto en la respuesta como en que el c√≥digo se ejecute lo que habr√≠a que hacer es refactorear el c√≥digo en dos bloques distintos, separando el c√°lculo de la acci√≥n.\n\nPoema escrito por Joe Cheng:\n\n\n\nreactive()\nobserve()\n\n\n\n\nProp√≥sito\nC√°lculos\nAcciones\n\n\nSide effects?\nProhibidos\nPermitidos\n\n\n\nEl objetivo de este poema es ser usado como un ayuda memoria:\n\nKeep your side effects\nOutside of your reactives\nOr I will kill you\n-Joe Cheng\n\n\n\n\n\nAislando C√≥digo con isolate()\nobserveEvent() y eventReactive() son alimentados por isolate(), el cual permite evitar crear dependencias reactivas cuando no son necesarias.\nA veces los observers se emparejan con reactive values para poder seguir cambios de estado a trav√©s del tiempo. Por ejemplo, el siguiente c√≥digo cuenta cu√°ntas veces x cambi√≥:\n\n\nC√≥digo\nr &lt;- reactiveValues(conteo = 0, x = 1)\nobserve({\n  r$x\n  r$conteo &lt;- r$conteo + 1\n})\n\n\nSi uno corre ese c√≥digo, inmediatamente entrar√≠a en un bucle infinito porque el observer toma una dependencia reactiva en x y conteo y dado que el observer modifica conteo, inmediatamente volver√≠a a ejecutarse.\nAfortunadamente, isolate() resuelve este problema. Esta funci√≥n permite acceder al valor actual de un reactive value o expression sin tomar una dependencia sobre √©l:\n\n\nC√≥digo\nr &lt;- reactiveValues(conteo = 0, x = 1)\nclass(r)\n#&gt; [1] \"rv_flush_on_write\" \"reactivevalues\"\nobserve({\n  r$x\n  r$conteo &lt;- isolate(r$conteo) + 1\n})\n\nr$x &lt;- 1\nr$x &lt;- 2\nr$conteo\n#&gt; [1] 2\n\nr$x &lt;- 3\nr$conteo\n#&gt; [1] 3\n\n\nDel mismo modo que observe(), muchas veces no ser√° necesario usar isolate() directamente porque existen dos funciones √∫tiles que ‚Äúenvuelven‚Äù su uso m√°s com√∫n. Estas funciones son observeEvent() y eventReactive().\n\nobserveEvent() y eventReactive()\nobserveEvent(x, y) es equivalente a observe({x; isolate(y)}). Esta funci√≥n separa la acci√≥n que quer√©s tomar de aquello que la inicia.\neventReactive() realiza un trabajo id√©ntico, pero en este caso para reactives. eventReactive(x, y) es equivalente a reactive({x; isolate(y)}).\n\n\nMalos H√°bitos\nVamos a comparar dos formas en la que se obtendr√≠an, en principio, resultados iguales:\n\n\nC√≥digo\nserver &lt;- function(input, output, session) {\n  r &lt;- reactiveValues(df = cars)\n  observe({\n    r$df &lt;- head(cars, input$nrows)\n  })\n  \n  output$plot &lt;- renderPlot(plot(r$df))\n  output$table &lt;- renderTable(r$df)\n}\n\n\n\n\nC√≥digo\nserver &lt;- function(input, output, session) {\n  df &lt;- reactive(head(cars, input$nrows))\n  \n  output$plot &lt;- renderPlot(plot(df()))\n  output$table &lt;- renderTable(df())\n}\n\n\nLa segunda opci√≥n, a diferencia de la primera, hace uso de reactive(). Si bien la primera opci√≥n no hace mucho trabajo adicional en comparaci√≥n con la alternativa que usa reactive(), pueden mencionarse dos desventajas:\n\nSi la tabla o gr√°fico se encuentran en tabs que no est√°n activas, el observer los crear√° de todos modos.\nSi head() produce un error, observe() detendr√° la app mientras que reactive() propagar√° el error de modo tal que el reactive desplegado lo muestre.",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Reactividad</span>"
    ]
  },
  {
    "objectID": "capitulos/05_reactividad.html#ejercicios-complementarios",
    "href": "capitulos/05_reactividad.html#ejercicios-complementarios",
    "title": "Reactividad",
    "section": "Ejercicios Complementarios",
    "text": "Ejercicios Complementarios\n\nEjercicio 1\nUtilizar las siguientes l√≠neas de c√≥digo para crear una app que salude al usuario por su nombre. El objetivo de este ejercicio es pensar qu√© l√≠neas de c√≥digo necesitan ser utilizadas, copiarlas y pegarlas donde corresponda en un script.\nRecordatorio: hay l√≠neas de c√≥digo que no se deben usar.\n\n\nC√≥digo\ntableOutput(\"distribucion\")\noutput$saludo &lt;- renderText({\n  paste0(\"Hola \", input$nombre)\n})\nnumericInput(\"edad\", \"¬øQue edad tenes?\", value = NA)\ntextInput(\"nombre\", \"¬øCual es tu nombre?\")\ntextOutput(\"saludo\")\noutput$histograma &lt;- renderPlot({\n  hist(rnorm(1000))\n}, res = 96)\n\n\n\nSoluci√≥n\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  textInput(\"nombre\", \"¬øCual es tu nombre?\"),\n  textOutput(\"saludo\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$saludo &lt;- renderText({\n    paste0(\"Hola \", input$nombre)\n  })\n}\n\nshinyApp(ui, server)\n\n\n\n\n\nEjercicio 2\nSupongamos que quer√©s dise√±ar una app que permita al usuario fijar un numero (x) entre 1 y 100, y que muestre el resultado de multiplicar ese n√∫mero por 10. ¬øPod√©s encontrar el error en el siguiente c√≥digo y corregirlo?\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(\"x\", label = \"Si x es\", min = 1, max = 100, value = 30),\n  \"entonces x multiplicado por 10 es\",\n  textOutput(\"producto\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$producto &lt;- renderText({ \n    x * 10\n  })\n}\n\nshinyApp(ui, server)\n\n\n\nSoluci√≥n\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(\"x\", label = \"Si x es\", min = 1, max = 100, value = 30),\n  \"entonces x multiplicado por 10 es\",\n  textOutput(\"producto\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$producto &lt;- renderText({ \n    input$x * 10 # Faltaba agregar input$\n  })\n}\n\nshinyApp(ui, server)\n\n\n\n\n\nEjercicio 3\nExtender la app del Ejercicio 2 permitiendo al usuario fijar el valor de un multiplicador (y), de modo tal que la app muestre el valor x * y.\n\nSoluci√≥n\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(\"x\", label = \"Si x es\", min = 1, max = 100, value = 30),\n  sliderInput(\"y\", label = \"e y es\", min = 1, max = 100, value = 30),\n  \n  \"entonces x multiplicado por y es\",\n  textOutput(\"producto\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$producto &lt;- renderText({ \n    input$x * input$y\n  })\n}\n\nshinyApp(ui, server)\n\n\n\n\n\nEjercicio 4\nLa siguiente app agrega funcionalidades adicionales a la app descripta en el Ejercicio 3. ¬øQu√© es nuevo? ¬øPodr√≠as reducir el c√≥digo duplicado usando una reactive expression?\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(\"x\", \"Si x es\", min = 1, max = 100, value = 30),\n  sliderInput(\"y\", \"e y es\", min = 1, max = 100, value = 5),\n  \"entonces, (x * y) es\", textOutput(\"producto\"),\n  \"(x * y) + 5 es\", textOutput(\"producto_mas5\"),\n  \"(x * y) + 10 es\", textOutput(\"producto_mas10\")\n)\n\nserver &lt;- function(input, output, session) {\n  output$producto &lt;- renderText({ \n    producto &lt;- input$x * input$y\n    producto\n  })\n  output$producto_mas5 &lt;- renderText({ \n    producto &lt;- input$x * input$y\n    producto + 5\n  })\n  output$producto_mas10 &lt;- renderText({ \n    producto &lt;- input$x * input$y\n    producto + 10\n  })\n}\n\nshinyApp(ui, server)\n\n\n\nSoluci√≥n\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  sliderInput(\"x\", \"Si x es\", min = 1, max = 100, value = 30),\n  sliderInput(\"y\", \"e y es\", min = 1, max = 100, value = 5),\n  \"entonces, (x * y) es\", textOutput(\"producto\"),\n  \"(x * y) + 5 es\", textOutput(\"producto_mas5\"),\n  \"(x * y) + 10 es\", textOutput(\"producto_mas10\")\n)\n\nserver &lt;- function(input, output, session) {\n  producto &lt;- reactive({input$x * input$y})\n  output$producto &lt;- renderText({ \n    producto()\n  })\n  output$producto_mas5 &lt;- renderText({ \n    producto() + 5\n  })\n  output$producto_mas10 &lt;- renderText({ \n    producto() + 10\n  })\n}\n\nshinyApp(ui, server)\n\n\n\n\n\nEjercicio 5\nLa siguiente app permite seleccionar un dataset de un paquete (en este caso, proveniente de ggplot2) y muestra un resumen y un gr√°fico de los datos. El c√≥digo sigue buenas pr√°cticas y hace uso de reactive expressions para evitar c√≥digo redundante. Sin embargo, hay tres errores en dicho c√≥digo. ¬øPodr√°s encontrar los errores y corregirlos?\n\n\nC√≥digo\nlibrary(shiny)\nlibrary(ggplot2)\n\ndatasets &lt;- c(\"economics\", \"faithfuld\", \"seals\")\nui &lt;- fluidPage(\n  selectInput(\"dataset\", \"Dataset\", choices = datasets),\n  verbatimTextOutput(\"summary\"),\n  tableOutput(\"plot\")\n)\n\nserver &lt;- function(input, output, session) {\n  dataset &lt;- reactive({\n    get(input$dataset, \"package:ggplot2\")\n  })\n  output$summmry &lt;- renderPrint({\n    summary(dataset())\n  })\n  output$plot &lt;- renderPlot({\n    plot(dataset)\n  }, res = 96)\n}\n\nshinyApp(ui, server)\n\n\n\nSoluci√≥n\n\n\nC√≥digo\nlibrary(shiny)\nlibrary(ggplot2)\n\ndatasets &lt;- c(\"economics\", \"faithfuld\", \"seals\")\nui &lt;- fluidPage(\n  selectInput(\"dataset\", \"Dataset\", choices = datasets),\n  verbatimTextOutput(\"summary\"),\n  plotOutput(\"plot\") # Error 3 tableOutput -&gt; plotOutput\n)\n\nserver &lt;- function(input, output, session) {\n  dataset &lt;- reactive({\n    get(input$dataset, \"package:ggplot2\")\n  })\n  output$summary &lt;- renderPrint({ # Error 1 summmry -&gt; summary\n    summary(dataset())\n  })\n  output$plot &lt;- renderPlot({\n    plot(dataset()) # Error 2 dataset -&gt; dataset()\n  }, res = 96)\n}\n\nshinyApp(ui, server)\n\n\n\n\n\nEjercicio 6\nCompletar la siguiente app con una server function que actualice outcon el valor de x √∫nicamente cuando se apreta el bot√≥n.\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  numericInput(\"x\", \"x\", value = 50, min = 0, max = 100),\n  actionButton(\"capturar\", \"capturar\"),\n  textOutput(\"out\")\n)\n\nserver &lt;- function(input, ouutput, session){\n  # Completar\n}\n\nshinyApp(ui, server)\n\n\n\nSoluci√≥n\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  numericInput(\"x\", \"x\", value = 50, min = 0, max = 100),\n  actionButton(\"capturar\", \"capturar\"),\n  textOutput(\"out\")\n)\n\nserver &lt;- function(input, output, session){\n  valor_x &lt;- eventReactive(input$capturar, {\n    input$x\n  })\n  output$out &lt;- renderText(valor_x())\n}\n\nshinyApp(ui, server)\n\n\n\n\n\nEjercicio 7.1\nLa siguiente UI est√° compuesta por dos botones y un gr√°fico. El objetivo de este ejercicio es escribir una server function que grafique un histograma de 100 n√∫meros aleatorios provenientes de la distribuci√≥n del bot√≥n apretado.\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  actionButton(\"rnorm\", \"Normal Est√°ndar\"),\n  actionButton(\"runif\", \"Uniforme [0-1]\"),\n  plotOutput(\"plot\")\n)\n\nserver &lt;- function(input, output, session){\n  # Completar\n}\n\nshinyApp(ui, server)\n\n\n\nSoluci√≥n\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  actionButton(\"rnorm\", \"Normal Est√°ndar\"),\n  actionButton(\"runif\", \"Uniforme [0-1]\"),\n  plotOutput(\"plot\")\n)\n\nserver &lt;- function(input, output, session){\n  \n  data &lt;- reactiveVal()\n  \n  observeEvent(input$rnorm, data(rnorm(100)))\n  observeEvent(input$runif, data(runif(100)))\n  \n  output$plot &lt;- renderPlot({\n    req(data())\n    hist(data())\n  })\n  \n}\n\nshinyApp(ui, server)\n\n\n\n\n\nEjercicio 7.2\nModificar el c√≥digo anterior de modo tal que funcione con esta UI.\n\n\nC√≥digo\nui &lt;- fluidPage(\n  selectInput(\"type\", \"type\", c(\"Normal Est√°ndar\", \"Uniforme [0-1]\")),\n  actionButton(\"go\", \"go\"),\n  plotOutput(\"plot\")\n)\n\n\n\nSoluci√≥n\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  selectInput(\"type\", \"type\", c(\"Normal Est√°ndar\", \"Uniforme [0-1]\")),\n  actionButton(\"go\", \"go\"),\n  plotOutput(\"plot\")\n)\n\nserver &lt;- function(input, output, session){\n  \n  data &lt;- reactiveVal()\n  \n  observeEvent(input$go, {\n    if (input$type == \"Normal Est√°ndar\"){\n      data(rnorm(100))\n    } else {\n      data(runif(100))\n    }\n  })\n  \n  output$plot &lt;- renderPlot({\n    req(data())\n    hist(data())\n  })\n  \n}\n\nshinyApp(ui, server)\n\n\n\n\n\nEjercicio 7.3\nReescribir el c√≥digo del Ejercicio 7.2 reemplazando observe()/observeEvent() con reactive(). ¬øPor qu√© podemos hacer eso con la segunda UI pero no con la primera?\n\nSoluci√≥n\n\n\nC√≥digo\nlibrary(shiny)\n\nui &lt;- fluidPage(\n  selectInput(\"type\", \"type\", c(\"Normal Est√°ndar\", \"Uniforme [0-1]\")),\n  actionButton(\"go\", \"go\"),\n  plotOutput(\"plot\")\n)\n\nserver &lt;- function(input, output, session){\n  \n  data &lt;- reactive({\n    input$go\n    if (input$type == \"Normal Est√°ndar\"){\n      rnorm(100)\n    } else {\n      runif(100)\n    }\n  })\n  \n  output$plot &lt;- renderPlot({\n    req(data())\n    hist(data())\n  })\n  \n}\n\nshinyApp(ui, server)\n\n\nSe puede hacer con la segunda UI y no con la primera porque la segunda tiene el go actionButton.",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Reactividad</span>"
    ]
  },
  {
    "objectID": "capitulos/05_reactividad.html#ejemplo-leaflet",
    "href": "capitulos/05_reactividad.html#ejemplo-leaflet",
    "title": "Reactividad",
    "section": "Ejemplo Leaflet",
    "text": "Ejemplo Leaflet\n\n\nC√≥digo\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(spData)\nlibrary(leaflet)\nlibrary(sf)\n\ndata(\"world\")\n\ninterfaz &lt;- fluidPage(\n  \n  titlePanel(\"Conjunto de datos World\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\n        inputId = \"MiLista\",\n        label = \"Continente\",\n        choices = sort(unique(world$continent)),\n        selected = \"Europe\")\n    ),\n    mainPanel(\n      leafletOutput(\"MiMapa\")\n    )\n  )\n)\n\nMiServer &lt;- function(input, output) {\n  \n  output$MiMapa &lt;- renderLeaflet({\n    \n    datos &lt;- world %&gt;% \n      filter(continent %in% input$MiLista) %&gt;% \n      st_as_sf()\n      \n    paleta &lt;- colorFactor(\"Spectral\", datos$subregion)\n    \n      leaflet(datos) %&gt;%\n        addProviderTiles(\"NASAGIBS.ViirsEarthAtNight2012\") %&gt;%\n        addPolygons(weight = 2, \n                    popup = paste0(\"&lt;b&gt;Continente:&lt;/b&gt; \", datos$continent, \"&lt;br&gt;\",\n                                   \"&lt;b&gt;Regi√≥n:&lt;/b&gt; \", datos$subregion, \"&lt;br&gt;\",\n                                   \"&lt;b&gt;Pa√≠s:&lt;/b&gt; \", datos$name_long),\n                    color = ~paleta(subregion))\n  })\n}\n\nshinyApp(ui = interfaz, server = MiServer)",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>11</span>¬† <span class='chapter-title'>Reactividad</span>"
    ]
  },
  {
    "objectID": "capitulos/05_publicar.html",
    "href": "capitulos/05_publicar.html",
    "title": "12¬† Publicar",
    "section": "",
    "text": "12.1 Subir mi Shiny App a la web",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Publicar</span>"
    ]
  },
  {
    "objectID": "capitulos/05_publicar.html#subir-mi-shiny-app-a-la-web",
    "href": "capitulos/05_publicar.html#subir-mi-shiny-app-a-la-web",
    "title": "12¬† Publicar",
    "section": "",
    "text": "Existen algunas preguntas que se repiten siempre que usamos Shiny: ¬øc√≥mo puedo hacer para compartir mi aplicaci√≥n con otras personas? ¬øTengo que obligarlas a instalar R y que ejecuten el c√≥digo? ¬øHay alguna manera f√°cil de subir mi app a Internet?\nHay varias maneras de dar respuesta a estos interrogantes, cada una orientada a diferentes perfiles de usuarios/as. A continuaci√≥n repasaremos las m√°s populares.\n\n\n12.1.1 Shiny Server\n\nEs un servicio de hosting gratuito ofrecido por RStudio que funciona en servidores Linux.\nEsta opci√≥n es interesante si deseamos alojar apps en el servidor de la instituci√≥n donde trabajamos, generalmente para uso interno.\nVentajas: es gratuito y podemos alojar m√∫ltiples aplicaciones, cada una con su respectiva direcci√≥n URL.\nDesventajas: habitualmente el acceso a la configuraci√≥n del servidor Shiny depende del √°rea de Inform√°tica o Sistemas de la organizaci√≥n donde trabajamos; en este sentido una comunicaci√≥n fluida entre nosotros y el/la responsable del sector ser√° indispensable, ya que generalmente no tendremos los permisos necesarios para instalar paquetes o actualizar las versiones de R y RStudio (no cualquier empleado/a puede ‚Äúmeter mano‚Äù en los servidores de la empresa o instituci√≥n donde trabaja). Adem√°s, no es trivial habilitar el acceso a las apps por fuera de la red donde est√° instalado el Shiny Server.\nPara m√°s detalles sobre esta opci√≥n, visitar https://posit.co/download/shiny-server/.\n\n\n\n\n\n\n\n\n\n\nP√°gina de bienvenida de Shiny Server cuando se completa el proceso de instalaci√≥n\n\n\n\n\n\n\n12.1.2 RStudio Connect\n\nRStudio Connect (actualmente Posit Connect) es la alternativa paga a Shiny Server. Ofrece mayor seguridad y atenci√≥n personalizada, y es uno de los productos m√°s populares lanzados por RStudio.\nPermite publicar aplicaciones desde RStudio y programar la ejecuci√≥n de scripts, de tal manera que los datos empleados en la app se pueden actualizar con la periodicidad que deseemos.\nAdem√°s, se integra perfectamente con Python, Tableau, Jupyter Notebook y otras aplicaciones.\nAl d√≠a de hoy (octubre 2023) las versiones m√°s econ√≥micas de RStudio Connect poseen un precio de entre $23.000 y $61.000 d√≥lares anuales‚Ä¶ üò± üò®\nEntre sus clientes m√°s destacados podemos mencionar a las universidades de Harvard y Oxford, la empresa de bienes ra√≠ces Redfin, las farmac√©uticas Janssen y AstraZeneca, la aseguradora Liberty Mutual, etc.\nVentajas: tiene todo lo que podemos necesitar en un servidor para alojar Shiny apps.\nDesventajas: es muy caro, y encima en USD.\nPara m√°s informaci√≥n sobre este producto, visitar https://posit.co/products/enterprise/connect/.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n12.1.3 Amazon Web Services (AWS)\n\nAWS es una compa√±√≠a subsidiaria de Amazon que ofrece servidores virtuales y plataformas de computaci√≥n en la nube a individuos particulares, empresas u organizaciones. Su estrategia de mercado se basa en cobrar por la cantidad de uso (volumen de tr√°fico, espacio utilizado, cantidad de visitas, etc.) de las aplicaciones o programas all√≠ alojados, en vez de hacerlo a trav√©s de una cuota fija mensual.\nSeg√∫n estimaciones correspondientes al 2¬∞ trimestre 2023 sobre empresas que ofrecen infraestructura de computaci√≥n en la nube, AWS tiene una participaci√≥n en el mercado (market share) equivalente a la de Microsoft y Google combinados (!!!) (fuente).\nUno de los tantos servicios que ofrece AWS es EC2 (Elastic Compute Cloud), el cual permite que cualquier usuario/a tenga acceso a un cluster virtual de computadoras para procesar su informaci√≥n. Si queremos subir nuestras shiny apps a la web, EC2 es la herramienta que necesitamos.\nVentajas: eligiendo los m√≠nimos niveles de prestaciones, el primer a√±o de servicio es gratuito (de todas formas, Amazon solicita datos de tarjeta de cr√©dito para dar acceso a este ‚Äúper√≠odo de prueba‚Äù sin costo). Los protocolos de seguridad aplicados y las caracter√≠sticas del servidor (velocidad, estabilidad, capacidad, etc.) son de primera calidad.\nDesventajas: el proceso de creaci√≥n de una cuenta en AWS, apertura de instancia EC2, instalaci√≥n de R, RStudio y Shiny Server en la nube, configuraci√≥n de llaves SSH, etc. puede requerir de varias horas de sufrimiento. Dos tutoriales muy recomendables que nos orientan durante este proceso pueden encontrarse aqu√≠ y aqu√≠.\nM√°s info sobre AWS y EC2 en https://aws.amazon.com/es/.\n\n\n\n\n\n\n\n\n\n\n\n\n12.1.4 shinyapps.io\n\nshinyapps.io es el servicio de hosting gratuito ofrecido por RStudio. Si estamos dando nuestros primeros pasos con Shiny, esta es sin dudas la opci√≥n m√°s recomendable a la hora de publicar apps en la web.\nPara utilizar esta herramienta es necesario instalar el paquete rsconnect, crear una cuenta personal en shinyapps.io y luego conectarla con RStudio mediante una clave autogenerada (token).\nSi bien este proceso no es demasiado complejo, recomendamos leer un tutorial que nos guiar√° paso a paso a lo largo del recorrido.\nUna vez completada la configuraci√≥n, tendremos una URL a nuestro nombre alojada en shinyapps.io. Por ejemplo, si nuestro nombre de usuario es diego y hemos subido a la web una app llamada tuto4, la encontraremos disponible en el enlace https://diego.shinyapps.io/tuto4/.\nLa conexi√≥n entre shinyapps.io y RStudio se da a trav√©s del bot√≥n Publish Application que figura en la barra de herramientas del editor:\n\n\n\n\n\n\n\n\n\n\n\nHaciendo click all√≠ accedemos a un men√∫ donde podemos definir tres aspectos: archivos necesarios para la ejecuci√≥n de la app (incluye c√≥digo, im√°genes, estilos CSS, etc.); cuenta asociada de shinyapps.io y nombre de la aplicaci√≥n (texto que se mostrar√° a continuaci√≥n de la barra en la URL):\n\n\n\n\n\n\n\n\n\n\n\nAl apretar el bot√≥n Publish comenzar√° un proceso que puede llevar algunos minutos, durante los cuales veremos varias l√≠neas de c√≥digo ejecut√°ndose en la consola de RStudio. Una vez finalizado, la aplicaci√≥n se encontrar√° disponible online para ser visitada por cualquier persona con acceso a internet.\nVentajas: es la manera m√°s f√°cil y directa de publicar nuestras apps. Ofrece un tablero desde el cual podemos ver estad√≠sticas de uso y logs (registros) de cada una de las aplicaciones que subimos. Por sobre todas las cosas, es gratis y funciona bien.\nDesventajas: la versi√≥n gratuita de shinyapps.io s√≥lo permite que cada usuario aloje 5 apps al mismo tiempo, con un m√°ximo de 25 hs. de uso mensual en cada una de ellas. Para acceder a un n√∫mero ilimitado de apps y 10.000 hs. mensuales de uso, debemos abonar la suma de $3.860 d√≥lares al a√±o (precio actualizado a octubre 2023).",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Publicar</span>"
    ]
  },
  {
    "objectID": "capitulos/05_publicar.html#proteger-mi-app-con-contrase√±a",
    "href": "capitulos/05_publicar.html#proteger-mi-app-con-contrase√±a",
    "title": "12¬† Publicar",
    "section": "12.2 Proteger mi App con contrase√±a",
    "text": "12.2 Proteger mi App con contrase√±a\n\nExisten ocasiones en las cuales queremos que nuestra app est√© subida a la web, pero al mismo tiempo deseamos limitar al acceso a un grupo determinado de usuarios/as.\nEsto puede lograrse agregando una pantalla de inicio de sesi√≥n que solicite Usuario y Contrase√±a a las personas que visitan la app. Para aplicar una estrategia como esta, haremos uso del paquete shinymanager.\n\n\n\n\n\n\n\n\n\n\n\nEl primer paso consiste en definir un listado de usuarios y contrase√±as habilitados para acceder a la app:\n\n\ncredenciales &lt;- tibble(\n  user = c(\"diego\", \"ivan\", \"santiago\", \"julia\"),\n  password = paste0(user, \"123\")\n)\n\n\n\n\n\n\nuser\npassword\n\n\n\n\ndiego\ndiego123\n\n\nivan\nivan123\n\n\nsantiago\nsantiago123\n\n\njulia\njulia123\n\n\n\n\n\n\n\n\nSegundo paso: creamos una app simple para utilizar como ejemplo:\n\n\nlibrary(shiny)\nlibrary(shinymanager)\n\nui &lt;- fluidPage(\n  titlePanel(\"App con Contrase√±a\"),\n  plotOutput(\"grafico\")\n  )\n\nserver &lt;- function(input, output) {\n  output$grafico &lt;- renderPlot(plot(iris))\n  }\n\nshinyApp(ui, server)\n\n\nTercer paso: aplicamos la funci√≥n secure_app() a nuestra interfaz y agregamos un llamado a secure_server() dentro del servidor:\n\n\nlibrary(shiny)\nlibrary(shinymanager)\nlibrary(dplyr)\n\ncredenciales &lt;- tibble(\n  user = c(\"diego\", \"ivan\", \"santiago\", \"julia\"),\n  password = paste0(user, \"123\")\n)\n\nui &lt;- fluidPage(\n  titlePanel(\"App con Contrase√±a\"),\n  plotOutput(\"grafico\")\n  ) %&gt;% \n  secure_app(language = \"es\")\n\nserver &lt;- function(input, output) {\n  \n  #Defino usuarios y contrase√±as habilitadas\n  servidor_seguro &lt;- secure_server(\n    check_credentials = check_credentials(credenciales)\n    )\n  \n  #Objeto lista con info sobre el usuario conectado\n  #es una funci√≥n de uso interno del paquete shinymanager\n  output$auth_output &lt;- renderPrint({\n    reactiveValuesToList(servidor_seguro)\n    })\n  \n  output$grafico &lt;- renderPlot(plot(iris))\n  }\n\nshinyApp(ui, server)\n\n\n\n\n\n\n\n\n\n\nPantalla inicial mostrada en la app\n\n\n\n\n\n¬°Listo! Ya tenemos una Shiny app protegida mediante contrase√±a. El dataset con el listado de usuarios autorizados (llamado en este ejemplo credenciales) tambi√©n puede contener columnas llamadas start y expire con fechas de inicio y caducidad del acceso brindado.\nExiste un tipo especial de usuario (admin = TRUE) que posee la potestad de agregar, modificar o eliminar otros usuarios. La ventaja m√°s importante de ser admin es el acceso a estad√≠sticas de uso de la app, por ejemplo cantidad de conexiones de cada usuario, n√∫mero de visitas diarias, etc.\nLamentablemente, no es posible acceder al 100% de las funcionalidades del admin cuando la app est√° alojada en https://www.shinyapps.io/, ni tampoco cuando generamos un tablero mediante flexdashboard.\n\n\nCuidado!\nSi en el servidor de nuestra app hacemos uso de alg√∫n input que depende del usuario/a, es recomendable invocar a la funci√≥n req() de antemano para evitar problemas: el hecho de aplicar contrase√±as retrasa la ejecuci√≥n de cierto c√≥digo, creando un rezago en el flujo de informaci√≥n entre interfaz y servidor.\n\n\nPor ejemplo:\n\n\nui &lt;- fluidPage(\n  numericInput(\"numerito\", label = \"Elegir Valor\", value = 0),\n  textOutput(\"salida\")\n  ) \n\nserver &lt;- function(input, output) {\n  output$salida &lt;- renderText({\n    req(input$numerito)\n    paste0(\"El n√∫mero elegido es \", input$numerito)\n  })\n}\n\nshinyApp(ui, server)",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Publicar</span>"
    ]
  },
  {
    "objectID": "capitulos/05_publicar.html#personalizar-la-pantalla-de-inicio",
    "href": "capitulos/05_publicar.html#personalizar-la-pantalla-de-inicio",
    "title": "12¬† Publicar",
    "section": "12.3 Personalizar la pantalla de inicio",
    "text": "12.3 Personalizar la pantalla de inicio\n\nEl paquete shinymanager permite personalizar el aspecto de la p√°gina donde se solicita el nombre de usuario y contrase√±a necesarios para ingresar a la app.\nPara esto, agregamos dentro de la interfaz un llamado a la funci√≥n auth_ui(), mientras que en el servidor debemos modificar levemente el c√≥digo original.\nContinuando con el ejemplo anterior:\n\n\nlibrary(shiny)\nlibrary(shinymanager)\nlibrary(dplyr)\n\ncredenciales &lt;- tibble(\n  user = c(\"diego\", \"ivan\", \"santiago\", \"julia\"),\n  password = paste0(user, \"123\")\n)\n\nui &lt;- fluidPage(\n  \n  auth_ui(\n    id = \"pantalla_ini\",\n    status = \"danger\",\n    background = \"url('https://jeremymack-lu.github.io/shinyapps/images/shiny_hex.png');\",\n    lan = use_language(\"es\"),\n    choose_language = TRUE\n  ),\n  \n  # Resultado de la autenticaci√≥n\n  #verbatimTextOutput(outputId = \"res_auth\"),\n\n  titlePanel(\"App con Contrase√±a\"),\n  plotOutput(\"grafico\")\n  )\n\nserver &lt;- function(input, output, session) {\n  \n  #Defino usuarios y contrase√±as habilitadas\n  auth &lt;- callModule(\n      module = auth_server,\n      id = \"pantalla_ini\",\n      check_credentials = check_credentials(credenciales)\n    )\n  \n  #Objeto lista con info sobre el usuario conectado\n  #funci√≥n de uso interno del paquete shinymanager\n  output$res_auth &lt;- renderPrint({reactiveValuesToList(auth)})\n  \n  output$grafico &lt;- renderPlot(plot(iris))\n  }\n\nshinyApp(ui, server)",
    "crumbs": [
      "Unidad 5. Shiny",
      "<span class='chapter-number'>12</span>¬† <span class='chapter-title'>Publicar</span>"
    ]
  }
]